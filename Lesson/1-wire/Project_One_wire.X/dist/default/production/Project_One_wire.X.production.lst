

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Wed Feb 28 21:32:21 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 1.44
    32                           ; Generated 14/09/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F877 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001D                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  0086                     	;# 
   103  0087                     	;# 
   104  0088                     	;# 
   105  0089                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  010E                     	;# 
   120  010F                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  000E                     	;# 
   139  000F                     	;# 
   140  0010                     	;# 
   141  0011                     	;# 
   142  0012                     	;# 
   143  0013                     	;# 
   144  0014                     	;# 
   145  0015                     	;# 
   146  0015                     	;# 
   147  0016                     	;# 
   148  0017                     	;# 
   149  0018                     	;# 
   150  0019                     	;# 
   151  001A                     	;# 
   152  001B                     	;# 
   153  001B                     	;# 
   154  001C                     	;# 
   155  001D                     	;# 
   156  001E                     	;# 
   157  001F                     	;# 
   158  0081                     	;# 
   159  0085                     	;# 
   160  0086                     	;# 
   161  0087                     	;# 
   162  0088                     	;# 
   163  0089                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0093                     	;# 
   170  0094                     	;# 
   171  0098                     	;# 
   172  0099                     	;# 
   173  009E                     	;# 
   174  009F                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  010F                     	;# 
   179  018C                     	;# 
   180  018D                     	;# 
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000D                     	;# 
   195  000E                     	;# 
   196  000E                     	;# 
   197  000F                     	;# 
   198  0010                     	;# 
   199  0011                     	;# 
   200  0012                     	;# 
   201  0013                     	;# 
   202  0014                     	;# 
   203  0015                     	;# 
   204  0015                     	;# 
   205  0016                     	;# 
   206  0017                     	;# 
   207  0018                     	;# 
   208  0019                     	;# 
   209  001A                     	;# 
   210  001B                     	;# 
   211  001B                     	;# 
   212  001C                     	;# 
   213  001D                     	;# 
   214  001E                     	;# 
   215  001F                     	;# 
   216  0081                     	;# 
   217  0085                     	;# 
   218  0086                     	;# 
   219  0087                     	;# 
   220  0088                     	;# 
   221  0089                     	;# 
   222  008C                     	;# 
   223  008D                     	;# 
   224  008E                     	;# 
   225  0091                     	;# 
   226  0092                     	;# 
   227  0093                     	;# 
   228  0094                     	;# 
   229  0098                     	;# 
   230  0099                     	;# 
   231  009E                     	;# 
   232  009F                     	;# 
   233  010C                     	;# 
   234  010D                     	;# 
   235  010E                     	;# 
   236  010F                     	;# 
   237  018C                     	;# 
   238  018D                     	;# 
   239  0000                     	;# 
   240  0001                     	;# 
   241  0002                     	;# 
   242  0003                     	;# 
   243  0004                     	;# 
   244  0005                     	;# 
   245  0006                     	;# 
   246  0007                     	;# 
   247  0008                     	;# 
   248  0009                     	;# 
   249  000A                     	;# 
   250  000B                     	;# 
   251  000C                     	;# 
   252  000D                     	;# 
   253  000E                     	;# 
   254  000E                     	;# 
   255  000F                     	;# 
   256  0010                     	;# 
   257  0011                     	;# 
   258  0012                     	;# 
   259  0013                     	;# 
   260  0014                     	;# 
   261  0015                     	;# 
   262  0015                     	;# 
   263  0016                     	;# 
   264  0017                     	;# 
   265  0018                     	;# 
   266  0019                     	;# 
   267  001A                     	;# 
   268  001B                     	;# 
   269  001B                     	;# 
   270  001C                     	;# 
   271  001D                     	;# 
   272  001E                     	;# 
   273  001F                     	;# 
   274  0081                     	;# 
   275  0085                     	;# 
   276  0086                     	;# 
   277  0087                     	;# 
   278  0088                     	;# 
   279  0089                     	;# 
   280  008C                     	;# 
   281  008D                     	;# 
   282  008E                     	;# 
   283  0091                     	;# 
   284  0092                     	;# 
   285  0093                     	;# 
   286  0094                     	;# 
   287  0098                     	;# 
   288  0099                     	;# 
   289  009E                     	;# 
   290  009F                     	;# 
   291  010C                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  018C                     	;# 
   296  018D                     	;# 
   297                           
   298                           	psect	idataBANK0
   299  00B7                     __pidataBANK0:	
   300                           
   301                           ;initializer for _ZNAK
   302  00B7  3401               	retlw	1
   303                           
   304                           	psect	strings
   305  0003                     __pstrings:	
   306  0003                     stringtab:	
   307  0003                     __stringtab:	
   308                           
   309                           ;	String table - string pointers are 1 byte each
   310  0003  1BFF               	btfsc	btemp+1,7
   311  0004  280D               	ljmp	stringcode
   312  0005  1383               	bcf	3,7
   313  0006  187F               	btfsc	btemp+1,0
   314  0007  1783               	bsf	3,7
   315  0008  0800               	movf	0,w
   316  0009  0A84               	incf	4,f
   317  000A  1903               	skipnz
   318  000B  0AFF               	incf	btemp+1,f
   319  000C  0008               	return
   320  000D                     stringcode:	
   321  000D                     stringdir:	
   322  000D  3000               	movlw	high stringdir
   323  000E  008A               	movwf	10
   324  000F  0804               	movf	4,w
   325  0010  0A84               	incf	4,f
   326  0011  0782               	addwf	2,f
   327  0012                     __stringbase:	
   328  0012  3400               	retlw	0
   329  0013                     __end_of__stringtab:	
   330  0013                     _dpowers:	
   331  0013  3401               	retlw	1
   332  0014  3400               	retlw	0
   333  0015  340A               	retlw	10
   334  0016  3400               	retlw	0
   335  0017  3464               	retlw	100
   336  0018  3400               	retlw	0
   337  0019  34E8               	retlw	232
   338  001A  3403               	retlw	3
   339  001B  3410               	retlw	16
   340  001C  3427               	retlw	39
   341  001D                     __end_of_dpowers:	
   342  001D                     _hexpowers:	
   343  001D  3401               	retlw	1
   344  001E  3400               	retlw	0
   345  001F  3410               	retlw	16
   346  0020  3400               	retlw	0
   347  0021  3400               	retlw	0
   348  0022  3401               	retlw	1
   349  0023  3400               	retlw	0
   350  0024  3410               	retlw	16
   351  0025                     __end_of_hexpowers:	
   352  001A                     _RCREG	set	26
   353  0019                     _TXREG	set	25
   354  0006                     _PORTB	set	6
   355  0006                     _PORTBbits	set	6
   356  0065                     _RCIF	set	101
   357  00C4                     _CREN	set	196
   358  00C7                     _SPEN	set	199
   359  0030                     _RB0	set	48
   360  0099                     _SPBRG	set	153
   361  04C1                     _TRMT	set	1217
   362  04C5                     _TXEN	set	1221
   363  043E                     _TRISC6	set	1086
   364  043F                     _TRISC7	set	1087
   365  04C4                     _SYNC	set	1220
   366  04C2                     _BRGH	set	1218
   367  0430                     _TRISB0	set	1072
   368  0025                     STR_10:	
   369  0025  3454               	retlw	84	;'T'
   370  0026  3463               	retlw	99	;'c'
   371  0027  3465               	retlw	101	;'e'
   372  0028  346C               	retlw	108	;'l'
   373  0029  3473               	retlw	115	;'s'
   374  002A  343D               	retlw	61	;'='
   375  002B  342D               	retlw	45	;'-'
   376  002C  3425               	retlw	37	;'%'
   377  002D  3434               	retlw	52	;'4'
   378  002E  3464               	retlw	100	;'d'
   379  002F  342E               	retlw	46	;'.'
   380  0030  3425               	retlw	37	;'%'
   381  0031  3430               	retlw	48	;'0'
   382  0032  3431               	retlw	49	;'1'
   383  0033  3464               	retlw	100	;'d'
   384  0034  34C3               	retlw	-61
   385  0035  34B8               	retlw	-72
   386  0036  3443               	retlw	67	;'C'
   387  0037  340D               	retlw	13
   388  0038  340A               	retlw	10
   389  0039  3400               	retlw	0
   390  003A                     STR_8:	
   391  003A  3454               	retlw	84	;'T'
   392  003B  3463               	retlw	99	;'c'
   393  003C  3465               	retlw	101	;'e'
   394  003D  346C               	retlw	108	;'l'
   395  003E  3473               	retlw	115	;'s'
   396  003F  343D               	retlw	61	;'='
   397  0040  3425               	retlw	37	;'%'
   398  0041  3434               	retlw	52	;'4'
   399  0042  3464               	retlw	100	;'d'
   400  0043  342E               	retlw	46	;'.'
   401  0044  3425               	retlw	37	;'%'
   402  0045  3430               	retlw	48	;'0'
   403  0046  3431               	retlw	49	;'1'
   404  0047  3464               	retlw	100	;'d'
   405  0048  34C3               	retlw	-61
   406  0049  34B8               	retlw	-72
   407  004A  3443               	retlw	67	;'C'
   408  004B  340D               	retlw	13
   409  004C  340A               	retlw	10
   410  004D  3400               	retlw	0
   411  004E                     STR_2:	
   412  004E  3453               	retlw	83	;'S'
   413  004F  3468               	retlw	104	;'h'
   414  0050  346F               	retlw	111	;'o'
   415  0051  3472               	retlw	114	;'r'
   416  0052  3474               	retlw	116	;'t'
   417  0053  3420               	retlw	32	;' '
   418  0054  3443               	retlw	67	;'C'
   419  0055  3469               	retlw	105	;'i'
   420  0056  3472               	retlw	114	;'r'
   421  0057  3463               	retlw	99	;'c'
   422  0058  3475               	retlw	117	;'u'
   423  0059  3469               	retlw	105	;'i'
   424  005A  3474               	retlw	116	;'t'
   425  005B  3420               	retlw	32	;' '
   426  005C  3421               	retlw	33	;'!'
   427  005D  340D               	retlw	13
   428  005E  340A               	retlw	10
   429  005F  3400               	retlw	0
   430  0060                     STR_3:	
   431  0060  344E               	retlw	78	;'N'
   432  0061  346F               	retlw	111	;'o'
   433  0062  3420               	retlw	32	;' '
   434  0063  3453               	retlw	83	;'S'
   435  0064  3465               	retlw	101	;'e'
   436  0065  346E               	retlw	110	;'n'
   437  0066  3473               	retlw	115	;'s'
   438  0067  346F               	retlw	111	;'o'
   439  0068  3472               	retlw	114	;'r'
   440  0069  3420               	retlw	32	;' '
   441  006A  3466               	retlw	102	;'f'
   442  006B  346F               	retlw	111	;'o'
   443  006C  3475               	retlw	117	;'u'
   444  006D  346E               	retlw	110	;'n'
   445  006E  3464               	retlw	100	;'d'
   446  006F  340D               	retlw	13
   447  0070  340A               	retlw	10
   448  0071  3400               	retlw	0
   449  0072                     STR_12:	
   450  0072  3430               	retlw	48	;'0'
   451  0073  3431               	retlw	49	;'1'
   452  0074  3432               	retlw	50	;'2'
   453  0075  3433               	retlw	51	;'3'
   454  0076  3434               	retlw	52	;'4'
   455  0077  3435               	retlw	53	;'5'
   456  0078  3436               	retlw	54	;'6'
   457  0079  3437               	retlw	55	;'7'
   458  007A  3438               	retlw	56	;'8'
   459  007B  3439               	retlw	57	;'9'
   460  007C  3441               	retlw	65	;'A'
   461  007D  3442               	retlw	66	;'B'
   462  007E  3443               	retlw	67	;'C'
   463  007F  3444               	retlw	68	;'D'
   464  0080  3445               	retlw	69	;'E'
   465  0081  3446               	retlw	70	;'F'
   466  0082  3400               	retlw	0
   467  0083                     STR_1:	
   468  0083  3448               	retlw	72	;'H'
   469  0084  3465               	retlw	101	;'e'
   470  0085  346C               	retlw	108	;'l'
   471  0086  346C               	retlw	108	;'l'
   472  0087  346F               	retlw	111	;'o'
   473  0088  3420               	retlw	32	;' '
   474  0089  3455               	retlw	85	;'U'
   475  008A  3473               	retlw	115	;'s'
   476  008B  3465               	retlw	101	;'e'
   477  008C  3472               	retlw	114	;'r'
   478  008D  3421               	retlw	33	;'!'
   479  008E  3421               	retlw	33	;'!'
   480  008F  3421               	retlw	33	;'!'
   481  0090  340D               	retlw	13
   482  0091  340A               	retlw	10
   483  0092  3400               	retlw	0
   484  0093                     STR_7:	
   485  0093  3420               	retlw	32	;' '
   486  0094  3420               	retlw	32	;' '
   487  0095  3454               	retlw	84	;'T'
   488  0096  343A               	retlw	58	;':'
   489  0097  3420               	retlw	32	;' '
   490  0098  3425               	retlw	37	;'%'
   491  0099  3430               	retlw	48	;'0'
   492  009A  3434               	retlw	52	;'4'
   493  009B  3458               	retlw	88	;'X'
   494  009C  3420               	retlw	32	;' '
   495  009D  343D               	retlw	61	;'='
   496  009E  3420               	retlw	32	;' '
   497  009F  3400               	retlw	0
   498  00A0                     STR_4:	
   499  00A0  3442               	retlw	66	;'B'
   500  00A1  3475               	retlw	117	;'u'
   501  00A2  3473               	retlw	115	;'s'
   502  00A3  3420               	retlw	32	;' '
   503  00A4  3445               	retlw	69	;'E'
   504  00A5  3472               	retlw	114	;'r'
   505  00A6  3472               	retlw	114	;'r'
   506  00A7  346F               	retlw	111	;'o'
   507  00A8  3472               	retlw	114	;'r'
   508  00A9  340D               	retlw	13
   509  00AA  340A               	retlw	10
   510  00AB  3400               	retlw	0
   511  00AC                     STR_6:	
   512  00AC  3425               	retlw	37	;'%'
   513  00AD  3430               	retlw	48	;'0'
   514  00AE  3432               	retlw	50	;'2'
   515  00AF  3458               	retlw	88	;'X'
   516  00B0  3420               	retlw	32	;' '
   517  00B1  3400               	retlw	0
   518  00B2                     STR_5:	
   519  00B2  3449               	retlw	73	;'I'
   520  00B3  3444               	retlw	68	;'D'
   521  00B4  343A               	retlw	58	;':'
   522  00B5  3420               	retlw	32	;' '
   523  00B6  3400               	retlw	0
   524  005F                     
   525                           	psect	cinit
   526  07F6                     start_initialization:	
   527                           ; #config settings
   528                           
   529  07F6                     __initialization:	
   530                           
   531                           ; Initialize objects allocated to BANK0
   532  07F6  120A  118A  20B7   	fcall	__pidataBANK0	;fetch initializer
   533  07F9  00E7               	movwf	__pdataBANK0& (0+127)
   534                           
   535                           ; Clear objects allocated to BANK0
   536  07FA  01E5               	clrf	__pbssBANK0& (0+127)
   537  07FB  01E6               	clrf	(__pbssBANK0+1)& (0+127)
   538  07FC                     end_of_initialization:	
   539                           ;End of C runtime variable initialization code
   540                           
   541  07FC                     __end_of__initialization:	
   542  07FC  0183               	clrf	3
   543  07FD  120A  118A  2A1E   	ljmp	_main	;jump to C main() function
   544                           
   545                           	psect	bssBANK0
   546  0065                     __pbssBANK0:	
   547  0065                     _temp:	
   548  0065                     	ds	2
   549                           
   550                           	psect	dataBANK0
   551  0067                     __pdataBANK0:	
   552  0067                     _ZNAK:	
   553  0067                     	ds	1
   554                           
   555                           	psect	cstackCOMMON
   556  0070                     __pcstackCOMMON:	
   557  0070                     ?_isdigit:	
   558  0070                     ?_start_meas:	
   559                           ; 1 bit 
   560                           
   561  0070                     ?_read_meas:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0070                     ??_isdigit:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0070                     ?_main:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ?_OneWire_reset:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ??_OneWire_reset:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_OneWire_Bit_IO:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ??_OneWire_Bit_IO:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ?_Transmit_char:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ??_Transmit_char:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ?___wmul:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ?___lwdiv:	
   592                           ; 2 bytes @ 0x0
   593                           
   594  0070                     ?___aldiv:	
   595                           ; 2 bytes @ 0x0
   596                           
   597  0070                     Transmit_char@data:	
   598                           ; 4 bytes @ 0x0
   599                           
   600  0070                     _isdigit$405:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     ___wmul@multiplier:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     ___lwdiv@divisor:	
   607                           ; 2 bytes @ 0x0
   608                           
   609  0070                     ___aldiv@divisor:	
   610                           ; 2 bytes @ 0x0
   611                           
   612                           
   613                           ; 4 bytes @ 0x0
   614  0070                     	ds	1
   615  0071                     ?_Usart_PrintString:	
   616  0071                     OneWire_Bit_IO@b:	
   617                           ; 1 bytes @ 0x1
   618                           
   619  0071                     isdigit@c:	
   620                           ; 1 bytes @ 0x1
   621                           
   622  0071                     Usart_PrintString@Text:	
   623                           ; 1 bytes @ 0x1
   624                           
   625                           
   626                           ; 2 bytes @ 0x1
   627  0071                     	ds	1
   628  0072                     ?_OneWire_Byte_Write:	
   629  0072                     OneWire_reset@err:	
   630                           ; 2 bytes @ 0x2
   631                           
   632  0072                     ___wmul@multiplicand:	
   633                           ; 1 bytes @ 0x2
   634                           
   635  0072                     ___lwdiv@dividend:	
   636                           ; 2 bytes @ 0x2
   637                           
   638                           
   639                           ; 2 bytes @ 0x2
   640  0072                     	ds	1
   641  0073                     ??_Usart_PrintString:	
   642                           
   643                           ; 1 bytes @ 0x3
   644  0073                     	ds	1
   645  0074                     ??_OneWire_Byte_Write:	
   646  0074                     ??___wmul:	
   647                           ; 1 bytes @ 0x4
   648                           
   649  0074                     ??___lwdiv:	
   650                           ; 1 bytes @ 0x4
   651                           
   652  0074                     Usart_PrintString@i:	
   653                           ; 1 bytes @ 0x4
   654                           
   655  0074                     ___wmul@product:	
   656                           ; 1 bytes @ 0x4
   657                           
   658  0074                     ___aldiv@dividend:	
   659                           ; 2 bytes @ 0x4
   660                           
   661                           
   662                           ; 4 bytes @ 0x4
   663  0074                     	ds	1
   664  0075                     ___lwdiv@quotient:	
   665                           
   666                           ; 2 bytes @ 0x5
   667  0075                     	ds	1
   668  0076                     OneWire_Byte_Write@i:	
   669                           
   670                           ; 1 bytes @ 0x6
   671  0076                     	ds	1
   672  0077                     OneWire_Byte_Write@j:	
   673  0077                     ___lwdiv@counter:	
   674                           ; 1 bytes @ 0x7
   675                           
   676                           
   677                           ; 1 bytes @ 0x7
   678  0077                     	ds	1
   679  0078                     ??___aldiv:	
   680  0078                     ?___lwmod:	
   681                           ; 1 bytes @ 0x8
   682                           
   683  0078                     OneWire_Byte_Write@b:	
   684                           ; 2 bytes @ 0x8
   685                           
   686  0078                     ___lwmod@divisor:	
   687                           ; 1 bytes @ 0x8
   688                           
   689                           
   690                           ; 2 bytes @ 0x8
   691  0078                     	ds	1
   692  0079                     ?_w1_rom_search:	
   693  0079                     ?_OneWire_command:	
   694                           ; 1 bytes @ 0x9
   695                           
   696  0079                     ?_OneWire_Byte_Read:	
   697                           ; 1 bytes @ 0x9
   698                           
   699  0079                     w1_rom_search@id:	
   700                           ; 2 bytes @ 0x9
   701                           
   702  0079                     OneWire_command@id:	
   703                           ; 1 bytes @ 0x9
   704                           
   705  0079                     USART_Init@x:	
   706                           ; 1 bytes @ 0x9
   707                           
   708                           
   709                           ; 2 bytes @ 0x9
   710  0079                     	ds	1
   711  007A                     ??_w1_rom_search:	
   712  007A                     ??_OneWire_command:	
   713                           ; 1 bytes @ 0xA
   714                           
   715  007A                     ___lwmod@dividend:	
   716                           ; 1 bytes @ 0xA
   717                           
   718                           
   719                           ; 2 bytes @ 0xA
   720  007A                     	ds	1
   721  007B                     ??_OneWire_Byte_Read:	
   722  007B                     OneWire_command@command:	
   723                           ; 1 bytes @ 0xB
   724                           
   725                           
   726                           ; 1 bytes @ 0xB
   727  007B                     	ds	1
   728  007C                     ??___lwmod:	
   729  007C                     OneWire_command@i:	
   730                           ; 1 bytes @ 0xC
   731                           
   732                           
   733                           ; 1 bytes @ 0xC
   734  007C                     	ds	1
   735  007D                     ??_start_meas:	
   736  007D                     ___lwmod@counter:	
   737                           ; 1 bytes @ 0xD
   738                           
   739                           
   740                           ; 1 bytes @ 0xD
   741  007D                     	ds	1
   742                           
   743                           	psect	cstackBANK0
   744  0020                     __pcstackBANK0:	
   745  0020                     ?_sprintf:	
   746  0020                     w1_rom_search@j:	
   747                           ; 2 bytes @ 0x0
   748                           
   749  0020                     sprintf@f:	
   750                           ; 1 bytes @ 0x0
   751                           
   752  0020                     ___aldiv@counter:	
   753                           ; 1 bytes @ 0x0
   754                           
   755                           
   756                           ; 1 bytes @ 0x0
   757  0020                     	ds	1
   758  0021                     w1_rom_search@next_diff:	
   759  0021                     ___aldiv@sign:	
   760                           ; 1 bytes @ 0x1
   761                           
   762                           
   763                           ; 1 bytes @ 0x1
   764  0021                     	ds	1
   765  0022                     w1_rom_search@diff:	
   766  0022                     ___aldiv@quotient:	
   767                           ; 1 bytes @ 0x2
   768                           
   769                           
   770                           ; 4 bytes @ 0x2
   771  0022                     	ds	1
   772  0023                     w1_rom_search@i:	
   773                           
   774                           ; 1 bytes @ 0x3
   775  0023                     	ds	1
   776  0024                     w1_rom_search@b:	
   777                           
   778                           ; 1 bytes @ 0x4
   779  0024                     	ds	1
   780  0025                     ??_sprintf:	
   781                           
   782                           ; 1 bytes @ 0x5
   783  0025                     	ds	1
   784  0026                     ?_USART_Init:	
   785  0026                     USART_Init@baud:	
   786                           ; 1 bytes @ 0x6
   787                           
   788                           
   789                           ; 4 bytes @ 0x6
   790  0026                     	ds	2
   791  0028                     sprintf@idx:	
   792                           
   793                           ; 1 bytes @ 0x8
   794  0028                     	ds	1
   795  0029                     sprintf@ap:	
   796                           
   797                           ; 1 bytes @ 0x9
   798  0029                     	ds	1
   799  002A                     ??_USART_Init:	
   800  002A                     sprintf@prec:	
   801                           ; 1 bytes @ 0xA
   802                           
   803                           
   804                           ; 1 bytes @ 0xA
   805  002A                     	ds	1
   806  002B                     sprintf@val:	
   807                           
   808                           ; 2 bytes @ 0xB
   809  002B                     	ds	2
   810  002D                     sprintf@flag:	
   811                           
   812                           ; 1 bytes @ 0xD
   813  002D                     	ds	1
   814  002E                     sprintf@width:	
   815                           
   816                           ; 2 bytes @ 0xE
   817  002E                     	ds	2
   818  0030                     sprintf@sp:	
   819                           
   820                           ; 1 bytes @ 0x10
   821  0030                     	ds	1
   822  0031                     sprintf@c:	
   823                           
   824                           ; 1 bytes @ 0x11
   825  0031                     	ds	1
   826  0032                     ??_read_meas:	
   827                           
   828                           ; 1 bytes @ 0x12
   829  0032                     	ds	3
   830  0035                     read_meas@s:	
   831                           
   832                           ; 30 bytes @ 0x15
   833  0035                     	ds	30
   834  0053                     read_meas@byte:	
   835                           
   836                           ; 2 bytes @ 0x33
   837  0053                     	ds	2
   838  0055                     read_meas@id:	
   839                           
   840                           ; 8 bytes @ 0x35
   841  0055                     	ds	8
   842  005D                     _read_meas$628:	
   843                           
   844                           ; 2 bytes @ 0x3D
   845  005D                     	ds	2
   846  005F                     read_meas@i:	
   847                           
   848                           ; 1 bytes @ 0x3F
   849  005F                     	ds	1
   850  0060                     read_meas@diff:	
   851                           
   852                           ; 1 bytes @ 0x40
   853  0060                     	ds	1
   854  0061                     ??_main:	
   855                           
   856                           ; 1 bytes @ 0x41
   857  0061                     	ds	3
   858  0064                     main@s:	
   859                           
   860                           ; 1 bytes @ 0x44
   861  0064                     	ds	1
   862                           
   863                           	psect	maintext
   864  021E                     __pmaintext:	
   865 ;;
   866 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   867 ;;
   868 ;; *************** function _main *****************
   869 ;; Defined at:
   870 ;;		line 7 in file "main.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;		None
   873 ;; Auto vars:     Size  Location     Type
   874 ;;  s               1   68[BANK0 ] unsigned char 
   875 ;; Return value:  Size  Location     Type
   876 ;;                  1    wreg      void 
   877 ;; Registers used:
   878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   879 ;; Tracked objects:
   880 ;;		On entry : B00/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   884 ;;      Params:         0       0       0       0       0
   885 ;;      Locals:         0       1       0       0       0
   886 ;;      Temps:          0       3       0       0       0
   887 ;;      Totals:         0       4       0       0       0
   888 ;;Total ram usage:        4 bytes
   889 ;; Hardware stack levels required when called:    4
   890 ;; This function calls:
   891 ;;		_USART_Init
   892 ;;		_Usart_PrintString
   893 ;;		_read_meas
   894 ;;		_start_meas
   895 ;; This function is called by:
   896 ;;		Startup code after reset
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           
   901                           ;psect for function _main
   902  021E                     _main:	
   903                           
   904                           ;main.c: 9: char s=USART_Init(9600);
   905                           
   906                           ;incstack = 0
   907                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   908  021E  3000               	movlw	0
   909  021F  1283               	bcf	3,5	;RP0=0, select bank0
   910  0220  1303               	bcf	3,6	;RP1=0, select bank0
   911  0221  00A9               	movwf	USART_Init@baud+3
   912  0222  3000               	movlw	0
   913  0223  00A8               	movwf	USART_Init@baud+2
   914  0224  3025               	movlw	37
   915  0225  00A7               	movwf	USART_Init@baud+1
   916  0226  3080               	movlw	128
   917  0227  00A6               	movwf	USART_Init@baud
   918  0228  120A  118A  2364  120A  118A  	fcall	_USART_Init
   919  022D  1283               	bcf	3,5	;RP0=0, select bank0
   920  022E  1303               	bcf	3,6	;RP1=0, select bank0
   921  022F  00E1               	movwf	??_main
   922  0230  0861               	movf	??_main,w
   923  0231  00E4               	movwf	main@s
   924                           
   925                           ;main.c: 10: Usart_PrintString("Hello User!!!\r\n");
   926  0232  3071               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   927  0233  00F1               	movwf	Usart_PrintString@Text
   928  0234  3080               	movlw	128
   929  0235  00F2               	movwf	Usart_PrintString@Text+1
   930  0236  120A  118A  2120  120A  118A  	fcall	_Usart_PrintString
   931  023B                     l1758:	
   932                           ;main.c: 12: while(1)
   933                           
   934                           
   935                           ;main.c: 13: {
   936                           ;main.c: 14: start_meas();
   937  023B  120A  158A  27E8  120A  118A  	fcall	_start_meas
   938                           
   939                           ;main.c: 15: _delay((unsigned long)((1000)*(8000000/4000.0)));
   940  0240  300B               	movlw	11
   941  0241  1283               	bcf	3,5	;RP0=0, select bank0
   942  0242  1303               	bcf	3,6	;RP1=0, select bank0
   943  0243  00E3               	movwf	??_main+2
   944  0244  3026               	movlw	38
   945  0245  00E2               	movwf	??_main+1
   946  0246  305D               	movlw	93
   947  0247  00E1               	movwf	??_main
   948  0248                     u1917:	
   949  0248  0BE1               	decfsz	??_main,f
   950  0249  2A48               	goto	u1917
   951  024A  0BE2               	decfsz	??_main+1,f
   952  024B  2A48               	goto	u1917
   953  024C  0BE3               	decfsz	??_main+2,f
   954  024D  2A48               	goto	u1917
   955                           
   956                           ;main.c: 16: read_meas();
   957  024E  120A  118A  244F  120A  118A  	fcall	_read_meas
   958                           
   959                           ;main.c: 17: _delay((unsigned long)((1000)*(8000000/4000.0)));
   960  0253  300B               	movlw	11
   961  0254  1283               	bcf	3,5	;RP0=0, select bank0
   962  0255  1303               	bcf	3,6	;RP1=0, select bank0
   963  0256  00E3               	movwf	??_main+2
   964  0257  3026               	movlw	38
   965  0258  00E2               	movwf	??_main+1
   966  0259  305D               	movlw	93
   967  025A  00E1               	movwf	??_main
   968  025B                     u1927:	
   969  025B  0BE1               	decfsz	??_main,f
   970  025C  2A5B               	goto	u1927
   971  025D  0BE2               	decfsz	??_main+1,f
   972  025E  2A5B               	goto	u1927
   973  025F  0BE3               	decfsz	??_main+2,f
   974  0260  2A5B               	goto	u1927
   975  0261  2A3B               	goto	l1758
   976  0262                     __end_of_main:	
   977                           
   978                           	psect	text1
   979  0FE8                     __ptext1:	
   980 ;; *************** function _start_meas *****************
   981 ;; Defined at:
   982 ;;		line 13 in file "DS18B20.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;		None
   985 ;; Auto vars:     Size  Location     Type
   986 ;;		None
   987 ;; Return value:  Size  Location     Type
   988 ;;                  1    wreg      void 
   989 ;; Registers used:
   990 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   996 ;;      Params:         0       0       0       0       0
   997 ;;      Locals:         0       0       0       0       0
   998 ;;      Temps:          0       0       0       0       0
   999 ;;      Totals:         0       0       0       0       0
  1000 ;;Total ram usage:        0 bytes
  1001 ;; Hardware stack levels used:    1
  1002 ;; Hardware stack levels required when called:    3
  1003 ;; This function calls:
  1004 ;;		_OneWire_command
  1005 ;;		_Usart_PrintString
  1006 ;; This function is called by:
  1007 ;;		_main
  1008 ;; This function uses a non-reentrant model
  1009 ;;
  1010                           
  1011                           
  1012                           ;psect for function _start_meas
  1013  0FE8                     _start_meas:	
  1014                           
  1015                           ;DS18B20.c: 14: if( RB0==1){
  1016                           
  1017                           ;incstack = 0
  1018                           ; Regs used in _start_meas: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1019  0FE8  1283               	bcf	3,5	;RP0=0, select bank0
  1020  0FE9  1303               	bcf	3,6	;RP1=0, select bank0
  1021  0FEA  1C06               	btfss	6,0	;volatile
  1022  0FEB  2FF8               	goto	l1670
  1023                           
  1024                           ;DS18B20.c: 15: OneWire_command( 0x44, (0) );
  1025  0FEC  01F9               	clrf	OneWire_command@id
  1026  0FED  3044               	movlw	68
  1027  0FEE  120A  118A  214B   	fcall	_OneWire_command
  1028                           
  1029                           ;DS18B20.c: 16: PORTBbits.RB0=1;
  1030  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  1031  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  1032  0FF3  1406               	bsf	6,0	;volatile
  1033                           
  1034                           ;DS18B20.c: 17: TRISB0=0;
  1035  0FF4  1683               	bsf	3,5	;RP0=1, select bank1
  1036  0FF5  1303               	bcf	3,6	;RP1=0, select bank1
  1037  0FF6  1006               	bcf	6,0	;volatile
  1038                           
  1039                           ;DS18B20.c: 19: }else{
  1040  0FF7  0008               	return
  1041  0FF8                     l1670:	
  1042                           
  1043                           ;DS18B20.c: 20: Usart_PrintString( "Short Circuit !\r\n" );
  1044  0FF8  303C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1045  0FF9  00F1               	movwf	Usart_PrintString@Text
  1046  0FFA  3080               	movlw	128
  1047  0FFB  00F2               	movwf	Usart_PrintString@Text+1
  1048  0FFC  120A  118A  2120   	fcall	_Usart_PrintString
  1049  0FFF  0008               	return
  1050  1000                     __end_of_start_meas:	
  1051                           
  1052                           	psect	text2
  1053  014B                     __ptext2:	
  1054 ;; *************** function _OneWire_command *****************
  1055 ;; Defined at:
  1056 ;;		line 108 in file "OneWire.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;  command         1    wreg     unsigned char 
  1059 ;;  id              1    9[COMMON] PTR unsigned char 
  1060 ;;		 -> NULL(0), 
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;  command         1   11[COMMON] unsigned char 
  1063 ;;  i               1   12[COMMON] unsigned char 
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1073 ;;      Params:         1       0       0       0       0
  1074 ;;      Locals:         2       0       0       0       0
  1075 ;;      Temps:          1       0       0       0       0
  1076 ;;      Totals:         4       0       0       0       0
  1077 ;;Total ram usage:        4 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; Hardware stack levels required when called:    2
  1080 ;; This function calls:
  1081 ;;		_OneWire_Byte_Write
  1082 ;;		_OneWire_reset
  1083 ;; This function is called by:
  1084 ;;		_start_meas
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           
  1089                           ;psect for function _OneWire_command
  1090  014B                     _OneWire_command:	
  1091                           
  1092                           ;incstack = 0
  1093                           ; Regs used in _OneWire_command: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1094                           ;OneWire_command@command stored from wreg
  1095  014B  00FB               	movwf	OneWire_command@command
  1096                           
  1097                           ;OneWire.c: 110: unsigned char i;
  1098                           ;OneWire.c: 111: OneWire_reset();
  1099  014C  120A  118A  21AD  120A  118A  	fcall	_OneWire_reset
  1100                           
  1101                           ;OneWire.c: 112: if( id ){
  1102  0151  0879               	movf	OneWire_command@id,w
  1103  0152  1903               	btfsc	3,2
  1104  0153  2970               	goto	l1456
  1105                           
  1106                           ;OneWire.c: 113: OneWire_Byte_Write( 0x55 );
  1107  0154  3055               	movlw	85
  1108  0155  120A  118A  20DF  120A  118A  	fcall	_OneWire_Byte_Write
  1109                           
  1110                           ;OneWire.c: 114: i = 8;
  1111  015A  3008               	movlw	8
  1112  015B  00FA               	movwf	??_OneWire_command
  1113  015C  087A               	movf	??_OneWire_command,w
  1114  015D  00FC               	movwf	OneWire_command@i
  1115  015E                     l1450:	
  1116                           ;OneWire.c: 115: do{
  1117                           
  1118                           
  1119                           ;OneWire.c: 116: OneWire_Byte_Write( *id );
  1120  015E  0879               	movf	OneWire_command@id,w
  1121  015F  0084               	movwf	4
  1122  0160  1383               	bcf	3,7	;select IRP bank0
  1123  0161  0800               	movf	0,w
  1124  0162  120A  118A  20DF  120A  118A  	fcall	_OneWire_Byte_Write
  1125                           
  1126                           ;OneWire.c: 117: id++;
  1127  0167  3001               	movlw	1
  1128  0168  00FA               	movwf	??_OneWire_command
  1129  0169  087A               	movf	??_OneWire_command,w
  1130  016A  07F9               	addwf	OneWire_command@id,f
  1131                           
  1132                           ;OneWire.c: 118: }while( --i );
  1133  016B  3001               	movlw	1
  1134  016C  02FC               	subwf	OneWire_command@i,f
  1135  016D  1903               	btfsc	3,2
  1136  016E  2976               	goto	l68
  1137  016F  295E               	goto	l1450
  1138  0170                     l1456:	
  1139                           ;OneWire.c: 119: }else{
  1140                           
  1141                           
  1142                           ;OneWire.c: 120: OneWire_Byte_Write( 0xCC );
  1143  0170  30CC               	movlw	204
  1144  0171  120A  118A  20DF  120A  118A  	fcall	_OneWire_Byte_Write
  1145  0176                     l68:	
  1146                           
  1147                           ;OneWire.c: 121: }
  1148                           ;OneWire.c: 122: OneWire_Byte_Write( command );
  1149  0176  087B               	movf	OneWire_command@command,w
  1150  0177  120A  118A  20DF   	fcall	_OneWire_Byte_Write
  1151  017A  0008               	return
  1152  017B                     __end_of_OneWire_command:	
  1153                           
  1154                           	psect	text3
  1155  044F                     __ptext3:	
  1156 ;; *************** function _read_meas *****************
  1157 ;; Defined at:
  1158 ;;		line 26 in file "DS18B20.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;		None
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;  s              30   21[BANK0 ] unsigned char [30]
  1163 ;;  id              8   53[BANK0 ] unsigned char [8]
  1164 ;;  byte            2   51[BANK0 ] unsigned char [2]
  1165 ;;  diff            1   64[BANK0 ] unsigned char 
  1166 ;;  i               1   63[BANK0 ] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  1    wreg      void 
  1169 ;; Registers used:
  1170 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1176 ;;      Params:         0       0       0       0       0
  1177 ;;      Locals:         0      44       0       0       0
  1178 ;;      Temps:          0       3       0       0       0
  1179 ;;      Totals:         0      47       0       0       0
  1180 ;;Total ram usage:       47 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; Hardware stack levels required when called:    3
  1183 ;; This function calls:
  1184 ;;		_OneWire_Byte_Read
  1185 ;;		_OneWire_Byte_Write
  1186 ;;		_Usart_PrintString
  1187 ;;		___lwdiv
  1188 ;;		_sprintf
  1189 ;;		_w1_rom_search
  1190 ;; This function is called by:
  1191 ;;		_main
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           
  1196                           ;psect for function _read_meas
  1197  044F                     _read_meas:	
  1198                           
  1199                           ;DS18B20.c: 28: unsigned char id[8], diff;
  1200                           ;DS18B20.c: 29: char s[30];
  1201                           ;DS18B20.c: 30: unsigned char byte[2];
  1202                           ;DS18B20.c: 31: unsigned char i;
  1203                           ;DS18B20.c: 34: for( diff = 0xFF; diff != 0x00; ){
  1204                           
  1205                           ;incstack = 0
  1206                           ; Regs used in _read_meas: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1207  044F  30FF               	movlw	255
  1208  0450  1283               	bcf	3,5	;RP0=0, select bank0
  1209  0451  1303               	bcf	3,6	;RP1=0, select bank0
  1210  0452  00B2               	movwf	??_read_meas
  1211  0453  0832               	movf	??_read_meas,w
  1212  0454  00E0               	movwf	read_meas@diff
  1213  0455  0860               	movf	read_meas@diff,w
  1214  0456  1903               	btfsc	3,2
  1215  0457  2DC9               	goto	l1752
  1216  0458                     l1678:	
  1217                           
  1218                           ;DS18B20.c: 35: diff = w1_rom_search( diff, id );
  1219  0458  3055               	movlw	(low (read_meas@id| 0))& (0+255)
  1220  0459  00B2               	movwf	??_read_meas
  1221  045A  0832               	movf	??_read_meas,w
  1222  045B  00F9               	movwf	w1_rom_search@id
  1223  045C  0860               	movf	read_meas@diff,w
  1224  045D  120A  118A  2262  120A  118A  	fcall	_w1_rom_search
  1225  0462  1283               	bcf	3,5	;RP0=0, select bank0
  1226  0463  1303               	bcf	3,6	;RP1=0, select bank0
  1227  0464  00B3               	movwf	??_read_meas+1
  1228  0465  0833               	movf	??_read_meas+1,w
  1229  0466  00E0               	movwf	read_meas@diff
  1230                           
  1231                           ;DS18B20.c: 37: if( diff == 0xFF ){
  1232  0467  0A60               	incf	read_meas@diff,w
  1233  0468  1D03               	btfss	3,2
  1234  0469  2C74               	goto	l1684
  1235                           
  1236                           ;DS18B20.c: 38: Usart_PrintString( "No Sensor found\r\n" );
  1237  046A  304E               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1238  046B  00F1               	movwf	Usart_PrintString@Text
  1239  046C  3080               	movlw	128
  1240  046D  00F2               	movwf	Usart_PrintString@Text+1
  1241  046E  120A  118A  2120  120A  118A  	fcall	_Usart_PrintString
  1242                           
  1243                           ;DS18B20.c: 39: break;
  1244  0473  2DC9               	goto	l1752
  1245  0474                     l1684:	
  1246                           
  1247                           ;DS18B20.c: 40: }
  1248                           ;DS18B20.c: 41: if( diff == 0xFE ){
  1249  0474  30FE               	movlw	254
  1250  0475  1283               	bcf	3,5	;RP0=0, select bank0
  1251  0476  1303               	bcf	3,6	;RP1=0, select bank0
  1252  0477  0660               	xorwf	read_meas@diff,w
  1253  0478  1D03               	btfss	3,2
  1254  0479  2C84               	goto	l1688
  1255                           
  1256                           ;DS18B20.c: 42: Usart_PrintString( "Bus Error\r\n" );
  1257  047A  308E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1258  047B  00F1               	movwf	Usart_PrintString@Text
  1259  047C  3080               	movlw	128
  1260  047D  00F2               	movwf	Usart_PrintString@Text+1
  1261  047E  120A  118A  2120  120A  118A  	fcall	_Usart_PrintString
  1262                           
  1263                           ;DS18B20.c: 43: break;
  1264  0483  2DC9               	goto	l1752
  1265  0484                     l1688:	
  1266                           
  1267                           ;DS18B20.c: 44: }
  1268                           ;DS18B20.c: 45: if( id[0] == 0x28 || id[0] == 0x10 ){
  1269  0484  3028               	movlw	40
  1270  0485  1283               	bcf	3,5	;RP0=0, select bank0
  1271  0486  1303               	bcf	3,6	;RP1=0, select bank0
  1272  0487  0655               	xorwf	read_meas@id,w
  1273  0488  1903               	btfsc	3,2
  1274  0489  2C8E               	goto	l1692
  1275  048A  3010               	movlw	16
  1276  048B  0655               	xorwf	read_meas@id,w
  1277  048C  1D03               	btfss	3,2
  1278  048D  2DC4               	goto	l1750
  1279  048E                     l1692:	
  1280                           
  1281                           ;DS18B20.c: 46: Usart_PrintString( "ID: " );
  1282  048E  30A0               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1283  048F  00F1               	movwf	Usart_PrintString@Text
  1284  0490  3080               	movlw	128
  1285  0491  00F2               	movwf	Usart_PrintString@Text+1
  1286  0492  120A  118A  2120  120A  118A  	fcall	_Usart_PrintString
  1287                           
  1288                           ;DS18B20.c: 47: for( i = 0; i < 8; i++ ){
  1289  0497  1283               	bcf	3,5	;RP0=0, select bank0
  1290  0498  1303               	bcf	3,6	;RP1=0, select bank0
  1291  0499  01DF               	clrf	read_meas@i
  1292  049A  3008               	movlw	8
  1293  049B  025F               	subwf	read_meas@i,w
  1294  049C  1803               	btfsc	3,0
  1295  049D  2CC6               	goto	l1706
  1296  049E                     l1700:	
  1297                           
  1298                           ;DS18B20.c: 48: sprintf(s, "%02X ", id[i] );
  1299  049E  309A               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1300  049F  00B2               	movwf	??_read_meas
  1301  04A0  0832               	movf	??_read_meas,w
  1302  04A1  00A0               	movwf	sprintf@f
  1303  04A2  085F               	movf	read_meas@i,w
  1304  04A3  3E55               	addlw	(low (read_meas@id| 0))& (0+255)
  1305  04A4  0084               	movwf	4
  1306  04A5  1383               	bcf	3,7	;select IRP bank0
  1307  04A6  0800               	movf	0,w
  1308  04A7  00B3               	movwf	??_read_meas+1
  1309  04A8  01B4               	clrf	??_read_meas+2
  1310  04A9  0833               	movf	??_read_meas+1,w
  1311  04AA  00A1               	movwf	?_sprintf+1
  1312  04AB  0834               	movf	??_read_meas+2,w
  1313  04AC  00A2               	movwf	?_sprintf+2
  1314  04AD  3035               	movlw	(low (read_meas@s| 0))& (0+255)
  1315  04AE  120A  118A  25D1  120A  118A  	fcall	_sprintf
  1316                           
  1317                           ;DS18B20.c: 49: Usart_PrintString(s);
  1318  04B3  3035               	movlw	(low (read_meas@s| 0))& (0+255)
  1319  04B4  00F1               	movwf	Usart_PrintString@Text
  1320  04B5  3000               	movlw	0
  1321  04B6  00F2               	movwf	Usart_PrintString@Text+1
  1322  04B7  120A  118A  2120  120A  118A  	fcall	_Usart_PrintString
  1323  04BC  3001               	movlw	1
  1324  04BD  1283               	bcf	3,5	;RP0=0, select bank0
  1325  04BE  1303               	bcf	3,6	;RP1=0, select bank0
  1326  04BF  00B2               	movwf	??_read_meas
  1327  04C0  0832               	movf	??_read_meas,w
  1328  04C1  07DF               	addwf	read_meas@i,f
  1329  04C2  3008               	movlw	8
  1330  04C3  025F               	subwf	read_meas@i,w
  1331  04C4  1C03               	skipc
  1332  04C5  2C9E               	goto	l1700
  1333  04C6                     l1706:	
  1334                           
  1335                           ;DS18B20.c: 50: }
  1336                           ;DS18B20.c: 51: OneWire_Byte_Write( 0xBE );
  1337  04C6  30BE               	movlw	190
  1338  04C7  120A  118A  20DF  120A  118A  	fcall	_OneWire_Byte_Write
  1339                           
  1340                           ;DS18B20.c: 54: temp = OneWire_Byte_Read();
  1341  04CC  120A  158A  27D1  120A  118A  	fcall	_OneWire_Byte_Read
  1342  04D1  087A               	movf	?_OneWire_Byte_Read+1,w
  1343  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  1344  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  1345  04D4  00E6               	movwf	_temp+1
  1346  04D5  0879               	movf	?_OneWire_Byte_Read,w
  1347  04D6  00E5               	movwf	_temp
  1348                           
  1349                           ;DS18B20.c: 55: temp |= (unsigned int)OneWire_Byte_Read() << 8;
  1350  04D7  120A  158A  27D1  120A  118A  	fcall	_OneWire_Byte_Read
  1351  04DC  0879               	movf	?_OneWire_Byte_Read,w
  1352  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  1353  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  1354  04DF  00B3               	movwf	??_read_meas+1
  1355  04E0  01B2               	clrf	??_read_meas
  1356  04E1  0832               	movf	??_read_meas,w
  1357  04E2  04E5               	iorwf	_temp,f
  1358  04E3  0833               	movf	??_read_meas+1,w
  1359  04E4  04E6               	iorwf	_temp+1,f
  1360                           
  1361                           ;DS18B20.c: 56: byte[0]=temp>>8;
  1362  04E5  0866               	movf	_temp+1,w
  1363  04E6  00B2               	movwf	??_read_meas
  1364  04E7  0832               	movf	??_read_meas,w
  1365  04E8  00D3               	movwf	read_meas@byte
  1366                           
  1367                           ;DS18B20.c: 57: if (byte[0]&0x80)
  1368  04E9  1FD3               	btfss	read_meas@byte,7
  1369  04EA  2CF5               	goto	l108
  1370                           
  1371                           ;DS18B20.c: 58: {
  1372                           ;DS18B20.c: 59: temp=~temp;
  1373  04EB  09E5               	comf	_temp,f
  1374  04EC  09E6               	comf	_temp+1,f
  1375                           
  1376                           ;DS18B20.c: 60: temp+=1;
  1377  04ED  3001               	movlw	1
  1378  04EE  07E5               	addwf	_temp,f
  1379  04EF  1803               	skipnc
  1380  04F0  0AE6               	incf	_temp+1,f
  1381  04F1  3000               	movlw	0
  1382  04F2  07E6               	addwf	_temp+1,f
  1383                           
  1384                           ;DS18B20.c: 61: ZNAK=0;
  1385  04F3  01E7               	clrf	_ZNAK
  1386                           
  1387                           ;DS18B20.c: 62: }
  1388  04F4  2DBA               	goto	l1748
  1389  04F5                     l108:	
  1390                           
  1391                           ;DS18B20.c: 63: else
  1392                           ;DS18B20.c: 64: {
  1393                           ;DS18B20.c: 65: ZNAK=1;
  1394  04F5  01E7               	clrf	_ZNAK
  1395  04F6  0AE7               	incf	_ZNAK,f
  1396                           
  1397                           ;DS18B20.c: 66: }
  1398                           ;DS18B20.c: 67: switch(ZNAK)
  1399  04F7  2DBA               	goto	l1748
  1400  04F8                     l1718:	
  1401                           ;DS18B20.c: 68: {
  1402                           ;DS18B20.c: 69: case 1:
  1403                           
  1404                           
  1405                           ;DS18B20.c: 70: {
  1406                           ;DS18B20.c: 71: if( id[0] == 0x10 )
  1407  04F8  3010               	movlw	16
  1408  04F9  0655               	xorwf	read_meas@id,w
  1409  04FA  1D03               	btfss	3,2
  1410  04FB  2D03               	goto	l1722
  1411                           
  1412                           ;DS18B20.c: 72: temp <<= 3;
  1413  04FC  3003               	movlw	3
  1414  04FD                     u1875:	
  1415  04FD  1003               	clrc
  1416  04FE  0DE5               	rlf	_temp,f
  1417  04FF  0DE6               	rlf	_temp+1,f
  1418  0500  3EFF               	addlw	-1
  1419  0501  1D03               	skipz
  1420  0502  2CFD               	goto	u1875
  1421  0503                     l1722:	
  1422                           
  1423                           ;DS18B20.c: 73: sprintf( s, "  T: %04X = ", temp );
  1424  0503  3081               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1425  0504  00B2               	movwf	??_read_meas
  1426  0505  0832               	movf	??_read_meas,w
  1427  0506  00A0               	movwf	sprintf@f
  1428  0507  0866               	movf	_temp+1,w
  1429  0508  00A2               	movwf	?_sprintf+2
  1430  0509  0865               	movf	_temp,w
  1431  050A  00A1               	movwf	?_sprintf+1
  1432  050B  3035               	movlw	(low (read_meas@s| 0))& (0+255)
  1433  050C  120A  118A  25D1  120A  118A  	fcall	_sprintf
  1434                           
  1435                           ;DS18B20.c: 74: Usart_PrintString(s);
  1436  0511  3035               	movlw	(low (read_meas@s| 0))& (0+255)
  1437  0512  00F1               	movwf	Usart_PrintString@Text
  1438  0513  3000               	movlw	0
  1439  0514  00F2               	movwf	Usart_PrintString@Text+1
  1440  0515  120A  118A  2120  120A  118A  	fcall	_Usart_PrintString
  1441                           
  1442                           ;DS18B20.c: 75: sprintf( s, "Tcels=%4d.%01dÃ¸C\r\n", temp >> 4, (temp << 12) / 6553 );
  1443  051A  3099               	movlw	153
  1444  051B  00F0               	movwf	___lwdiv@divisor
  1445  051C  3019               	movlw	25
  1446  051D  00F1               	movwf	___lwdiv@divisor+1
  1447  051E  1283               	bcf	3,5	;RP0=0, select bank0
  1448  051F  1303               	bcf	3,6	;RP1=0, select bank0
  1449  0520  0866               	movf	_temp+1,w
  1450  0521  00B3               	movwf	??_read_meas+1
  1451  0522  0865               	movf	_temp,w
  1452  0523  00B2               	movwf	??_read_meas
  1453  0524  0E32               	swapf	??_read_meas,w
  1454  0525  39F0               	andlw	240
  1455  0526  00B3               	movwf	??_read_meas+1
  1456  0527  01B2               	clrf	??_read_meas
  1457  0528  0832               	movf	??_read_meas,w
  1458  0529  00F2               	movwf	___lwdiv@dividend
  1459  052A  0833               	movf	??_read_meas+1,w
  1460  052B  00F3               	movwf	___lwdiv@dividend+1
  1461  052C  120A  118A  21E2  120A  118A  	fcall	___lwdiv
  1462  0531  0871               	movf	?___lwdiv+1,w
  1463  0532  1283               	bcf	3,5	;RP0=0, select bank0
  1464  0533  1303               	bcf	3,6	;RP1=0, select bank0
  1465  0534  00DE               	movwf	_read_meas$628+1
  1466  0535  0870               	movf	?___lwdiv,w
  1467  0536  00DD               	movwf	_read_meas$628
  1468                           
  1469                           ;DS18B20.c: 75: sprintf( s, "Tcels=%4d.%01dÃ¸C\r\n", temp >> 4, (temp << 12) / 6553 );
  1470  0537  3028               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1471  0538  00B2               	movwf	??_read_meas
  1472  0539  0832               	movf	??_read_meas,w
  1473  053A  00A0               	movwf	sprintf@f
  1474  053B  0E65               	swapf	_temp,w
  1475  053C  390F               	andlw	15
  1476  053D  00A1               	movwf	?_sprintf+1
  1477  053E  0E66               	swapf	_temp+1,w
  1478  053F  39F0               	andlw	240
  1479  0540  04A1               	iorwf	?_sprintf+1,f
  1480  0541  0E66               	swapf	_temp+1,w
  1481  0542  390F               	andlw	15
  1482  0543  00A2               	movwf	?_sprintf+2
  1483  0544  085E               	movf	_read_meas$628+1,w
  1484  0545  00A4               	movwf	?_sprintf+4
  1485  0546  085D               	movf	_read_meas$628,w
  1486  0547  00A3               	movwf	?_sprintf+3
  1487  0548  3035               	movlw	(low (read_meas@s| 0))& (0+255)
  1488  0549  120A  118A  25D1  120A  118A  	fcall	_sprintf
  1489                           
  1490                           ;DS18B20.c: 76: Usart_PrintString(s );
  1491  054E  3035               	movlw	(low (read_meas@s| 0))& (0+255)
  1492  054F  00F1               	movwf	Usart_PrintString@Text
  1493  0550  3000               	movlw	0
  1494  0551  00F2               	movwf	Usart_PrintString@Text+1
  1495  0552  120A  118A  2120  120A  118A  	fcall	_Usart_PrintString
  1496                           
  1497                           ;DS18B20.c: 77: break;
  1498  0557  2DC4               	goto	l1750
  1499  0558                     l1732:	
  1500                           ;DS18B20.c: 78: }
  1501                           ;DS18B20.c: 79: case 0:
  1502                           
  1503                           
  1504                           ;DS18B20.c: 80: {
  1505                           ;DS18B20.c: 81: if( id[0] == 0x10 )
  1506  0558  3010               	movlw	16
  1507  0559  1283               	bcf	3,5	;RP0=0, select bank0
  1508  055A  1303               	bcf	3,6	;RP1=0, select bank0
  1509  055B  0655               	xorwf	read_meas@id,w
  1510  055C  1D03               	btfss	3,2
  1511  055D  2D65               	goto	l1736
  1512                           
  1513                           ;DS18B20.c: 82: temp <<= 3;
  1514  055E  3003               	movlw	3
  1515  055F                     u1895:	
  1516  055F  1003               	clrc
  1517  0560  0DE5               	rlf	_temp,f
  1518  0561  0DE6               	rlf	_temp+1,f
  1519  0562  3EFF               	addlw	-1
  1520  0563  1D03               	skipz
  1521  0564  2D5F               	goto	u1895
  1522  0565                     l1736:	
  1523                           
  1524                           ;DS18B20.c: 83: sprintf( s, "  T: %04X = ", temp );
  1525  0565  3081               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1526  0566  00B2               	movwf	??_read_meas
  1527  0567  0832               	movf	??_read_meas,w
  1528  0568  00A0               	movwf	sprintf@f
  1529  0569  0866               	movf	_temp+1,w
  1530  056A  00A2               	movwf	?_sprintf+2
  1531  056B  0865               	movf	_temp,w
  1532  056C  00A1               	movwf	?_sprintf+1
  1533  056D  3035               	movlw	(low (read_meas@s| 0))& (0+255)
  1534  056E  120A  118A  25D1  120A  118A  	fcall	_sprintf
  1535                           
  1536                           ;DS18B20.c: 84: Usart_PrintString(s);
  1537  0573  3035               	movlw	(low (read_meas@s| 0))& (0+255)
  1538  0574  00F1               	movwf	Usart_PrintString@Text
  1539  0575  3000               	movlw	0
  1540  0576  00F2               	movwf	Usart_PrintString@Text+1
  1541  0577  120A  118A  2120  120A  118A  	fcall	_Usart_PrintString
  1542                           
  1543                           ;DS18B20.c: 85: sprintf( s, "Tcels=-%4d.%01dÃ¸C\r\n", temp >> 4, (temp << 12) / 6553 );
  1544  057C  3099               	movlw	153
  1545  057D  00F0               	movwf	___lwdiv@divisor
  1546  057E  3019               	movlw	25
  1547  057F  00F1               	movwf	___lwdiv@divisor+1
  1548  0580  1283               	bcf	3,5	;RP0=0, select bank0
  1549  0581  1303               	bcf	3,6	;RP1=0, select bank0
  1550  0582  0866               	movf	_temp+1,w
  1551  0583  00B3               	movwf	??_read_meas+1
  1552  0584  0865               	movf	_temp,w
  1553  0585  00B2               	movwf	??_read_meas
  1554  0586  0E32               	swapf	??_read_meas,w
  1555  0587  39F0               	andlw	240
  1556  0588  00B3               	movwf	??_read_meas+1
  1557  0589  01B2               	clrf	??_read_meas
  1558  058A  0832               	movf	??_read_meas,w
  1559  058B  00F2               	movwf	___lwdiv@dividend
  1560  058C  0833               	movf	??_read_meas+1,w
  1561  058D  00F3               	movwf	___lwdiv@dividend+1
  1562  058E  120A  118A  21E2  120A  118A  	fcall	___lwdiv
  1563  0593  0871               	movf	?___lwdiv+1,w
  1564  0594  1283               	bcf	3,5	;RP0=0, select bank0
  1565  0595  1303               	bcf	3,6	;RP1=0, select bank0
  1566  0596  00DE               	movwf	_read_meas$628+1
  1567  0597  0870               	movf	?___lwdiv,w
  1568  0598  00DD               	movwf	_read_meas$628
  1569                           
  1570                           ;DS18B20.c: 85: sprintf( s, "Tcels=-%4d.%01dÃ¸C\r\n", temp >> 4, (temp << 12) / 6553 );
  1571  0599  3013               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1572  059A  00B2               	movwf	??_read_meas
  1573  059B  0832               	movf	??_read_meas,w
  1574  059C  00A0               	movwf	sprintf@f
  1575  059D  0E65               	swapf	_temp,w
  1576  059E  390F               	andlw	15
  1577  059F  00A1               	movwf	?_sprintf+1
  1578  05A0  0E66               	swapf	_temp+1,w
  1579  05A1  39F0               	andlw	240
  1580  05A2  04A1               	iorwf	?_sprintf+1,f
  1581  05A3  0E66               	swapf	_temp+1,w
  1582  05A4  390F               	andlw	15
  1583  05A5  00A2               	movwf	?_sprintf+2
  1584  05A6  085E               	movf	_read_meas$628+1,w
  1585  05A7  00A4               	movwf	?_sprintf+4
  1586  05A8  085D               	movf	_read_meas$628,w
  1587  05A9  00A3               	movwf	?_sprintf+3
  1588  05AA  3035               	movlw	(low (read_meas@s| 0))& (0+255)
  1589  05AB  120A  118A  25D1  120A  118A  	fcall	_sprintf
  1590                           
  1591                           ;DS18B20.c: 86: Usart_PrintString(s );
  1592  05B0  3035               	movlw	(low (read_meas@s| 0))& (0+255)
  1593  05B1  00F1               	movwf	Usart_PrintString@Text
  1594  05B2  3000               	movlw	0
  1595  05B3  00F2               	movwf	Usart_PrintString@Text+1
  1596  05B4  120A  118A  2120  120A  118A  	fcall	_Usart_PrintString
  1597                           
  1598                           ;DS18B20.c: 88: }
  1599                           ;DS18B20.c: 89: }
  1600                           
  1601                           ;DS18B20.c: 87: break;
  1602  05B9  2DC4               	goto	l1750
  1603  05BA                     l1748:	
  1604  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  1605  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  1606  05BC  0867               	movf	_ZNAK,w
  1607                           
  1608                           ; Switch size 1, requested type "space"
  1609                           ; Number of cases is 2, Range of values is 0 to 1
  1610                           ; switch strategies available:
  1611                           ; Name         Instructions Cycles
  1612                           ; simple_byte            7     4 (average)
  1613                           ; direct_byte           14     8 (fixed)
  1614                           ; jumptable            260     6 (fixed)
  1615                           ;	Chosen strategy is simple_byte
  1616  05BD  3A00               	xorlw	0	; case 0
  1617  05BE  1903               	skipnz
  1618  05BF  2D58               	goto	l1732
  1619  05C0  3A01               	xorlw	1	; case 1
  1620  05C1  1903               	skipnz
  1621  05C2  2CF8               	goto	l1718
  1622  05C3  2DC4               	goto	l1750
  1623  05C4                     l1750:	
  1624  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  1625  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  1626  05C6  0860               	movf	read_meas@diff,w
  1627  05C7  1D03               	btfss	3,2
  1628  05C8  2C58               	goto	l1678
  1629  05C9                     l1752:	
  1630                           
  1631                           ;DS18B20.c: 98: }
  1632                           ;DS18B20.c: 99: }
  1633                           ;DS18B20.c: 100: Usart_PrintString( "" );
  1634  05C9  304D               	movlw	(low (((STR_2+17)-__stringbase)| (0+32768)))& (0+255)
  1635  05CA  00F1               	movwf	Usart_PrintString@Text
  1636  05CB  3080               	movlw	128
  1637  05CC  00F2               	movwf	Usart_PrintString@Text+1
  1638  05CD  120A  118A  2120   	fcall	_Usart_PrintString
  1639  05D0  0008               	return
  1640  05D1                     __end_of_read_meas:	
  1641                           
  1642                           	psect	text4
  1643  0262                     __ptext4:	
  1644 ;; *************** function _w1_rom_search *****************
  1645 ;; Defined at:
  1646 ;;		line 67 in file "OneWire.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  diff            1    wreg     unsigned char 
  1649 ;;  id              1    9[COMMON] PTR unsigned char 
  1650 ;;		 -> read_meas@id(8), 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  diff            1    2[BANK0 ] unsigned char 
  1653 ;;  b               1    4[BANK0 ] unsigned char 
  1654 ;;  i               1    3[BANK0 ] unsigned char 
  1655 ;;  next_diff       1    1[BANK0 ] unsigned char 
  1656 ;;  j               1    0[BANK0 ] unsigned char 
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  1    wreg      unsigned char 
  1659 ;; Registers used:
  1660 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1666 ;;      Params:         1       0       0       0       0
  1667 ;;      Locals:         0       5       0       0       0
  1668 ;;      Temps:          1       0       0       0       0
  1669 ;;      Totals:         2       5       0       0       0
  1670 ;;Total ram usage:        7 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; Hardware stack levels required when called:    2
  1673 ;; This function calls:
  1674 ;;		_OneWire_Bit_IO
  1675 ;;		_OneWire_Byte_Write
  1676 ;;		_OneWire_reset
  1677 ;; This function is called by:
  1678 ;;		_read_meas
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           
  1683                           ;psect for function _w1_rom_search
  1684  0262                     _w1_rom_search:	
  1685                           
  1686                           ;incstack = 0
  1687                           ; Regs used in _w1_rom_search: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1688                           ;w1_rom_search@diff stored from wreg
  1689  0262  1283               	bcf	3,5	;RP0=0, select bank0
  1690  0263  1303               	bcf	3,6	;RP1=0, select bank0
  1691  0264  00A2               	movwf	w1_rom_search@diff
  1692                           
  1693                           ;OneWire.c: 69: uint8_t i, j, next_diff;
  1694                           ;OneWire.c: 70: uint8_t b;
  1695                           ;OneWire.c: 72: if( OneWire_reset() )
  1696  0265  120A  118A  21AD  120A  118A  	fcall	_OneWire_reset
  1697  026A  3A00               	xorlw	0
  1698  026B  1903               	skipnz
  1699  026C  2A6F               	goto	l1396
  1700                           
  1701                           ;OneWire.c: 73: return 0xFF;
  1702  026D  30FF               	movlw	255
  1703  026E  0008               	return
  1704  026F                     l1396:	
  1705                           
  1706                           ;OneWire.c: 74: OneWire_Byte_Write( 0xF0 );
  1707  026F  30F0               	movlw	240
  1708  0270  120A  118A  20DF  120A  118A  	fcall	_OneWire_Byte_Write
  1709                           
  1710                           ;OneWire.c: 75: next_diff = 0x00;
  1711  0275  1283               	bcf	3,5	;RP0=0, select bank0
  1712  0276  1303               	bcf	3,6	;RP1=0, select bank0
  1713  0277  01A1               	clrf	w1_rom_search@next_diff
  1714                           
  1715                           ;OneWire.c: 76: i = 8 * 8;
  1716  0278  3040               	movlw	64
  1717  0279  00FA               	movwf	??_w1_rom_search
  1718  027A  087A               	movf	??_w1_rom_search,w
  1719  027B  00A3               	movwf	w1_rom_search@i
  1720  027C                     l1402:	
  1721                           ;OneWire.c: 77: do{
  1722                           
  1723                           
  1724                           ;OneWire.c: 78: j = 8;
  1725  027C  3008               	movlw	8
  1726  027D  00FA               	movwf	??_w1_rom_search
  1727  027E  087A               	movf	??_w1_rom_search,w
  1728  027F  00A0               	movwf	w1_rom_search@j
  1729  0280                     l1404:	
  1730                           ;OneWire.c: 79: do{
  1731                           
  1732                           
  1733                           ;OneWire.c: 80: b = OneWire_Bit_IO( 1 );
  1734  0280  3001               	movlw	1
  1735  0281  120A  118A  20C2  120A  118A  	fcall	_OneWire_Bit_IO
  1736  0286  00FA               	movwf	??_w1_rom_search
  1737  0287  087A               	movf	??_w1_rom_search,w
  1738  0288  1283               	bcf	3,5	;RP0=0, select bank0
  1739  0289  1303               	bcf	3,6	;RP1=0, select bank0
  1740  028A  00A4               	movwf	w1_rom_search@b
  1741                           
  1742                           ;OneWire.c: 81: if( OneWire_Bit_IO( 1 ) ){
  1743  028B  3001               	movlw	1
  1744  028C  120A  118A  20C2  120A  118A  	fcall	_OneWire_Bit_IO
  1745  0291  3A00               	xorlw	0
  1746  0292  1903               	skipnz
  1747  0293  2A9B               	goto	l1414
  1748                           
  1749                           ;OneWire.c: 82: if( b )
  1750  0294  1283               	bcf	3,5	;RP0=0, select bank0
  1751  0295  1303               	bcf	3,6	;RP1=0, select bank0
  1752  0296  0824               	movf	w1_rom_search@b,w
  1753  0297  1903               	btfsc	3,2
  1754  0298  2AB3               	goto	l1424
  1755                           
  1756                           ;OneWire.c: 83: return 0xFE;
  1757  0299  30FE               	movlw	254
  1758  029A  0008               	return
  1759  029B                     l1414:	
  1760                           ;OneWire.c: 84: }else{
  1761                           
  1762                           
  1763                           ;OneWire.c: 85: if( !b ){
  1764  029B  1283               	bcf	3,5	;RP0=0, select bank0
  1765  029C  1303               	bcf	3,6	;RP1=0, select bank0
  1766  029D  0824               	movf	w1_rom_search@b,w
  1767  029E  1D03               	btfss	3,2
  1768  029F  2AB3               	goto	l1424
  1769                           
  1770                           ;OneWire.c: 86: if( diff > i ||
  1771                           ;OneWire.c: 87: ((*id & 1) && diff != i) ){
  1772  02A0  0822               	movf	w1_rom_search@diff,w
  1773  02A1  0223               	subwf	w1_rom_search@i,w
  1774  02A2  1C03               	skipc
  1775  02A3  2AAD               	goto	l59
  1776  02A4  0879               	movf	w1_rom_search@id,w
  1777  02A5  0084               	movwf	4
  1778  02A6  1383               	bcf	3,7	;select IRP bank0
  1779  02A7  1C00               	btfss	0,0
  1780  02A8  2AB3               	goto	l1424
  1781  02A9  0822               	movf	w1_rom_search@diff,w
  1782  02AA  0623               	xorwf	w1_rom_search@i,w
  1783  02AB  1903               	skipnz
  1784  02AC  2AB3               	goto	l1424
  1785  02AD                     l59:	
  1786                           
  1787                           ;OneWire.c: 88: b = 1;
  1788  02AD  01A4               	clrf	w1_rom_search@b
  1789  02AE  0AA4               	incf	w1_rom_search@b,f
  1790                           
  1791                           ;OneWire.c: 89: next_diff = i;
  1792  02AF  0823               	movf	w1_rom_search@i,w
  1793  02B0  00FA               	movwf	??_w1_rom_search
  1794  02B1  087A               	movf	??_w1_rom_search,w
  1795  02B2  00A1               	movwf	w1_rom_search@next_diff
  1796  02B3                     l1424:	
  1797                           
  1798                           ;OneWire.c: 90: }
  1799                           ;OneWire.c: 91: }
  1800                           ;OneWire.c: 92: }
  1801                           ;OneWire.c: 93: OneWire_Bit_IO( b );
  1802  02B3  0824               	movf	w1_rom_search@b,w
  1803  02B4  120A  118A  20C2  120A  118A  	fcall	_OneWire_Bit_IO
  1804                           
  1805                           ;OneWire.c: 94: *id >>= 1;
  1806  02B9  0879               	movf	w1_rom_search@id,w
  1807  02BA  0084               	movwf	4
  1808  02BB  1003               	clrc
  1809  02BC  1383               	bcf	3,7	;select IRP bank0
  1810  02BD  0C80               	rrf	0,f
  1811                           
  1812                           ;OneWire.c: 95: if( b )
  1813  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  1814  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  1815  02C0  0824               	movf	w1_rom_search@b,w
  1816  02C1  1903               	btfsc	3,2
  1817  02C2  2AC6               	goto	l1432
  1818                           
  1819                           ;OneWire.c: 96: *id |= 0x80;
  1820  02C3  0879               	movf	w1_rom_search@id,w
  1821  02C4  0084               	movwf	4
  1822  02C5  1780               	bsf	0,7
  1823  02C6                     l1432:	
  1824                           
  1825                           ;OneWire.c: 97: i--;
  1826  02C6  3001               	movlw	1
  1827  02C7  02A3               	subwf	w1_rom_search@i,f
  1828                           
  1829                           ;OneWire.c: 98: }while( --j );
  1830  02C8  3001               	movlw	1
  1831  02C9  02A0               	subwf	w1_rom_search@j,f
  1832  02CA  1D03               	btfss	3,2
  1833  02CB  2A80               	goto	l1404
  1834                           
  1835                           ;OneWire.c: 99: id++;
  1836  02CC  3001               	movlw	1
  1837  02CD  00FA               	movwf	??_w1_rom_search
  1838  02CE  087A               	movf	??_w1_rom_search,w
  1839  02CF  07F9               	addwf	w1_rom_search@id,f
  1840                           
  1841                           ;OneWire.c: 100: }while( i );
  1842  02D0  0823               	movf	w1_rom_search@i,w
  1843  02D1  1D03               	btfss	3,2
  1844  02D2  2A7C               	goto	l1402
  1845                           
  1846                           ;OneWire.c: 101: return next_diff;
  1847  02D3  0821               	movf	w1_rom_search@next_diff,w
  1848  02D4  0008               	return
  1849  02D5                     __end_of_w1_rom_search:	
  1850                           
  1851                           	psect	text5
  1852  01AD                     __ptext5:	
  1853 ;; *************** function _OneWire_reset *****************
  1854 ;; Defined at:
  1855 ;;		line 3 in file "OneWire.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;		None
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;  err             1    2[COMMON] unsigned char 
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      unsigned char 
  1862 ;; Registers used:
  1863 ;;		wreg, status,2, status,0
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1869 ;;      Params:         0       0       0       0       0
  1870 ;;      Locals:         1       0       0       0       0
  1871 ;;      Temps:          2       0       0       0       0
  1872 ;;      Totals:         3       0       0       0       0
  1873 ;;Total ram usage:        3 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_w1_rom_search
  1879 ;;		_OneWire_command
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           
  1884                           ;psect for function _OneWire_reset
  1885  01AD                     _OneWire_reset:	
  1886                           
  1887                           ;OneWire.c: 5: uint8_t err;
  1888                           ;OneWire.c: 6: PORTBbits.RB0=0;
  1889                           
  1890                           ;incstack = 0
  1891                           ; Regs used in _OneWire_reset: [wreg+status,2+status,0]
  1892  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1893  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1894  01AF  1006               	bcf	6,0	;volatile
  1895                           
  1896                           ;OneWire.c: 7: TRISB0=0;
  1897  01B0  1683               	bsf	3,5	;RP0=1, select bank1
  1898  01B1  1303               	bcf	3,6	;RP1=0, select bank1
  1899  01B2  1006               	bcf	6,0	;volatile
  1900                           
  1901                           ;OneWire.c: 8: _delay((unsigned long)((480)*(8000000/4000000.0)));
  1902  01B3  30BF               	movlw	191
  1903  01B4  00F0               	movwf	??_OneWire_reset
  1904  01B5                     u1937:	
  1905  01B5  29B6               	nop2
  1906  01B6  0BF0               	decfsz	??_OneWire_reset,f
  1907  01B7  29B5               	goto	u1937
  1908  01B8  29B9               	nop2
  1909  01B9  29BA               	nop2
  1910                           
  1911                           ;OneWire.c: 9: TRISB0=1;
  1912  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  1913  01BB  1303               	bcf	3,6	;RP1=0, select bank1
  1914  01BC  1406               	bsf	6,0	;volatile
  1915                           
  1916                           ;OneWire.c: 10: _delay((unsigned long)((66)*(8000000/4000000.0)));
  1917  01BD  302B               	movlw	43
  1918  01BE  00F0               	movwf	??_OneWire_reset
  1919  01BF                     u1947:	
  1920  01BF  0BF0               	decfsz	??_OneWire_reset,f
  1921  01C0  29BF               	goto	u1947
  1922  01C1  29C2               	nop2
  1923                           
  1924                           ;OneWire.c: 11: err=PORTB&(1<<PORTBbits.RB0);
  1925  01C2  3001               	movlw	1
  1926  01C3  00F0               	movwf	??_OneWire_reset
  1927  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  1928  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  1929  01C6  0806               	movf	6,w	;volatile
  1930  01C7  3901               	andlw	1
  1931  01C8  3E01               	addlw	1
  1932  01C9  29CC               	goto	u994
  1933  01CA                     u995:	
  1934  01CA  1003               	clrc
  1935  01CB  0DF0               	rlf	??_OneWire_reset,f
  1936  01CC                     u994:	
  1937  01CC  3EFF               	addlw	-1
  1938  01CD  1D03               	skipz
  1939  01CE  29CA               	goto	u995
  1940  01CF  0870               	movf	??_OneWire_reset,w
  1941  01D0  0506               	andwf	6,w	;volatile
  1942  01D1  00F1               	movwf	??_OneWire_reset+1
  1943  01D2  0871               	movf	??_OneWire_reset+1,w
  1944  01D3  00F2               	movwf	OneWire_reset@err
  1945                           
  1946                           ;OneWire.c: 12: _delay((unsigned long)((480-66)*(8000000/4000000.0)));
  1947  01D4  30A5               	movlw	165
  1948  01D5  00F0               	movwf	??_OneWire_reset
  1949  01D6                     u1957:	
  1950  01D6  29D7               	nop2
  1951  01D7  0BF0               	decfsz	??_OneWire_reset,f
  1952  01D8  29D6               	goto	u1957
  1953  01D9  29DA               	nop2
  1954                           
  1955                           ;OneWire.c: 13: if(RB0==0)
  1956  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  1957  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  1958  01DC  1806               	btfsc	6,0	;volatile
  1959  01DD  29E0               	goto	l1280
  1960                           
  1961                           ;OneWire.c: 14: {
  1962                           ;OneWire.c: 15: err=1;
  1963  01DE  01F2               	clrf	OneWire_reset@err
  1964  01DF  0AF2               	incf	OneWire_reset@err,f
  1965  01E0                     l1280:	
  1966                           
  1967                           ;OneWire.c: 16: }
  1968                           ;OneWire.c: 18: return err;
  1969  01E0  0872               	movf	OneWire_reset@err,w
  1970  01E1  0008               	return
  1971  01E2                     __end_of_OneWire_reset:	
  1972                           
  1973                           	psect	text6
  1974  05D1                     __ptext6:	
  1975 ;; *************** function _sprintf *****************
  1976 ;; Defined at:
  1977 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;  sp              1    wreg     PTR unsigned char 
  1980 ;;		 -> read_meas@s(30), 
  1981 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1982 ;;		 -> STR_10(21), STR_9(13), STR_8(20), STR_7(13), 
  1983 ;;		 -> STR_6(6), 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  sp              1   16[BANK0 ] PTR unsigned char 
  1986 ;;		 -> read_meas@s(30), 
  1987 ;;  idx             1    8[BANK0 ] unsigned char 
  1988 ;;  tmpval          4    0        struct .
  1989 ;;  width           2   14[BANK0 ] int 
  1990 ;;  val             2   11[BANK0 ] unsigned int 
  1991 ;;  cp              2    0        PTR const unsigned char 
  1992 ;;  len             2    0        unsigned int 
  1993 ;;  c               1   17[BANK0 ] char 
  1994 ;;  flag            1   13[BANK0 ] unsigned char 
  1995 ;;  prec            1   10[BANK0 ] char 
  1996 ;;  ap              1    9[BANK0 ] PTR void [1]
  1997 ;;		 -> ?_sprintf(2), 
  1998 ;; Return value:  Size  Location     Type
  1999 ;;                  2    0[BANK0 ] int 
  2000 ;; Registers used:
  2001 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2002 ;; Tracked objects:
  2003 ;;		On entry : 0/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2007 ;;      Params:         0       5       0       0       0
  2008 ;;      Locals:         0      10       0       0       0
  2009 ;;      Temps:          0       3       0       0       0
  2010 ;;      Totals:         0      18       0       0       0
  2011 ;;Total ram usage:       18 bytes
  2012 ;; Hardware stack levels used:    1
  2013 ;; Hardware stack levels required when called:    1
  2014 ;; This function calls:
  2015 ;;		___lwdiv
  2016 ;;		___lwmod
  2017 ;;		___wmul
  2018 ;;		_isdigit
  2019 ;; This function is called by:
  2020 ;;		_read_meas
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           
  2025                           ;psect for function _sprintf
  2026  05D1                     _sprintf:	
  2027                           
  2028                           ;incstack = 0
  2029                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2030                           ;sprintf@sp stored from wreg
  2031  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  2032  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  2033  05D3  00B0               	movwf	sprintf@sp
  2034                           
  2035                           ;doprnt.c: 494: va_list ap;
  2036                           ;doprnt.c: 499: signed char c;
  2037                           ;doprnt.c: 501: int width;
  2038                           ;doprnt.c: 506: signed char prec;
  2039                           ;doprnt.c: 508: unsigned char flag;
  2040                           ;doprnt.c: 523: union {
  2041                           ;doprnt.c: 524: unsigned long vd;
  2042                           ;doprnt.c: 525: double integ;
  2043                           ;doprnt.c: 526: } tmpval;
  2044                           ;doprnt.c: 528: unsigned int val;
  2045                           ;doprnt.c: 529: unsigned len;
  2046                           ;doprnt.c: 530: const char * cp;
  2047                           ;doprnt.c: 533: *ap = __va_start();
  2048  05D4  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2049  05D5  00A5               	movwf	??_sprintf
  2050  05D6  0825               	movf	??_sprintf,w
  2051  05D7  00A9               	movwf	sprintf@ap
  2052  05D8                     l1586:	
  2053                           ;doprnt.c: 536: while(c = *f++) {
  2054                           
  2055  05D8  3001               	movlw	1
  2056  05D9  07A0               	addwf	sprintf@f,f
  2057  05DA  30FF               	movlw	-1
  2058  05DB  0720               	addwf	sprintf@f,w
  2059  05DC  0084               	movwf	4
  2060  05DD  120A  118A  200D  120A  118A  	fcall	stringdir
  2061  05E2  00A5               	movwf	??_sprintf
  2062  05E3  0825               	movf	??_sprintf,w
  2063  05E4  00B1               	movwf	sprintf@c
  2064  05E5  0831               	movf	sprintf@c,w
  2065  05E6  1903               	btfsc	3,2
  2066  05E7  2FEF               	goto	l1588
  2067                           
  2068                           ;doprnt.c: 538: if(c != '%')
  2069  05E8  3025               	movlw	37
  2070  05E9  0631               	xorwf	sprintf@c,w
  2071  05EA  1903               	btfsc	3,2
  2072  05EB  2DF8               	goto	l1466
  2073                           
  2074                           ;doprnt.c: 540: {
  2075                           ;doprnt.c: 541: ((*sp++ = (c)));
  2076  05EC  0831               	movf	sprintf@c,w
  2077  05ED  00A5               	movwf	??_sprintf
  2078  05EE  0830               	movf	sprintf@sp,w
  2079  05EF  0084               	movwf	4
  2080  05F0  0825               	movf	??_sprintf,w
  2081  05F1  1383               	bcf	3,7	;select IRP bank0
  2082  05F2  0080               	movwf	0
  2083  05F3  3001               	movlw	1
  2084  05F4  00A5               	movwf	??_sprintf
  2085  05F5  0825               	movf	??_sprintf,w
  2086  05F6  07B0               	addwf	sprintf@sp,f
  2087                           
  2088                           ;doprnt.c: 542: continue;
  2089  05F7  2DD8               	goto	l1586
  2090  05F8                     l1466:	
  2091                           
  2092                           ;doprnt.c: 543: }
  2093                           ;doprnt.c: 546: width = 0;
  2094  05F8  01AE               	clrf	sprintf@width
  2095  05F9  01AF               	clrf	sprintf@width+1
  2096                           
  2097                           ;doprnt.c: 548: flag = 0;
  2098  05FA  01AD               	clrf	sprintf@flag
  2099                           
  2100                           ;doprnt.c: 551: switch(*f) {
  2101                           
  2102                           ;doprnt.c: 550: for(;;) {
  2103  05FB  2E01               	goto	l1472
  2104  05FC                     l193:	
  2105                           ;doprnt.c: 579: case '0':
  2106                           
  2107                           
  2108                           ;doprnt.c: 580: flag |= 0x04;
  2109  05FC  152D               	bsf	sprintf@flag,2
  2110                           
  2111                           ;doprnt.c: 581: f++;
  2112  05FD  3001               	movlw	1
  2113  05FE  00A5               	movwf	??_sprintf
  2114  05FF  0825               	movf	??_sprintf,w
  2115  0600  07A0               	addwf	sprintf@f,f
  2116  0601                     l1472:	
  2117                           ;doprnt.c: 584: }
  2118                           
  2119                           ;doprnt.c: 582: continue;
  2120                           
  2121  0601  0820               	movf	sprintf@f,w
  2122  0602  0084               	movwf	4
  2123  0603  120A  118A  200D  120A  118A  	fcall	stringdir
  2124                           
  2125                           ; Switch size 1, requested type "space"
  2126                           ; Number of cases is 1, Range of values is 48 to 48
  2127                           ; switch strategies available:
  2128                           ; Name         Instructions Cycles
  2129                           ; simple_byte            4     3 (average)
  2130                           ; direct_byte           14    11 (fixed)
  2131                           ; jumptable            263     9 (fixed)
  2132                           ;	Chosen strategy is simple_byte
  2133  0608  3A30               	xorlw	48	; case 48
  2134  0609  1903               	skipnz
  2135  060A  2DFC               	goto	l193
  2136  060B  2E0C               	goto	l1474
  2137  060C                     l1474:	
  2138                           ;doprnt.c: 586: }
  2139                           
  2140                           ;doprnt.c: 585: break;
  2141                           
  2142                           
  2143                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2144  060C  0820               	movf	sprintf@f,w
  2145  060D  0084               	movwf	4
  2146  060E  120A  118A  200D  120A  118A  	fcall	stringdir
  2147  0613  120A  158A  27DA  120A  118A  	fcall	_isdigit
  2148  0618  1C03               	btfss	3,0
  2149  0619  2E5D               	goto	l1488
  2150                           
  2151                           ;doprnt.c: 598: width = 0;
  2152  061A  1283               	bcf	3,5	;RP0=0, select bank0
  2153  061B  1303               	bcf	3,6	;RP1=0, select bank0
  2154  061C  01AE               	clrf	sprintf@width
  2155  061D  01AF               	clrf	sprintf@width+1
  2156  061E                     l1478:	
  2157                           ;doprnt.c: 599: do {
  2158                           
  2159                           
  2160                           ;doprnt.c: 600: width *= 10;
  2161  061E  300A               	movlw	10
  2162  061F  00F0               	movwf	___wmul@multiplier
  2163  0620  3000               	movlw	0
  2164  0621  00F1               	movwf	___wmul@multiplier+1
  2165  0622  1283               	bcf	3,5	;RP0=0, select bank0
  2166  0623  1303               	bcf	3,6	;RP1=0, select bank0
  2167  0624  082F               	movf	sprintf@width+1,w
  2168  0625  00F3               	movwf	___wmul@multiplicand+1
  2169  0626  082E               	movf	sprintf@width,w
  2170  0627  00F2               	movwf	___wmul@multiplicand
  2171  0628  120A  118A  20FF  120A  118A  	fcall	___wmul
  2172  062D  0871               	movf	?___wmul+1,w
  2173  062E  1283               	bcf	3,5	;RP0=0, select bank0
  2174  062F  1303               	bcf	3,6	;RP1=0, select bank0
  2175  0630  00AF               	movwf	sprintf@width+1
  2176  0631  0870               	movf	?___wmul,w
  2177  0632  00AE               	movwf	sprintf@width
  2178                           
  2179                           ;doprnt.c: 601: width += *f++ - '0';
  2180  0633  0820               	movf	sprintf@f,w
  2181  0634  0084               	movwf	4
  2182  0635  120A  118A  200D  120A  118A  	fcall	stringdir
  2183  063A  3ED0               	addlw	208
  2184  063B  00A5               	movwf	??_sprintf
  2185  063C  30FF               	movlw	255
  2186  063D  1803               	skipnc
  2187  063E  3000               	movlw	0
  2188  063F  00A6               	movwf	??_sprintf+1
  2189  0640  0825               	movf	??_sprintf,w
  2190  0641  07AE               	addwf	sprintf@width,f
  2191  0642  1803               	skipnc
  2192  0643  0AAF               	incf	sprintf@width+1,f
  2193  0644  0826               	movf	??_sprintf+1,w
  2194  0645  07AF               	addwf	sprintf@width+1,f
  2195  0646  3001               	movlw	1
  2196  0647  00A5               	movwf	??_sprintf
  2197  0648  0825               	movf	??_sprintf,w
  2198  0649  07A0               	addwf	sprintf@f,f
  2199                           
  2200                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2201  064A  0820               	movf	sprintf@f,w
  2202  064B  0084               	movwf	4
  2203  064C  120A  118A  200D  120A  118A  	fcall	stringdir
  2204  0651  120A  158A  27DA  120A  118A  	fcall	_isdigit
  2205  0656  1C03               	btfss	3,0
  2206  0657  2E5D               	goto	l1488
  2207  0658  2E1E               	goto	l1478
  2208  0659                     l207:	
  2209                           ;doprnt.c: 712: case 'X':
  2210                           
  2211                           ;doprnt.c: 698: case 'i':
  2212                           ;doprnt.c: 699: break;
  2213                           
  2214                           ;doprnt.c: 697: case 'd':
  2215                           
  2216                           ;doprnt.c: 638: goto alldone;
  2217                           
  2218                           ;doprnt.c: 637: case 0:
  2219                           
  2220                           ;doprnt.c: 608: }
  2221                           ;doprnt.c: 635: switch(c = *f++) {
  2222                           
  2223                           
  2224                           ;doprnt.c: 718: case 'x':
  2225                           ;doprnt.c: 721: flag |= 0x80;
  2226  0659  1283               	bcf	3,5	;RP0=0, select bank0
  2227  065A  1303               	bcf	3,6	;RP1=0, select bank0
  2228  065B  17AD               	bsf	sprintf@flag,7
  2229                           
  2230                           ;doprnt.c: 723: break;
  2231  065C  2E7A               	goto	l205
  2232  065D                     l1488:	
  2233                           ;doprnt.c: 822: }
  2234                           
  2235                           ;doprnt.c: 813: continue;
  2236                           
  2237                           ;doprnt.c: 802: default:
  2238                           
  2239  065D  3001               	movlw	1
  2240  065E  1283               	bcf	3,5	;RP0=0, select bank0
  2241  065F  1303               	bcf	3,6	;RP1=0, select bank0
  2242  0660  07A0               	addwf	sprintf@f,f
  2243  0661  30FF               	movlw	-1
  2244  0662  0720               	addwf	sprintf@f,w
  2245  0663  0084               	movwf	4
  2246  0664  120A  118A  200D  120A  118A  	fcall	stringdir
  2247  0669  00B1               	movwf	sprintf@c
  2248                           
  2249                           ; Switch size 1, requested type "space"
  2250                           ; Number of cases is 5, Range of values is 0 to 120
  2251                           ; switch strategies available:
  2252                           ; Name         Instructions Cycles
  2253                           ; simple_byte           16     9 (average)
  2254                           ; jumptable            260     6 (fixed)
  2255                           ;	Chosen strategy is simple_byte
  2256  066A  3A00               	xorlw	0	; case 0
  2257  066B  1903               	skipnz
  2258  066C  2FEF               	goto	l1588
  2259  066D  3A58               	xorlw	88	; case 88
  2260  066E  1903               	skipnz
  2261  066F  2E59               	goto	l207
  2262  0670  3A3C               	xorlw	60	; case 100
  2263  0671  1903               	skipnz
  2264  0672  2E7A               	goto	l205
  2265  0673  3A0D               	xorlw	13	; case 105
  2266  0674  1903               	skipnz
  2267  0675  2E7A               	goto	l205
  2268  0676  3A11               	xorlw	17	; case 120
  2269  0677  1903               	skipnz
  2270  0678  2E59               	goto	l207
  2271  0679  2DD8               	goto	l1586
  2272  067A                     l205:	
  2273                           
  2274                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2275  067A  1283               	bcf	3,5	;RP0=0, select bank0
  2276  067B  1303               	bcf	3,6	;RP1=0, select bank0
  2277  067C  1BAD               	btfsc	sprintf@flag,7
  2278  067D  2E96               	goto	l1500
  2279                           
  2280                           ;doprnt.c: 1253: {
  2281                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2282  067E  0829               	movf	sprintf@ap,w
  2283  067F  0084               	movwf	4
  2284  0680  1383               	bcf	3,7	;select IRP bank0
  2285  0681  0800               	movf	0,w
  2286  0682  00AB               	movwf	sprintf@val
  2287  0683  0A84               	incf	4,f
  2288  0684  0800               	movf	0,w
  2289  0685  00AC               	movwf	sprintf@val+1
  2290  0686  3002               	movlw	2
  2291  0687  00A5               	movwf	??_sprintf
  2292  0688  0825               	movf	??_sprintf,w
  2293  0689  07A9               	addwf	sprintf@ap,f
  2294                           
  2295                           ;doprnt.c: 1261: if((int)val < 0) {
  2296  068A  1FAC               	btfss	sprintf@val+1,7
  2297  068B  2EEB               	goto	l1526
  2298                           
  2299                           ;doprnt.c: 1262: flag |= 0x03;
  2300  068C  3003               	movlw	3
  2301  068D  00A5               	movwf	??_sprintf
  2302  068E  0825               	movf	??_sprintf,w
  2303  068F  04AD               	iorwf	sprintf@flag,f
  2304                           
  2305                           ;doprnt.c: 1263: val = -val;
  2306  0690  09AB               	comf	sprintf@val,f
  2307  0691  09AC               	comf	sprintf@val+1,f
  2308  0692  0AAB               	incf	sprintf@val,f
  2309  0693  1903               	skipnz
  2310  0694  0AAC               	incf	sprintf@val+1,f
  2311                           
  2312                           ;doprnt.c: 1264: }
  2313                           ;doprnt.c: 1266: }
  2314  0695  2EEB               	goto	l1526
  2315  0696                     l1500:	
  2316                           
  2317                           ;doprnt.c: 1268: else
  2318                           ;doprnt.c: 1273: {
  2319                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2320  0696  0829               	movf	sprintf@ap,w
  2321  0697  0084               	movwf	4
  2322  0698  1383               	bcf	3,7	;select IRP bank0
  2323  0699  0800               	movf	0,w
  2324  069A  00AB               	movwf	sprintf@val
  2325  069B  0A84               	incf	4,f
  2326  069C  0800               	movf	0,w
  2327  069D  00AC               	movwf	sprintf@val+1
  2328  069E  3002               	movlw	2
  2329  069F  00A5               	movwf	??_sprintf
  2330  06A0  0825               	movf	??_sprintf,w
  2331  06A1  07A9               	addwf	sprintf@ap,f
  2332                           
  2333                           ;doprnt.c: 1287: }
  2334                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2335  06A2  2EEB               	goto	l1526
  2336  06A3                     l213:	
  2337                           ;doprnt.c: 1299: case 0x00:
  2338                           
  2339                           
  2340                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2341  06A3  01B1               	clrf	sprintf@c
  2342  06A4  0AB1               	incf	sprintf@c,f
  2343  06A5                     L3:	
  2344  06A5  3005               	movlw	5
  2345  06A6  0631               	xorwf	sprintf@c,w
  2346  06A7  1903               	btfsc	3,2
  2347  06A8  2EF4               	goto	l1528
  2348                           
  2349                           ;doprnt.c: 1306: if(val < dpowers[c])
  2350  06A9  0831               	movf	sprintf@c,w
  2351  06AA  00A5               	movwf	??_sprintf
  2352  06AB  0725               	addwf	??_sprintf,w
  2353  06AC  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2354  06AD  0084               	movwf	4
  2355  06AE  120A  118A  200D  120A  118A  	fcall	stringdir
  2356  06B3  00A6               	movwf	??_sprintf+1
  2357  06B4  120A  118A  200D  120A  118A  	fcall	stringdir
  2358  06B9  00A7               	movwf	??_sprintf+2
  2359  06BA  0827               	movf	??_sprintf+2,w
  2360  06BB  022C               	subwf	sprintf@val+1,w
  2361  06BC  1D03               	skipz
  2362  06BD  2EC0               	goto	u1425
  2363  06BE  0826               	movf	??_sprintf+1,w
  2364  06BF  022B               	subwf	sprintf@val,w
  2365  06C0                     u1425:	
  2366  06C0  1C03               	btfss	3,0
  2367  06C1  2EF4               	goto	l1528
  2368                           
  2369                           ;doprnt.c: 1307: break;
  2370  06C2  3001               	movlw	1
  2371  06C3  00A5               	movwf	??_sprintf
  2372  06C4  0825               	movf	??_sprintf,w
  2373  06C5  07B1               	addwf	sprintf@c,f
  2374  06C6  2EA5               	goto	L3
  2375  06C7                     l218:	
  2376                           ;doprnt.c: 1314: case 0x80:
  2377                           
  2378                           ;doprnt.c: 1309: break;
  2379                           
  2380                           
  2381                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2382  06C7  01B1               	clrf	sprintf@c
  2383  06C8  0AB1               	incf	sprintf@c,f
  2384  06C9                     L4:	
  2385  06C9  3004               	movlw	4
  2386  06CA  0631               	xorwf	sprintf@c,w
  2387  06CB  1903               	btfsc	3,2
  2388  06CC  2EF4               	goto	l1528
  2389                           
  2390                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2391  06CD  0831               	movf	sprintf@c,w
  2392  06CE  00A5               	movwf	??_sprintf
  2393  06CF  0725               	addwf	??_sprintf,w
  2394  06D0  3E0B               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  2395  06D1  0084               	movwf	4
  2396  06D2  120A  118A  200D  120A  118A  	fcall	stringdir
  2397  06D7  00A6               	movwf	??_sprintf+1
  2398  06D8  120A  118A  200D  120A  118A  	fcall	stringdir
  2399  06DD  00A7               	movwf	??_sprintf+2
  2400  06DE  0827               	movf	??_sprintf+2,w
  2401  06DF  022C               	subwf	sprintf@val+1,w
  2402  06E0  1D03               	skipz
  2403  06E1  2EE4               	goto	u1455
  2404  06E2  0826               	movf	??_sprintf+1,w
  2405  06E3  022B               	subwf	sprintf@val,w
  2406  06E4                     u1455:	
  2407  06E4  1C03               	btfss	3,0
  2408  06E5  2EF4               	goto	l1528
  2409                           
  2410                           ;doprnt.c: 1318: break;
  2411  06E6  3001               	movlw	1
  2412  06E7  00A5               	movwf	??_sprintf
  2413  06E8  0825               	movf	??_sprintf,w
  2414  06E9  07B1               	addwf	sprintf@c,f
  2415  06EA  2EC9               	goto	L4
  2416  06EB                     l1526:	
  2417                           ;doprnt.c: 1336: }
  2418                           
  2419                           ;doprnt.c: 1320: break;
  2420                           
  2421  06EB  082D               	movf	sprintf@flag,w
  2422  06EC  3980               	andlw	128
  2423                           
  2424                           ; Switch size 1, requested type "space"
  2425                           ; Number of cases is 2, Range of values is 0 to 128
  2426                           ; switch strategies available:
  2427                           ; Name         Instructions Cycles
  2428                           ; simple_byte            7     4 (average)
  2429                           ; jumptable            260     6 (fixed)
  2430                           ;	Chosen strategy is simple_byte
  2431  06ED  3A00               	xorlw	0	; case 0
  2432  06EE  1903               	skipnz
  2433  06EF  2EA3               	goto	l213
  2434  06F0  3A80               	xorlw	128	; case 128
  2435  06F1  1903               	skipnz
  2436  06F2  2EC7               	goto	l218
  2437  06F3  2EF4               	goto	l1528
  2438  06F4                     l1528:	
  2439                           
  2440                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2441  06F4  082E               	movf	sprintf@width,w
  2442  06F5  042F               	iorwf	sprintf@width+1,w
  2443  06F6  1903               	btfsc	3,2
  2444  06F7  2F02               	goto	l222
  2445  06F8  082D               	movf	sprintf@flag,w
  2446  06F9  3903               	andlw	3
  2447  06FA  1903               	btfsc	3,2
  2448  06FB  2F02               	goto	l222
  2449                           
  2450                           ;doprnt.c: 1346: width--;
  2451  06FC  30FF               	movlw	255
  2452  06FD  07AE               	addwf	sprintf@width,f
  2453  06FE  1803               	skipnc
  2454  06FF  0AAF               	incf	sprintf@width+1,f
  2455  0700  30FF               	movlw	255
  2456  0701  07AF               	addwf	sprintf@width+1,f
  2457  0702                     l222:	
  2458                           
  2459                           ;doprnt.c: 1381: if(width > c)
  2460  0702  0831               	movf	sprintf@c,w
  2461  0703  00A5               	movwf	??_sprintf
  2462  0704  01A6               	clrf	??_sprintf+1
  2463  0705  1BA5               	btfsc	??_sprintf,7
  2464  0706  03A6               	decf	??_sprintf+1,f
  2465  0707  0826               	movf	??_sprintf+1,w
  2466  0708  3A80               	xorlw	128
  2467  0709  00A7               	movwf	??_sprintf+2
  2468  070A  082F               	movf	sprintf@width+1,w
  2469  070B  3A80               	xorlw	128
  2470  070C  0227               	subwf	??_sprintf+2,w
  2471  070D  1D03               	skipz
  2472  070E  2F11               	goto	u1495
  2473  070F  082E               	movf	sprintf@width,w
  2474  0710  0225               	subwf	??_sprintf,w
  2475  0711                     u1495:	
  2476  0711  1803               	skipnc
  2477  0712  2F21               	goto	l1536
  2478                           
  2479                           ;doprnt.c: 1382: width -= c;
  2480  0713  1283               	bcf	3,5	;RP0=0, select bank0
  2481  0714  1303               	bcf	3,6	;RP1=0, select bank0
  2482  0715  0831               	movf	sprintf@c,w
  2483  0716  00A5               	movwf	??_sprintf
  2484  0717  01A6               	clrf	??_sprintf+1
  2485  0718  1BA5               	btfsc	??_sprintf,7
  2486  0719  03A6               	decf	??_sprintf+1,f
  2487  071A  0825               	movf	??_sprintf,w
  2488  071B  02AE               	subwf	sprintf@width,f
  2489  071C  0826               	movf	??_sprintf+1,w
  2490  071D  1C03               	skipc
  2491  071E  03AF               	decf	sprintf@width+1,f
  2492  071F  02AF               	subwf	sprintf@width+1,f
  2493  0720  2F25               	goto	l1538
  2494  0721                     l1536:	
  2495                           
  2496                           ;doprnt.c: 1383: else
  2497                           ;doprnt.c: 1384: width = 0;
  2498  0721  1283               	bcf	3,5	;RP0=0, select bank0
  2499  0722  1303               	bcf	3,6	;RP1=0, select bank0
  2500  0723  01AE               	clrf	sprintf@width
  2501  0724  01AF               	clrf	sprintf@width+1
  2502  0725                     l1538:	
  2503                           
  2504                           ;doprnt.c: 1387: if(flag & 0x04) {
  2505  0725  1D2D               	btfss	sprintf@flag,2
  2506  0726  2F4C               	goto	l1554
  2507                           
  2508                           ;doprnt.c: 1392: if(flag & 0x03)
  2509  0727  082D               	movf	sprintf@flag,w
  2510  0728  3903               	andlw	3
  2511  0729  1903               	btfsc	3,2
  2512  072A  2F36               	goto	l1546
  2513                           
  2514                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  2515  072B  302D               	movlw	45
  2516  072C  00A5               	movwf	??_sprintf
  2517  072D  0830               	movf	sprintf@sp,w
  2518  072E  0084               	movwf	4
  2519  072F  0825               	movf	??_sprintf,w
  2520  0730  1383               	bcf	3,7	;select IRP bank0
  2521  0731  0080               	movwf	0
  2522  0732  3001               	movlw	1
  2523  0733  00A5               	movwf	??_sprintf
  2524  0734  0825               	movf	??_sprintf,w
  2525  0735  07B0               	addwf	sprintf@sp,f
  2526  0736                     l1546:	
  2527                           
  2528                           ;doprnt.c: 1415: if(width)
  2529  0736  082E               	movf	sprintf@width,w
  2530  0737  042F               	iorwf	sprintf@width+1,w
  2531  0738  1903               	btfsc	3,2
  2532  0739  2F74               	goto	l1568
  2533                           
  2534                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2535                           
  2536                           ;doprnt.c: 1416: do
  2537  073A  3030               	movlw	48
  2538  073B  00A5               	movwf	??_sprintf
  2539  073C  0830               	movf	sprintf@sp,w
  2540  073D  0084               	movwf	4
  2541  073E  0825               	movf	??_sprintf,w
  2542  073F  1383               	bcf	3,7	;select IRP bank0
  2543  0740  0080               	movwf	0
  2544  0741  3001               	movlw	1
  2545  0742  00A5               	movwf	??_sprintf
  2546  0743  0825               	movf	??_sprintf,w
  2547  0744  07B0               	addwf	sprintf@sp,f
  2548                           
  2549                           ;doprnt.c: 1418: while(--width);
  2550  0745  30FF               	movlw	255
  2551  0746  07AE               	addwf	sprintf@width,f
  2552  0747  1803               	skipnc
  2553  0748  0AAF               	incf	sprintf@width+1,f
  2554  0749  30FF               	movlw	255
  2555  074A  07AF               	addwf	sprintf@width+1,f
  2556  074B  2F36               	goto	l1546
  2557  074C                     l1554:	
  2558                           ;doprnt.c: 1420: } else
  2559                           
  2560                           
  2561                           ;doprnt.c: 1422: {
  2562                           ;doprnt.c: 1424: if(width
  2563                           ;doprnt.c: 1428: )
  2564  074C  082E               	movf	sprintf@width,w
  2565  074D  042F               	iorwf	sprintf@width+1,w
  2566  074E  1903               	btfsc	3,2
  2567  074F  2F65               	goto	l1562
  2568  0750                     l1556:	
  2569                           ;doprnt.c: 1429: do
  2570                           
  2571                           
  2572                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2573  0750  3020               	movlw	32
  2574  0751  00A5               	movwf	??_sprintf
  2575  0752  0830               	movf	sprintf@sp,w
  2576  0753  0084               	movwf	4
  2577  0754  0825               	movf	??_sprintf,w
  2578  0755  1383               	bcf	3,7	;select IRP bank0
  2579  0756  0080               	movwf	0
  2580  0757  3001               	movlw	1
  2581  0758  00A5               	movwf	??_sprintf
  2582  0759  0825               	movf	??_sprintf,w
  2583  075A  07B0               	addwf	sprintf@sp,f
  2584                           
  2585                           ;doprnt.c: 1431: while(--width);
  2586  075B  30FF               	movlw	255
  2587  075C  07AE               	addwf	sprintf@width,f
  2588  075D  1803               	skipnc
  2589  075E  0AAF               	incf	sprintf@width+1,f
  2590  075F  30FF               	movlw	255
  2591  0760  07AF               	addwf	sprintf@width+1,f
  2592  0761  082E               	movf	sprintf@width,w
  2593  0762  042F               	iorwf	sprintf@width+1,w
  2594  0763  1D03               	btfss	3,2
  2595  0764  2F50               	goto	l1556
  2596  0765                     l1562:	
  2597                           
  2598                           ;doprnt.c: 1438: if(flag & 0x03)
  2599  0765  082D               	movf	sprintf@flag,w
  2600  0766  3903               	andlw	3
  2601  0767  1903               	btfsc	3,2
  2602  0768  2F74               	goto	l1568
  2603                           
  2604                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2605  0769  302D               	movlw	45
  2606  076A  00A5               	movwf	??_sprintf
  2607  076B  0830               	movf	sprintf@sp,w
  2608  076C  0084               	movwf	4
  2609  076D  0825               	movf	??_sprintf,w
  2610  076E  1383               	bcf	3,7	;select IRP bank0
  2611  076F  0080               	movwf	0
  2612  0770  3001               	movlw	1
  2613  0771  00A5               	movwf	??_sprintf
  2614  0772  0825               	movf	??_sprintf,w
  2615  0773  07B0               	addwf	sprintf@sp,f
  2616  0774                     l1568:	
  2617                           
  2618                           ;doprnt.c: 1469: }
  2619                           ;doprnt.c: 1472: prec = c;
  2620  0774  0831               	movf	sprintf@c,w
  2621  0775  00A5               	movwf	??_sprintf
  2622  0776  0825               	movf	??_sprintf,w
  2623  0777  00AA               	movwf	sprintf@prec
  2624                           
  2625                           ;doprnt.c: 1474: while(prec--) {
  2626  0778  2FDE               	goto	l1584
  2627  0779                     l1570:	
  2628                           ;doprnt.c: 1478: {
  2629                           ;doprnt.c: 1483: case 0x00:
  2630                           
  2631                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2632                           
  2633                           
  2634                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2635  0779  300A               	movlw	10
  2636  077A  00F8               	movwf	___lwmod@divisor
  2637  077B  3000               	movlw	0
  2638  077C  00F9               	movwf	___lwmod@divisor+1
  2639  077D  082A               	movf	sprintf@prec,w
  2640  077E  00A5               	movwf	??_sprintf
  2641  077F  0725               	addwf	??_sprintf,w
  2642  0780  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2643  0781  0084               	movwf	4
  2644  0782  120A  118A  200D  120A  118A  	fcall	stringdir
  2645  0787  00F0               	movwf	___lwdiv@divisor
  2646  0788  120A  118A  200D  120A  118A  	fcall	stringdir
  2647  078D  00F1               	movwf	___lwdiv@divisor+1
  2648  078E  082C               	movf	sprintf@val+1,w
  2649  078F  00F3               	movwf	___lwdiv@dividend+1
  2650  0790  082B               	movf	sprintf@val,w
  2651  0791  00F2               	movwf	___lwdiv@dividend
  2652  0792  120A  118A  21E2  120A  118A  	fcall	___lwdiv
  2653  0797  0871               	movf	?___lwdiv+1,w
  2654  0798  00FB               	movwf	___lwmod@dividend+1
  2655  0799  0870               	movf	?___lwdiv,w
  2656  079A  00FA               	movwf	___lwmod@dividend
  2657  079B  120A  118A  217B  120A  118A  	fcall	___lwmod
  2658  07A0  0878               	movf	?___lwmod,w
  2659  07A1  3E30               	addlw	48
  2660  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  2661  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  2662  07A4  00A6               	movwf	??_sprintf+1
  2663  07A5  0826               	movf	??_sprintf+1,w
  2664  07A6  2FD2               	goto	L2
  2665  07A7                     l1572:	
  2666                           ;doprnt.c: 1497: case 0x80:
  2667                           
  2668                           ;doprnt.c: 1491: break;
  2669                           
  2670                           
  2671                           ;doprnt.c: 1499: {
  2672                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2673  07A7  082A               	movf	sprintf@prec,w
  2674  07A8  00A5               	movwf	??_sprintf
  2675  07A9  0725               	addwf	??_sprintf,w
  2676  07AA  3E0B               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  2677  07AB  0084               	movwf	4
  2678  07AC  120A  118A  200D  120A  118A  	fcall	stringdir
  2679  07B1  00F0               	movwf	___lwdiv@divisor
  2680  07B2  120A  118A  200D  120A  118A  	fcall	stringdir
  2681  07B7  00F1               	movwf	___lwdiv@divisor+1
  2682  07B8  082C               	movf	sprintf@val+1,w
  2683  07B9  00F3               	movwf	___lwdiv@dividend+1
  2684  07BA  082B               	movf	sprintf@val,w
  2685  07BB  00F2               	movwf	___lwdiv@dividend
  2686  07BC  120A  118A  21E2  120A  118A  	fcall	___lwdiv
  2687  07C1  0870               	movf	?___lwdiv,w
  2688  07C2  390F               	andlw	15
  2689  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  2690  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  2691  07C5  00A6               	movwf	??_sprintf+1
  2692  07C6  0826               	movf	??_sprintf+1,w
  2693  07C7  00A8               	movwf	sprintf@idx
  2694                           
  2695                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  2696  07C8  0828               	movf	sprintf@idx,w
  2697  07C9  3E60               	addlw	low ((STR_12-__stringbase)| (0+32768))
  2698  07CA  0084               	movwf	4
  2699  07CB  120A  118A  200D  120A  118A  	fcall	stringdir
  2700  07D0  00A5               	movwf	??_sprintf
  2701  07D1  0825               	movf	??_sprintf,w
  2702  07D2                     L2:	
  2703  07D2  00B1               	movwf	sprintf@c
  2704  07D3                     l1580:	
  2705                           ;doprnt.c: 1523: }
  2706                           
  2707                           ;doprnt.c: 1508: }
  2708                           ;doprnt.c: 1510: break;
  2709                           
  2710                           
  2711                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2712  07D3  0831               	movf	sprintf@c,w
  2713  07D4  00A5               	movwf	??_sprintf
  2714  07D5  0830               	movf	sprintf@sp,w
  2715  07D6  0084               	movwf	4
  2716  07D7  0825               	movf	??_sprintf,w
  2717  07D8  1383               	bcf	3,7	;select IRP bank0
  2718  07D9  0080               	movwf	0
  2719  07DA  3001               	movlw	1
  2720  07DB  00A5               	movwf	??_sprintf
  2721  07DC  0825               	movf	??_sprintf,w
  2722  07DD  07B0               	addwf	sprintf@sp,f
  2723  07DE                     l1584:	
  2724  07DE  30FF               	movlw	255
  2725  07DF  00A5               	movwf	??_sprintf
  2726  07E0  0825               	movf	??_sprintf,w
  2727  07E1  07AA               	addwf	sprintf@prec,f
  2728  07E2  0A2A               	incf	sprintf@prec,w
  2729  07E3  1903               	btfsc	3,2
  2730  07E4  2DD8               	goto	l1586
  2731  07E5  082D               	movf	sprintf@flag,w
  2732  07E6  3980               	andlw	128
  2733                           
  2734                           ; Switch size 1, requested type "space"
  2735                           ; Number of cases is 2, Range of values is 0 to 128
  2736                           ; switch strategies available:
  2737                           ; Name         Instructions Cycles
  2738                           ; simple_byte            7     4 (average)
  2739                           ; jumptable            260     6 (fixed)
  2740                           ;	Chosen strategy is simple_byte
  2741  07E7  3A00               	xorlw	0	; case 0
  2742  07E8  1903               	skipnz
  2743  07E9  2F79               	goto	l1570
  2744  07EA  3A80               	xorlw	128	; case 128
  2745  07EB  1903               	skipnz
  2746  07EC  2FA7               	goto	l1572
  2747  07ED  2FD3               	goto	l1580
  2748  07EE  2FD3               	goto	l1580
  2749  07EF                     l1588:	
  2750                           ;doprnt.c: 1525: }
  2751                           ;doprnt.c: 1533: }
  2752                           ;doprnt.c: 1535: alldone:
  2753                           
  2754                           
  2755                           ;doprnt.c: 1538: *sp = 0;
  2756  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  2757  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  2758  07F1  0830               	movf	sprintf@sp,w
  2759  07F2  0084               	movwf	4
  2760  07F3  1383               	bcf	3,7	;select IRP bank0
  2761  07F4  0180               	clrf	0
  2762  07F5  0008               	return
  2763  07F6                     __end_of_sprintf:	
  2764                           ;doprnt.c: 1540: return 0;
  2765                           ;	Return value of _sprintf is never used
  2766                           
  2767                           
  2768                           	psect	text7
  2769  0FDA                     __ptext7:	
  2770 ;; *************** function _isdigit *****************
  2771 ;; Defined at:
  2772 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;  c               1    wreg     unsigned char 
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;  c               1    1[COMMON] unsigned char 
  2777 ;; Return value:  Size  Location     Type
  2778 ;;		None               void
  2779 ;; Registers used:
  2780 ;;		wreg, status,2, status,0
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2786 ;;      Params:         0       0       0       0       0
  2787 ;;      Locals:         2       0       0       0       0
  2788 ;;      Temps:          0       0       0       0       0
  2789 ;;      Totals:         2       0       0       0       0
  2790 ;;Total ram usage:        2 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; This function calls:
  2793 ;;		Nothing
  2794 ;; This function is called by:
  2795 ;;		_sprintf
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           
  2800                           ;psect for function _isdigit
  2801  0FDA                     _isdigit:	
  2802                           
  2803                           ;incstack = 0
  2804                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2805                           ;isdigit@c stored from wreg
  2806  0FDA  00F1               	movwf	isdigit@c
  2807  0FDB  01F0               	clrf	_isdigit$405
  2808  0FDC  303A               	movlw	58
  2809  0FDD  0271               	subwf	isdigit@c,w
  2810  0FDE  1803               	skipnc
  2811  0FDF  2FE6               	goto	l1312
  2812  0FE0  3030               	movlw	48
  2813  0FE1  0271               	subwf	isdigit@c,w
  2814  0FE2  1C03               	skipc
  2815  0FE3  2FE6               	goto	l1312
  2816  0FE4  01F0               	clrf	_isdigit$405
  2817  0FE5  0AF0               	incf	_isdigit$405,f
  2818  0FE6                     l1312:	
  2819  0FE6  0C70               	rrf	_isdigit$405,w
  2820  0FE7  0008               	return
  2821  0FE8                     __end_of_isdigit:	
  2822                           
  2823                           	psect	text8
  2824  00FF                     __ptext8:	
  2825 ;; *************** function ___wmul *****************
  2826 ;; Defined at:
  2827 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;  multiplier      2    0[COMMON] unsigned int 
  2830 ;;  multiplicand    2    2[COMMON] unsigned int 
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;  product         2    4[COMMON] unsigned int 
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  2    0[COMMON] unsigned int 
  2835 ;; Registers used:
  2836 ;;		wreg, status,2, status,0
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2842 ;;      Params:         4       0       0       0       0
  2843 ;;      Locals:         2       0       0       0       0
  2844 ;;      Temps:          0       0       0       0       0
  2845 ;;      Totals:         6       0       0       0       0
  2846 ;;Total ram usage:        6 bytes
  2847 ;; Hardware stack levels used:    1
  2848 ;; This function calls:
  2849 ;;		Nothing
  2850 ;; This function is called by:
  2851 ;;		_sprintf
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           
  2856                           ;psect for function ___wmul
  2857  00FF                     ___wmul:	
  2858                           
  2859                           ;incstack = 0
  2860                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2861  00FF  01F4               	clrf	___wmul@product
  2862  0100  01F5               	clrf	___wmul@product+1
  2863  0101                     l1318:	
  2864  0101  1C70               	btfss	___wmul@multiplier,0
  2865  0102  2909               	goto	l327
  2866  0103  0872               	movf	___wmul@multiplicand,w
  2867  0104  07F4               	addwf	___wmul@product,f
  2868  0105  1803               	skipnc
  2869  0106  0AF5               	incf	___wmul@product+1,f
  2870  0107  0873               	movf	___wmul@multiplicand+1,w
  2871  0108  07F5               	addwf	___wmul@product+1,f
  2872  0109                     l327:	
  2873  0109  3001               	movlw	1
  2874  010A                     u1075:	
  2875  010A  1003               	clrc
  2876  010B  0DF2               	rlf	___wmul@multiplicand,f
  2877  010C  0DF3               	rlf	___wmul@multiplicand+1,f
  2878  010D  3EFF               	addlw	-1
  2879  010E  1D03               	skipz
  2880  010F  290A               	goto	u1075
  2881  0110  3001               	movlw	1
  2882  0111                     u1085:	
  2883  0111  1003               	clrc
  2884  0112  0CF1               	rrf	___wmul@multiplier+1,f
  2885  0113  0CF0               	rrf	___wmul@multiplier,f
  2886  0114  3EFF               	addlw	-1
  2887  0115  1D03               	skipz
  2888  0116  2911               	goto	u1085
  2889  0117  0870               	movf	___wmul@multiplier,w
  2890  0118  0471               	iorwf	___wmul@multiplier+1,w
  2891  0119  1D03               	btfss	3,2
  2892  011A  2901               	goto	l1318
  2893  011B  0875               	movf	___wmul@product+1,w
  2894  011C  00F1               	movwf	?___wmul+1
  2895  011D  0874               	movf	___wmul@product,w
  2896  011E  00F0               	movwf	?___wmul
  2897  011F  0008               	return
  2898  0120                     __end_of___wmul:	
  2899                           
  2900                           	psect	text9
  2901  017B                     __ptext9:	
  2902 ;; *************** function ___lwmod *****************
  2903 ;; Defined at:
  2904 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;  divisor         2    8[COMMON] unsigned int 
  2907 ;;  dividend        2   10[COMMON] unsigned int 
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;  counter         1   13[COMMON] unsigned char 
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  2    8[COMMON] unsigned int 
  2912 ;; Registers used:
  2913 ;;		wreg, status,2, status,0
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2919 ;;      Params:         4       0       0       0       0
  2920 ;;      Locals:         1       0       0       0       0
  2921 ;;      Temps:          1       0       0       0       0
  2922 ;;      Totals:         6       0       0       0       0
  2923 ;;Total ram usage:        6 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; This function calls:
  2926 ;;		Nothing
  2927 ;; This function is called by:
  2928 ;;		_sprintf
  2929 ;; This function uses a non-reentrant model
  2930 ;;
  2931                           
  2932                           
  2933                           ;psect for function ___lwmod
  2934  017B                     ___lwmod:	
  2935                           
  2936                           ;incstack = 0
  2937                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2938  017B  0878               	movf	___lwmod@divisor,w
  2939  017C  0479               	iorwf	___lwmod@divisor+1,w
  2940  017D  1903               	btfsc	3,2
  2941  017E  29A8               	goto	l1374
  2942  017F  01FD               	clrf	___lwmod@counter
  2943  0180  0AFD               	incf	___lwmod@counter,f
  2944  0181                     l1364:	
  2945  0181  1BF9               	btfsc	___lwmod@divisor+1,7
  2946  0182  298F               	goto	l1366
  2947  0183  3001               	movlw	1
  2948  0184                     u1185:	
  2949  0184  1003               	clrc
  2950  0185  0DF8               	rlf	___lwmod@divisor,f
  2951  0186  0DF9               	rlf	___lwmod@divisor+1,f
  2952  0187  3EFF               	addlw	-1
  2953  0188  1D03               	skipz
  2954  0189  2984               	goto	u1185
  2955  018A  3001               	movlw	1
  2956  018B  00FC               	movwf	??___lwmod
  2957  018C  087C               	movf	??___lwmod,w
  2958  018D  07FD               	addwf	___lwmod@counter,f
  2959  018E  2981               	goto	l1364
  2960  018F                     l1366:	
  2961  018F  0879               	movf	___lwmod@divisor+1,w
  2962  0190  027B               	subwf	___lwmod@dividend+1,w
  2963  0191  1D03               	skipz
  2964  0192  2995               	goto	u1205
  2965  0193  0878               	movf	___lwmod@divisor,w
  2966  0194  027A               	subwf	___lwmod@dividend,w
  2967  0195                     u1205:	
  2968  0195  1C03               	skipc
  2969  0196  299D               	goto	l1370
  2970  0197  0878               	movf	___lwmod@divisor,w
  2971  0198  02FA               	subwf	___lwmod@dividend,f
  2972  0199  0879               	movf	___lwmod@divisor+1,w
  2973  019A  1C03               	skipc
  2974  019B  03FB               	decf	___lwmod@dividend+1,f
  2975  019C  02FB               	subwf	___lwmod@dividend+1,f
  2976  019D                     l1370:	
  2977  019D  3001               	movlw	1
  2978  019E                     u1215:	
  2979  019E  1003               	clrc
  2980  019F  0CF9               	rrf	___lwmod@divisor+1,f
  2981  01A0  0CF8               	rrf	___lwmod@divisor,f
  2982  01A1  3EFF               	addlw	-1
  2983  01A2  1D03               	skipz
  2984  01A3  299E               	goto	u1215
  2985  01A4  3001               	movlw	1
  2986  01A5  02FD               	subwf	___lwmod@counter,f
  2987  01A6  1D03               	btfss	3,2
  2988  01A7  298F               	goto	l1366
  2989  01A8                     l1374:	
  2990  01A8  087B               	movf	___lwmod@dividend+1,w
  2991  01A9  00F9               	movwf	?___lwmod+1
  2992  01AA  087A               	movf	___lwmod@dividend,w
  2993  01AB  00F8               	movwf	?___lwmod
  2994  01AC  0008               	return
  2995  01AD                     __end_of___lwmod:	
  2996                           
  2997                           	psect	text10
  2998  01E2                     __ptext10:	
  2999 ;; *************** function ___lwdiv *****************
  3000 ;; Defined at:
  3001 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  3002 ;; Parameters:    Size  Location     Type
  3003 ;;  divisor         2    0[COMMON] unsigned int 
  3004 ;;  dividend        2    2[COMMON] unsigned int 
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;  quotient        2    5[COMMON] unsigned int 
  3007 ;;  counter         1    7[COMMON] unsigned char 
  3008 ;; Return value:  Size  Location     Type
  3009 ;;                  2    0[COMMON] unsigned int 
  3010 ;; Registers used:
  3011 ;;		wreg, status,2, status,0
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 0/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3017 ;;      Params:         4       0       0       0       0
  3018 ;;      Locals:         3       0       0       0       0
  3019 ;;      Temps:          1       0       0       0       0
  3020 ;;      Totals:         8       0       0       0       0
  3021 ;;Total ram usage:        8 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; This function calls:
  3024 ;;		Nothing
  3025 ;; This function is called by:
  3026 ;;		_read_meas
  3027 ;;		_sprintf
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           
  3032                           ;psect for function ___lwdiv
  3033  01E2                     ___lwdiv:	
  3034                           
  3035                           ;incstack = 0
  3036                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3037  01E2  01F5               	clrf	___lwdiv@quotient
  3038  01E3  01F6               	clrf	___lwdiv@quotient+1
  3039  01E4  0870               	movf	___lwdiv@divisor,w
  3040  01E5  0471               	iorwf	___lwdiv@divisor+1,w
  3041  01E6  1903               	btfsc	3,2
  3042  01E7  2A19               	goto	l1352
  3043  01E8  01F7               	clrf	___lwdiv@counter
  3044  01E9  0AF7               	incf	___lwdiv@counter,f
  3045  01EA                     l1340:	
  3046  01EA  1BF1               	btfsc	___lwdiv@divisor+1,7
  3047  01EB  29F8               	goto	l1342
  3048  01EC  3001               	movlw	1
  3049  01ED                     u1115:	
  3050  01ED  1003               	clrc
  3051  01EE  0DF0               	rlf	___lwdiv@divisor,f
  3052  01EF  0DF1               	rlf	___lwdiv@divisor+1,f
  3053  01F0  3EFF               	addlw	-1
  3054  01F1  1D03               	skipz
  3055  01F2  29ED               	goto	u1115
  3056  01F3  3001               	movlw	1
  3057  01F4  00F4               	movwf	??___lwdiv
  3058  01F5  0874               	movf	??___lwdiv,w
  3059  01F6  07F7               	addwf	___lwdiv@counter,f
  3060  01F7  29EA               	goto	l1340
  3061  01F8                     l1342:	
  3062  01F8  3001               	movlw	1
  3063  01F9                     u1135:	
  3064  01F9  1003               	clrc
  3065  01FA  0DF5               	rlf	___lwdiv@quotient,f
  3066  01FB  0DF6               	rlf	___lwdiv@quotient+1,f
  3067  01FC  3EFF               	addlw	-1
  3068  01FD  1D03               	skipz
  3069  01FE  29F9               	goto	u1135
  3070  01FF  0871               	movf	___lwdiv@divisor+1,w
  3071  0200  0273               	subwf	___lwdiv@dividend+1,w
  3072  0201  1D03               	skipz
  3073  0202  2A05               	goto	u1145
  3074  0203  0870               	movf	___lwdiv@divisor,w
  3075  0204  0272               	subwf	___lwdiv@dividend,w
  3076  0205                     u1145:	
  3077  0205  1C03               	skipc
  3078  0206  2A0E               	goto	l1348
  3079  0207  0870               	movf	___lwdiv@divisor,w
  3080  0208  02F2               	subwf	___lwdiv@dividend,f
  3081  0209  0871               	movf	___lwdiv@divisor+1,w
  3082  020A  1C03               	skipc
  3083  020B  03F3               	decf	___lwdiv@dividend+1,f
  3084  020C  02F3               	subwf	___lwdiv@dividend+1,f
  3085  020D  1475               	bsf	___lwdiv@quotient,0
  3086  020E                     l1348:	
  3087  020E  3001               	movlw	1
  3088  020F                     u1155:	
  3089  020F  1003               	clrc
  3090  0210  0CF1               	rrf	___lwdiv@divisor+1,f
  3091  0211  0CF0               	rrf	___lwdiv@divisor,f
  3092  0212  3EFF               	addlw	-1
  3093  0213  1D03               	skipz
  3094  0214  2A0F               	goto	u1155
  3095  0215  3001               	movlw	1
  3096  0216  02F7               	subwf	___lwdiv@counter,f
  3097  0217  1D03               	btfss	3,2
  3098  0218  29F8               	goto	l1342
  3099  0219                     l1352:	
  3100  0219  0876               	movf	___lwdiv@quotient+1,w
  3101  021A  00F1               	movwf	?___lwdiv+1
  3102  021B  0875               	movf	___lwdiv@quotient,w
  3103  021C  00F0               	movwf	?___lwdiv
  3104  021D  0008               	return
  3105  021E                     __end_of___lwdiv:	
  3106                           
  3107                           	psect	text11
  3108  0120                     __ptext11:	
  3109 ;; *************** function _Usart_PrintString *****************
  3110 ;; Defined at:
  3111 ;;		line 58 in file "USART.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;  Text            2    1[COMMON] PTR unsigned char 
  3114 ;;		 -> STR_11(1), read_meas@s(30), STR_5(5), STR_4(12), 
  3115 ;;		 -> STR_3(18), STR_2(18), STR_1(16), 
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;  i               1    4[COMMON] unsigned char 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  1    wreg      void 
  3120 ;; Registers used:
  3121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3127 ;;      Params:         2       0       0       0       0
  3128 ;;      Locals:         1       0       0       0       0
  3129 ;;      Temps:          1       0       0       0       0
  3130 ;;      Totals:         4       0       0       0       0
  3131 ;;Total ram usage:        4 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    1
  3134 ;; This function calls:
  3135 ;;		_Transmit_char
  3136 ;; This function is called by:
  3137 ;;		_main
  3138 ;;		_start_meas
  3139 ;;		_read_meas
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           
  3144                           ;psect for function _Usart_PrintString
  3145  0120                     _Usart_PrintString:	
  3146                           
  3147                           ;USART.c: 60: char i=0;
  3148                           
  3149                           ;incstack = 0
  3150                           ; Regs used in _Usart_PrintString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3151  0120  01F4               	clrf	Usart_PrintString@i
  3152                           
  3153                           ;USART.c: 61: for(i=0;Text[i]!='\0';i++)
  3154  0121  01F4               	clrf	Usart_PrintString@i
  3155  0122                     l1384:	
  3156  0122  0874               	movf	Usart_PrintString@i,w
  3157  0123  0771               	addwf	Usart_PrintString@Text,w
  3158  0124  0084               	movwf	4
  3159  0125  0872               	movf	Usart_PrintString@Text+1,w
  3160  0126  1803               	skipnc
  3161  0127  0A72               	incf	Usart_PrintString@Text+1,w
  3162  0128  1283               	bcf	3,5	;RP0=0, select bank0
  3163  0129  1303               	bcf	3,6	;RP1=0, select bank0
  3164  012A  00FF               	movwf	127
  3165  012B  120A  118A  2003  120A  118A  	fcall	stringtab
  3166  0130  3A00               	xorlw	0
  3167  0131  1903               	btfsc	3,2
  3168  0132  0008               	return
  3169                           
  3170                           ;USART.c: 62: {
  3171                           ;USART.c: 63: Transmit_char(Text[i]);
  3172  0133  0874               	movf	Usart_PrintString@i,w
  3173  0134  0771               	addwf	Usart_PrintString@Text,w
  3174  0135  0084               	movwf	4
  3175  0136  0872               	movf	Usart_PrintString@Text+1,w
  3176  0137  1803               	skipnc
  3177  0138  0A72               	incf	Usart_PrintString@Text+1,w
  3178  0139  1283               	bcf	3,5	;RP0=0, select bank0
  3179  013A  1303               	bcf	3,6	;RP1=0, select bank0
  3180  013B  00FF               	movwf	127
  3181  013C  120A  118A  2003  120A  118A  	fcall	stringtab
  3182  0141  120A  118A  20B8  120A  118A  	fcall	_Transmit_char
  3183  0146  3001               	movlw	1
  3184  0147  00F3               	movwf	??_Usart_PrintString
  3185  0148  0873               	movf	??_Usart_PrintString,w
  3186  0149  07F4               	addwf	Usart_PrintString@i,f
  3187  014A  2922               	goto	l1384
  3188  014B                     __end_of_Usart_PrintString:	
  3189                           
  3190                           	psect	text12
  3191  00B8                     __ptext12:	
  3192 ;; *************** function _Transmit_char *****************
  3193 ;; Defined at:
  3194 ;;		line 37 in file "USART.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;  data            1    wreg     unsigned char 
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  data            1    0[COMMON] unsigned char 
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  1    wreg      void 
  3201 ;; Registers used:
  3202 ;;		wreg
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3208 ;;      Params:         0       0       0       0       0
  3209 ;;      Locals:         1       0       0       0       0
  3210 ;;      Temps:          0       0       0       0       0
  3211 ;;      Totals:         1       0       0       0       0
  3212 ;;Total ram usage:        1 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; This function calls:
  3215 ;;		Nothing
  3216 ;; This function is called by:
  3217 ;;		_Usart_PrintString
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           
  3222                           ;psect for function _Transmit_char
  3223  00B8                     _Transmit_char:	
  3224                           
  3225                           ;incstack = 0
  3226                           ; Regs used in _Transmit_char: [wreg]
  3227                           ;Transmit_char@data stored from wreg
  3228  00B8  00F0               	movwf	Transmit_char@data
  3229  00B9                     l148:	
  3230                           ;USART.c: 39: while(!TRMT);
  3231                           
  3232  00B9  1683               	bsf	3,5	;RP0=1, select bank1
  3233  00BA  1303               	bcf	3,6	;RP1=0, select bank1
  3234  00BB  1C98               	btfss	24,1	;volatile
  3235  00BC  28B9               	goto	l148
  3236                           
  3237                           ;USART.c: 40: TXREG=data;
  3238  00BD  0870               	movf	Transmit_char@data,w
  3239  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  3240  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  3241  00C0  0099               	movwf	25	;volatile
  3242  00C1  0008               	return
  3243  00C2                     __end_of_Transmit_char:	
  3244                           
  3245                           	psect	text13
  3246  0FD1                     __ptext13:	
  3247 ;; *************** function _OneWire_Byte_Read *****************
  3248 ;; Defined at:
  3249 ;;		line 60 in file "OneWire.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;		None
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;		None
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  2    9[COMMON] unsigned int 
  3256 ;; Registers used:
  3257 ;;		wreg, status,2, status,0, pclath, cstack
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3263 ;;      Params:         2       0       0       0       0
  3264 ;;      Locals:         0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0
  3266 ;;      Totals:         2       0       0       0       0
  3267 ;;Total ram usage:        2 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    2
  3270 ;; This function calls:
  3271 ;;		_OneWire_Byte_Write
  3272 ;; This function is called by:
  3273 ;;		_read_meas
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           
  3278                           ;psect for function _OneWire_Byte_Read
  3279  0FD1                     _OneWire_Byte_Read:	
  3280                           
  3281                           ;OneWire.c: 62: return OneWire_Byte_Write(0xFF);
  3282                           
  3283                           ;incstack = 0
  3284                           ; Regs used in _OneWire_Byte_Read: [wreg+status,2+status,0+pclath+cstack]
  3285  0FD1  30FF               	movlw	255
  3286  0FD2  120A  118A  20DF   	fcall	_OneWire_Byte_Write
  3287  0FD5  0873               	movf	?_OneWire_Byte_Write+1,w
  3288  0FD6  00FA               	movwf	?_OneWire_Byte_Read+1
  3289  0FD7  0872               	movf	?_OneWire_Byte_Write,w
  3290  0FD8  00F9               	movwf	?_OneWire_Byte_Read
  3291  0FD9  0008               	return
  3292  0FDA                     __end_of_OneWire_Byte_Read:	
  3293                           
  3294                           	psect	text14
  3295  00DF                     __ptext14:	
  3296 ;; *************** function _OneWire_Byte_Write *****************
  3297 ;; Defined at:
  3298 ;;		line 45 in file "OneWire.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;  b               1    wreg     unsigned char 
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;  b               1    8[COMMON] unsigned char 
  3303 ;;  j               1    7[COMMON] unsigned char 
  3304 ;;  i               1    6[COMMON] unsigned char 
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  2    2[COMMON] unsigned int 
  3307 ;; Registers used:
  3308 ;;		wreg, status,2, status,0, pclath, cstack
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3314 ;;      Params:         2       0       0       0       0
  3315 ;;      Locals:         3       0       0       0       0
  3316 ;;      Temps:          2       0       0       0       0
  3317 ;;      Totals:         7       0       0       0       0
  3318 ;;Total ram usage:        7 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; Hardware stack levels required when called:    1
  3321 ;; This function calls:
  3322 ;;		_OneWire_Bit_IO
  3323 ;; This function is called by:
  3324 ;;		_OneWire_Byte_Read
  3325 ;;		_w1_rom_search
  3326 ;;		_OneWire_command
  3327 ;;		_read_meas
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           
  3332                           ;psect for function _OneWire_Byte_Write
  3333  00DF                     _OneWire_Byte_Write:	
  3334                           
  3335                           ;incstack = 0
  3336                           ; Regs used in _OneWire_Byte_Write: [wreg+status,2+status,0+pclath+cstack]
  3337                           ;OneWire_Byte_Write@b stored from wreg
  3338  00DF  00F8               	movwf	OneWire_Byte_Write@b
  3339                           
  3340                           ;OneWire.c: 47: uint8_t i=8,j;
  3341  00E0  3008               	movlw	8
  3342  00E1  00F4               	movwf	??_OneWire_Byte_Write
  3343  00E2  0874               	movf	??_OneWire_Byte_Write,w
  3344  00E3  00F6               	movwf	OneWire_Byte_Write@i
  3345  00E4                     l1286:	
  3346                           ;OneWire.c: 49: do{
  3347                           
  3348                           
  3349                           ;OneWire.c: 50: j=OneWire_Bit_IO(b&1);
  3350  00E4  0878               	movf	OneWire_Byte_Write@b,w
  3351  00E5  3901               	andlw	1
  3352  00E6  120A  118A  20C2  120A  118A  	fcall	_OneWire_Bit_IO
  3353  00EB  00F4               	movwf	??_OneWire_Byte_Write
  3354  00EC  0874               	movf	??_OneWire_Byte_Write,w
  3355  00ED  00F7               	movwf	OneWire_Byte_Write@j
  3356                           
  3357                           ;OneWire.c: 51: b>>=1;
  3358  00EE  1003               	clrc
  3359  00EF  0CF8               	rrf	OneWire_Byte_Write@b,f
  3360                           
  3361                           ;OneWire.c: 52: if(j)
  3362  00F0  0877               	movf	OneWire_Byte_Write@j,w
  3363  00F1  1D03               	btfss	3,2
  3364                           
  3365                           ;OneWire.c: 53: {
  3366                           ;OneWire.c: 54: b|=0x80;
  3367  00F2  17F8               	bsf	OneWire_Byte_Write@b,7
  3368                           
  3369                           ;OneWire.c: 55: }
  3370                           ;OneWire.c: 56: }while(--i);
  3371  00F3  3001               	movlw	1
  3372  00F4  02F6               	subwf	OneWire_Byte_Write@i,f
  3373  00F5  1D03               	btfss	3,2
  3374  00F6  28E4               	goto	l1286
  3375                           
  3376                           ;OneWire.c: 57: return b;
  3377  00F7  0878               	movf	OneWire_Byte_Write@b,w
  3378  00F8  00F4               	movwf	??_OneWire_Byte_Write
  3379  00F9  01F5               	clrf	??_OneWire_Byte_Write+1
  3380  00FA  0874               	movf	??_OneWire_Byte_Write,w
  3381  00FB  00F2               	movwf	?_OneWire_Byte_Write
  3382  00FC  0875               	movf	??_OneWire_Byte_Write+1,w
  3383  00FD  00F3               	movwf	?_OneWire_Byte_Write+1
  3384  00FE  0008               	return
  3385  00FF                     __end_of_OneWire_Byte_Write:	
  3386                           
  3387                           	psect	text15
  3388  00C2                     __ptext15:	
  3389 ;; *************** function _OneWire_Bit_IO *****************
  3390 ;; Defined at:
  3391 ;;		line 24 in file "OneWire.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  b               1    wreg     unsigned char 
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;  b               1    1[COMMON] unsigned char 
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      unsigned char 
  3398 ;; Registers used:
  3399 ;;		wreg, status,2, status,0
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3405 ;;      Params:         0       0       0       0       0
  3406 ;;      Locals:         1       0       0       0       0
  3407 ;;      Temps:          1       0       0       0       0
  3408 ;;      Totals:         2       0       0       0       0
  3409 ;;Total ram usage:        2 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; This function calls:
  3412 ;;		Nothing
  3413 ;; This function is called by:
  3414 ;;		_OneWire_Byte_Write
  3415 ;;		_w1_rom_search
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           
  3420                           ;psect for function _OneWire_Bit_IO
  3421  00C2                     _OneWire_Bit_IO:	
  3422                           
  3423                           ;incstack = 0
  3424                           ; Regs used in _OneWire_Bit_IO: [wreg+status,2+status,0]
  3425                           ;OneWire_Bit_IO@b stored from wreg
  3426  00C2  00F1               	movwf	OneWire_Bit_IO@b
  3427                           
  3428                           ;OneWire.c: 26: TRISB0=0;
  3429  00C3  1683               	bsf	3,5	;RP0=1, select bank1
  3430  00C4  1303               	bcf	3,6	;RP1=0, select bank1
  3431  00C5  1006               	bcf	6,0	;volatile
  3432                           
  3433                           ;OneWire.c: 27: _delay((unsigned long)((1)*(8000000/4000000.0)));
  3434  00C6  28C7               	nop2	;2 cycle nop
  3435                           
  3436                           ;OneWire.c: 28: if(b)
  3437  00C7  0871               	movf	OneWire_Bit_IO@b,w
  3438  00C8  1903               	btfsc	3,2
  3439  00C9  28CD               	goto	l1252
  3440                           
  3441                           ;OneWire.c: 29: {
  3442                           ;OneWire.c: 30: TRISB0=1;
  3443  00CA  1683               	bsf	3,5	;RP0=1, select bank1
  3444  00CB  1303               	bcf	3,6	;RP1=0, select bank1
  3445  00CC  1406               	bsf	6,0	;volatile
  3446  00CD                     l1252:	
  3447                           
  3448                           ;OneWire.c: 32: }
  3449                           ;OneWire.c: 33: _delay((unsigned long)((14)*(8000000/4000000.0)));
  3450  00CD  3009               	movlw	9
  3451  00CE  00F0               	movwf	??_OneWire_Bit_IO
  3452  00CF                     u1967:	
  3453  00CF  0BF0               	decfsz	??_OneWire_Bit_IO,f
  3454  00D0  28CF               	goto	u1967
  3455                           
  3456                           ;OneWire.c: 34: if(RB0==0)
  3457  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  3458  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  3459  00D3  1C06               	btfss	6,0	;volatile
  3460                           
  3461                           ;OneWire.c: 35: {
  3462                           ;OneWire.c: 36: b=0;
  3463  00D4  01F1               	clrf	OneWire_Bit_IO@b
  3464                           
  3465                           ;OneWire.c: 37: }
  3466                           ;OneWire.c: 39: _delay((unsigned long)((45)*(8000000/4000000.0)));
  3467  00D5  301D               	movlw	29
  3468  00D6  00F0               	movwf	??_OneWire_Bit_IO
  3469  00D7                     u1977:	
  3470  00D7  0BF0               	decfsz	??_OneWire_Bit_IO,f
  3471  00D8  28D7               	goto	u1977
  3472  00D9  28DA               	nop2
  3473                           
  3474                           ;OneWire.c: 40: TRISB0=1;
  3475  00DA  1683               	bsf	3,5	;RP0=1, select bank1
  3476  00DB  1303               	bcf	3,6	;RP1=0, select bank1
  3477  00DC  1406               	bsf	6,0	;volatile
  3478                           
  3479                           ;OneWire.c: 41: return b;
  3480  00DD  0871               	movf	OneWire_Bit_IO@b,w
  3481  00DE  0008               	return
  3482  00DF                     __end_of_OneWire_Bit_IO:	
  3483                           
  3484                           	psect	text16
  3485  0364                     __ptext16:	
  3486 ;; *************** function _USART_Init *****************
  3487 ;; Defined at:
  3488 ;;		line 8 in file "USART.c"
  3489 ;; Parameters:    Size  Location     Type
  3490 ;;  baud            4    6[BANK0 ] long 
  3491 ;; Auto vars:     Size  Location     Type
  3492 ;;  x               2    9[COMMON] unsigned int 
  3493 ;; Return value:  Size  Location     Type
  3494 ;;                  1    wreg      unsigned char 
  3495 ;; Registers used:
  3496 ;;		wreg, status,2, status,0, pclath, cstack
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3502 ;;      Params:         0       4       0       0       0
  3503 ;;      Locals:         2       0       0       0       0
  3504 ;;      Temps:          0      12       0       0       0
  3505 ;;      Totals:         2      16       0       0       0
  3506 ;;Total ram usage:       18 bytes
  3507 ;; Hardware stack levels used:    1
  3508 ;; Hardware stack levels required when called:    1
  3509 ;; This function calls:
  3510 ;;		___aldiv
  3511 ;; This function is called by:
  3512 ;;		_main
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           
  3517                           ;psect for function _USART_Init
  3518  0364                     _USART_Init:	
  3519                           
  3520                           ;USART.c: 10: unsigned int x;
  3521                           ;USART.c: 11: x=((8000000 - baud*64)/(baud*64));
  3522                           
  3523                           ;incstack = 0
  3524                           ; Regs used in _USART_Init: [wreg+status,2+status,0+pclath+cstack]
  3525  0364  1283               	bcf	3,5	;RP0=0, select bank0
  3526  0365  1303               	bcf	3,6	;RP1=0, select bank0
  3527  0366  0826               	movf	USART_Init@baud,w
  3528  0367  00AA               	movwf	??_USART_Init
  3529  0368  0827               	movf	USART_Init@baud+1,w
  3530  0369  00AB               	movwf	??_USART_Init+1
  3531  036A  0828               	movf	USART_Init@baud+2,w
  3532  036B  00AC               	movwf	??_USART_Init+2
  3533  036C  0829               	movf	USART_Init@baud+3,w
  3534  036D  00AD               	movwf	??_USART_Init+3
  3535  036E  3006               	movlw	6
  3536  036F                     u1695:	
  3537  036F  1003               	clrc
  3538  0370  0DAA               	rlf	??_USART_Init,f
  3539  0371  0DAB               	rlf	??_USART_Init+1,f
  3540  0372  0DAC               	rlf	??_USART_Init+2,f
  3541  0373  0DAD               	rlf	??_USART_Init+3,f
  3542  0374  3EFF               	addlw	-1
  3543  0375  1D03               	skipz
  3544  0376  2B6F               	goto	u1695
  3545  0377  082D               	movf	??_USART_Init+3,w
  3546  0378  00F3               	movwf	___aldiv@divisor+3
  3547  0379  082C               	movf	??_USART_Init+2,w
  3548  037A  00F2               	movwf	___aldiv@divisor+2
  3549  037B  082B               	movf	??_USART_Init+1,w
  3550  037C  00F1               	movwf	___aldiv@divisor+1
  3551  037D  082A               	movf	??_USART_Init,w
  3552  037E  00F0               	movwf	___aldiv@divisor
  3553  037F  3000               	movlw	0
  3554  0380  00AE               	movwf	??_USART_Init+4
  3555  0381  3012               	movlw	18
  3556  0382  00AF               	movwf	??_USART_Init+5
  3557  0383  307A               	movlw	122
  3558  0384  00B0               	movwf	??_USART_Init+6
  3559  0385  3000               	movlw	0
  3560  0386  00B1               	movwf	??_USART_Init+7
  3561  0387  0826               	movf	USART_Init@baud,w
  3562  0388  00B2               	movwf	??_USART_Init+8
  3563  0389  0827               	movf	USART_Init@baud+1,w
  3564  038A  00B3               	movwf	??_USART_Init+9
  3565  038B  0828               	movf	USART_Init@baud+2,w
  3566  038C  00B4               	movwf	??_USART_Init+10
  3567  038D  0829               	movf	USART_Init@baud+3,w
  3568  038E  00B5               	movwf	??_USART_Init+11
  3569  038F  3006               	movlw	6
  3570  0390                     u1705:	
  3571  0390  1003               	clrc
  3572  0391  0DB2               	rlf	??_USART_Init+8,f
  3573  0392  0DB3               	rlf	??_USART_Init+9,f
  3574  0393  0DB4               	rlf	??_USART_Init+10,f
  3575  0394  0DB5               	rlf	??_USART_Init+11,f
  3576  0395  3EFF               	addlw	-1
  3577  0396  1D03               	skipz
  3578  0397  2B90               	goto	u1705
  3579  0398  09B2               	comf	??_USART_Init+8,f
  3580  0399  09B3               	comf	??_USART_Init+9,f
  3581  039A  09B4               	comf	??_USART_Init+10,f
  3582  039B  09B5               	comf	??_USART_Init+11,f
  3583  039C  0AB2               	incf	??_USART_Init+8,f
  3584  039D  1903               	skipnz
  3585  039E  0AB3               	incf	??_USART_Init+9,f
  3586  039F  1903               	skipnz
  3587  03A0  0AB4               	incf	??_USART_Init+10,f
  3588  03A1  1903               	skipnz
  3589  03A2  0AB5               	incf	??_USART_Init+11,f
  3590  03A3  0832               	movf	??_USART_Init+8,w
  3591  03A4  07AE               	addwf	??_USART_Init+4,f
  3592  03A5  0833               	movf	??_USART_Init+9,w
  3593  03A6  1803               	skipnc
  3594  03A7  0F33               	incfsz	??_USART_Init+9,w
  3595  03A8  2BAA               	goto	u1710
  3596  03A9  2BAB               	goto	u1711
  3597  03AA                     u1710:	
  3598  03AA  07AF               	addwf	??_USART_Init+5,f
  3599  03AB                     u1711:	
  3600  03AB  0834               	movf	??_USART_Init+10,w
  3601  03AC  1803               	skipnc
  3602  03AD  0F34               	incfsz	??_USART_Init+10,w
  3603  03AE  2BB0               	goto	u1712
  3604  03AF  2BB1               	goto	u1713
  3605  03B0                     u1712:	
  3606  03B0  07B0               	addwf	??_USART_Init+6,f
  3607  03B1                     u1713:	
  3608  03B1  0835               	movf	??_USART_Init+11,w
  3609  03B2  1803               	skipnc
  3610  03B3  0A35               	incf	??_USART_Init+11,w
  3611  03B4  07B1               	addwf	??_USART_Init+7,f
  3612  03B5  0831               	movf	??_USART_Init+7,w
  3613  03B6  00F7               	movwf	___aldiv@dividend+3
  3614  03B7  0830               	movf	??_USART_Init+6,w
  3615  03B8  00F6               	movwf	___aldiv@dividend+2
  3616  03B9  082F               	movf	??_USART_Init+5,w
  3617  03BA  00F5               	movwf	___aldiv@dividend+1
  3618  03BB  082E               	movf	??_USART_Init+4,w
  3619  03BC  00F4               	movwf	___aldiv@dividend
  3620  03BD  120A  118A  22D5  120A  118A  	fcall	___aldiv
  3621  03C2  0871               	movf	?___aldiv+1,w
  3622  03C3  00FA               	movwf	USART_Init@x+1
  3623  03C4  0870               	movf	?___aldiv,w
  3624  03C5  00F9               	movwf	USART_Init@x
  3625                           
  3626                           ;USART.c: 12: if(x>255)
  3627  03C6  3001               	movlw	1
  3628  03C7  027A               	subwf	USART_Init@x+1,w
  3629  03C8  3000               	movlw	0
  3630  03C9  1903               	skipnz
  3631  03CA  0279               	subwf	USART_Init@x,w
  3632  03CB  1C03               	skipc
  3633  03CC  2C32               	goto	l1640
  3634                           
  3635                           ;USART.c: 13: {
  3636                           ;USART.c: 14: x = (8000000 - baud*16)/(baud*16);
  3637  03CD  1283               	bcf	3,5	;RP0=0, select bank0
  3638  03CE  1303               	bcf	3,6	;RP1=0, select bank0
  3639  03CF  0826               	movf	USART_Init@baud,w
  3640  03D0  00AA               	movwf	??_USART_Init
  3641  03D1  0827               	movf	USART_Init@baud+1,w
  3642  03D2  00AB               	movwf	??_USART_Init+1
  3643  03D3  0828               	movf	USART_Init@baud+2,w
  3644  03D4  00AC               	movwf	??_USART_Init+2
  3645  03D5  0829               	movf	USART_Init@baud+3,w
  3646  03D6  00AD               	movwf	??_USART_Init+3
  3647  03D7  3004               	movlw	4
  3648  03D8                     u1735:	
  3649  03D8  1003               	clrc
  3650  03D9  0DAA               	rlf	??_USART_Init,f
  3651  03DA  0DAB               	rlf	??_USART_Init+1,f
  3652  03DB  0DAC               	rlf	??_USART_Init+2,f
  3653  03DC  0DAD               	rlf	??_USART_Init+3,f
  3654  03DD  3EFF               	addlw	-1
  3655  03DE  1D03               	skipz
  3656  03DF  2BD8               	goto	u1735
  3657  03E0  082D               	movf	??_USART_Init+3,w
  3658  03E1  00F3               	movwf	___aldiv@divisor+3
  3659  03E2  082C               	movf	??_USART_Init+2,w
  3660  03E3  00F2               	movwf	___aldiv@divisor+2
  3661  03E4  082B               	movf	??_USART_Init+1,w
  3662  03E5  00F1               	movwf	___aldiv@divisor+1
  3663  03E6  082A               	movf	??_USART_Init,w
  3664  03E7  00F0               	movwf	___aldiv@divisor
  3665  03E8  3000               	movlw	0
  3666  03E9  00AE               	movwf	??_USART_Init+4
  3667  03EA  3012               	movlw	18
  3668  03EB  00AF               	movwf	??_USART_Init+5
  3669  03EC  307A               	movlw	122
  3670  03ED  00B0               	movwf	??_USART_Init+6
  3671  03EE  3000               	movlw	0
  3672  03EF  00B1               	movwf	??_USART_Init+7
  3673  03F0  0826               	movf	USART_Init@baud,w
  3674  03F1  00B2               	movwf	??_USART_Init+8
  3675  03F2  0827               	movf	USART_Init@baud+1,w
  3676  03F3  00B3               	movwf	??_USART_Init+9
  3677  03F4  0828               	movf	USART_Init@baud+2,w
  3678  03F5  00B4               	movwf	??_USART_Init+10
  3679  03F6  0829               	movf	USART_Init@baud+3,w
  3680  03F7  00B5               	movwf	??_USART_Init+11
  3681  03F8  3004               	movlw	4
  3682  03F9                     u1745:	
  3683  03F9  1003               	clrc
  3684  03FA  0DB2               	rlf	??_USART_Init+8,f
  3685  03FB  0DB3               	rlf	??_USART_Init+9,f
  3686  03FC  0DB4               	rlf	??_USART_Init+10,f
  3687  03FD  0DB5               	rlf	??_USART_Init+11,f
  3688  03FE  3EFF               	addlw	-1
  3689  03FF  1D03               	skipz
  3690  0400  2BF9               	goto	u1745
  3691  0401  09B2               	comf	??_USART_Init+8,f
  3692  0402  09B3               	comf	??_USART_Init+9,f
  3693  0403  09B4               	comf	??_USART_Init+10,f
  3694  0404  09B5               	comf	??_USART_Init+11,f
  3695  0405  0AB2               	incf	??_USART_Init+8,f
  3696  0406  1903               	skipnz
  3697  0407  0AB3               	incf	??_USART_Init+9,f
  3698  0408  1903               	skipnz
  3699  0409  0AB4               	incf	??_USART_Init+10,f
  3700  040A  1903               	skipnz
  3701  040B  0AB5               	incf	??_USART_Init+11,f
  3702  040C  0832               	movf	??_USART_Init+8,w
  3703  040D  07AE               	addwf	??_USART_Init+4,f
  3704  040E  0833               	movf	??_USART_Init+9,w
  3705  040F  1803               	skipnc
  3706  0410  0F33               	incfsz	??_USART_Init+9,w
  3707  0411  2C13               	goto	u1750
  3708  0412  2C14               	goto	u1751
  3709  0413                     u1750:	
  3710  0413  07AF               	addwf	??_USART_Init+5,f
  3711  0414                     u1751:	
  3712  0414  0834               	movf	??_USART_Init+10,w
  3713  0415  1803               	skipnc
  3714  0416  0F34               	incfsz	??_USART_Init+10,w
  3715  0417  2C19               	goto	u1752
  3716  0418  2C1A               	goto	u1753
  3717  0419                     u1752:	
  3718  0419  07B0               	addwf	??_USART_Init+6,f
  3719  041A                     u1753:	
  3720  041A  0835               	movf	??_USART_Init+11,w
  3721  041B  1803               	skipnc
  3722  041C  0A35               	incf	??_USART_Init+11,w
  3723  041D  07B1               	addwf	??_USART_Init+7,f
  3724  041E  0831               	movf	??_USART_Init+7,w
  3725  041F  00F7               	movwf	___aldiv@dividend+3
  3726  0420  0830               	movf	??_USART_Init+6,w
  3727  0421  00F6               	movwf	___aldiv@dividend+2
  3728  0422  082F               	movf	??_USART_Init+5,w
  3729  0423  00F5               	movwf	___aldiv@dividend+1
  3730  0424  082E               	movf	??_USART_Init+4,w
  3731  0425  00F4               	movwf	___aldiv@dividend
  3732  0426  120A  118A  22D5  120A  118A  	fcall	___aldiv
  3733  042B  0871               	movf	?___aldiv+1,w
  3734  042C  00FA               	movwf	USART_Init@x+1
  3735  042D  0870               	movf	?___aldiv,w
  3736  042E  00F9               	movwf	USART_Init@x
  3737                           
  3738                           ;USART.c: 15: BRGH = 1;
  3739  042F  1683               	bsf	3,5	;RP0=1, select bank1
  3740  0430  1303               	bcf	3,6	;RP1=0, select bank1
  3741  0431  1518               	bsf	24,2	;volatile
  3742  0432                     l1640:	
  3743                           
  3744                           ;USART.c: 16: }
  3745                           ;USART.c: 17: if(x<256)
  3746  0432  3001               	movlw	1
  3747  0433  027A               	subwf	USART_Init@x+1,w
  3748  0434  3000               	movlw	0
  3749  0435  1903               	skipnz
  3750  0436  0279               	subwf	USART_Init@x,w
  3751  0437  1803               	skipnc
  3752  0438  2C4D               	goto	l1658
  3753                           
  3754                           ;USART.c: 18: {
  3755                           ;USART.c: 19: SPBRG = x;
  3756  0439  0879               	movf	USART_Init@x,w
  3757  043A  1683               	bsf	3,5	;RP0=1, select bank1
  3758  043B  1303               	bcf	3,6	;RP1=0, select bank1
  3759  043C  0099               	movwf	25	;volatile
  3760                           
  3761                           ;USART.c: 20: SYNC=0;
  3762  043D  1218               	bcf	24,4	;volatile
  3763                           
  3764                           ;USART.c: 21: SPEN=1;
  3765  043E  1283               	bcf	3,5	;RP0=0, select bank0
  3766  043F  1303               	bcf	3,6	;RP1=0, select bank0
  3767  0440  1798               	bsf	24,7	;volatile
  3768                           
  3769                           ;USART.c: 22: TRISC7=1;
  3770  0441  1683               	bsf	3,5	;RP0=1, select bank1
  3771  0442  1303               	bcf	3,6	;RP1=0, select bank1
  3772  0443  1787               	bsf	7,7	;volatile
  3773                           
  3774                           ;USART.c: 23: TRISC6=0;
  3775  0444  1307               	bcf	7,6	;volatile
  3776                           
  3777                           ;USART.c: 24: CREN=1;
  3778  0445  1283               	bcf	3,5	;RP0=0, select bank0
  3779  0446  1303               	bcf	3,6	;RP1=0, select bank0
  3780  0447  1618               	bsf	24,4	;volatile
  3781                           
  3782                           ;USART.c: 25: TXEN = 1;
  3783  0448  1683               	bsf	3,5	;RP0=1, select bank1
  3784  0449  1303               	bcf	3,6	;RP1=0, select bank1
  3785  044A  1698               	bsf	24,5	;volatile
  3786                           
  3787                           ;USART.c: 26: return 1;
  3788  044B  3001               	movlw	1
  3789  044C  0008               	return
  3790  044D                     l1658:	
  3791                           
  3792                           ;USART.c: 27: }
  3793                           ;USART.c: 28: return 0;
  3794  044D  3000               	movlw	0
  3795  044E  0008               	return
  3796  044F                     __end_of_USART_Init:	
  3797                           
  3798                           	psect	text17
  3799  02D5                     __ptext17:	
  3800 ;; *************** function ___aldiv *****************
  3801 ;; Defined at:
  3802 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;  divisor         4    0[COMMON] long 
  3805 ;;  dividend        4    4[COMMON] long 
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;  quotient        4    2[BANK0 ] long 
  3808 ;;  sign            1    1[BANK0 ] unsigned char 
  3809 ;;  counter         1    0[BANK0 ] unsigned char 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  4    0[COMMON] long 
  3812 ;; Registers used:
  3813 ;;		wreg, status,2, status,0
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3819 ;;      Params:         8       0       0       0       0
  3820 ;;      Locals:         0       6       0       0       0
  3821 ;;      Temps:          1       0       0       0       0
  3822 ;;      Totals:         9       6       0       0       0
  3823 ;;Total ram usage:       15 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; This function calls:
  3826 ;;		Nothing
  3827 ;; This function is called by:
  3828 ;;		_USART_Init
  3829 ;; This function uses a non-reentrant model
  3830 ;;
  3831                           
  3832                           
  3833                           ;psect for function ___aldiv
  3834  02D5                     ___aldiv:	
  3835                           
  3836                           ;incstack = 0
  3837                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3838  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  3839  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  3840  02D7  01A1               	clrf	___aldiv@sign
  3841  02D8  1FF3               	btfss	___aldiv@divisor+3,7
  3842  02D9  2AE7               	goto	l382
  3843  02DA  09F0               	comf	___aldiv@divisor,f
  3844  02DB  09F1               	comf	___aldiv@divisor+1,f
  3845  02DC  09F2               	comf	___aldiv@divisor+2,f
  3846  02DD  09F3               	comf	___aldiv@divisor+3,f
  3847  02DE  0AF0               	incf	___aldiv@divisor,f
  3848  02DF  1903               	skipnz
  3849  02E0  0AF1               	incf	___aldiv@divisor+1,f
  3850  02E1  1903               	skipnz
  3851  02E2  0AF2               	incf	___aldiv@divisor+2,f
  3852  02E3  1903               	skipnz
  3853  02E4  0AF3               	incf	___aldiv@divisor+3,f
  3854  02E5  01A1               	clrf	___aldiv@sign
  3855  02E6  0AA1               	incf	___aldiv@sign,f
  3856  02E7                     l382:	
  3857  02E7  1FF7               	btfss	___aldiv@dividend+3,7
  3858  02E8  2AF8               	goto	l1602
  3859  02E9  09F4               	comf	___aldiv@dividend,f
  3860  02EA  09F5               	comf	___aldiv@dividend+1,f
  3861  02EB  09F6               	comf	___aldiv@dividend+2,f
  3862  02EC  09F7               	comf	___aldiv@dividend+3,f
  3863  02ED  0AF4               	incf	___aldiv@dividend,f
  3864  02EE  1903               	skipnz
  3865  02EF  0AF5               	incf	___aldiv@dividend+1,f
  3866  02F0  1903               	skipnz
  3867  02F1  0AF6               	incf	___aldiv@dividend+2,f
  3868  02F2  1903               	skipnz
  3869  02F3  0AF7               	incf	___aldiv@dividend+3,f
  3870  02F4  3001               	movlw	1
  3871  02F5  00F8               	movwf	??___aldiv
  3872  02F6  0878               	movf	??___aldiv,w
  3873  02F7  06A1               	xorwf	___aldiv@sign,f
  3874  02F8                     l1602:	
  3875  02F8  3000               	movlw	0
  3876  02F9  00A5               	movwf	___aldiv@quotient+3
  3877  02FA  3000               	movlw	0
  3878  02FB  00A4               	movwf	___aldiv@quotient+2
  3879  02FC  3000               	movlw	0
  3880  02FD  00A3               	movwf	___aldiv@quotient+1
  3881  02FE  3000               	movlw	0
  3882  02FF  00A2               	movwf	___aldiv@quotient
  3883  0300  0873               	movf	___aldiv@divisor+3,w
  3884  0301  0472               	iorwf	___aldiv@divisor+2,w
  3885  0302  0471               	iorwf	___aldiv@divisor+1,w
  3886  0303  0470               	iorwf	___aldiv@divisor,w
  3887  0304  1903               	skipnz
  3888  0305  2B4D               	goto	l1624
  3889  0306  01A0               	clrf	___aldiv@counter
  3890  0307  0AA0               	incf	___aldiv@counter,f
  3891  0308                     l1610:	
  3892  0308  1BF3               	btfsc	___aldiv@divisor+3,7
  3893  0309  2B18               	goto	l1612
  3894  030A  3001               	movlw	1
  3895  030B  00F8               	movwf	??___aldiv
  3896  030C                     u1625:	
  3897  030C  1003               	clrc
  3898  030D  0DF0               	rlf	___aldiv@divisor,f
  3899  030E  0DF1               	rlf	___aldiv@divisor+1,f
  3900  030F  0DF2               	rlf	___aldiv@divisor+2,f
  3901  0310  0DF3               	rlf	___aldiv@divisor+3,f
  3902  0311  0BF8               	decfsz	??___aldiv,f
  3903  0312  2B0C               	goto	u1625
  3904  0313  3001               	movlw	1
  3905  0314  00F8               	movwf	??___aldiv
  3906  0315  0878               	movf	??___aldiv,w
  3907  0316  07A0               	addwf	___aldiv@counter,f
  3908  0317  2B08               	goto	l1610
  3909  0318                     l1612:	
  3910  0318  3001               	movlw	1
  3911  0319  00F8               	movwf	??___aldiv
  3912  031A                     u1645:	
  3913  031A  1003               	clrc
  3914  031B  0DA2               	rlf	___aldiv@quotient,f
  3915  031C  0DA3               	rlf	___aldiv@quotient+1,f
  3916  031D  0DA4               	rlf	___aldiv@quotient+2,f
  3917  031E  0DA5               	rlf	___aldiv@quotient+3,f
  3918  031F  0BF8               	decfsz	??___aldiv,f
  3919  0320  2B1A               	goto	u1645
  3920  0321  0873               	movf	___aldiv@divisor+3,w
  3921  0322  0277               	subwf	___aldiv@dividend+3,w
  3922  0323  1D03               	skipz
  3923  0324  2B2F               	goto	u1655
  3924  0325  0872               	movf	___aldiv@divisor+2,w
  3925  0326  0276               	subwf	___aldiv@dividend+2,w
  3926  0327  1D03               	skipz
  3927  0328  2B2F               	goto	u1655
  3928  0329  0871               	movf	___aldiv@divisor+1,w
  3929  032A  0275               	subwf	___aldiv@dividend+1,w
  3930  032B  1D03               	skipz
  3931  032C  2B2F               	goto	u1655
  3932  032D  0870               	movf	___aldiv@divisor,w
  3933  032E  0274               	subwf	___aldiv@dividend,w
  3934  032F                     u1655:	
  3935  032F  1C03               	skipc
  3936  0330  2B40               	goto	l1620
  3937  0331  0870               	movf	___aldiv@divisor,w
  3938  0332  02F4               	subwf	___aldiv@dividend,f
  3939  0333  0871               	movf	___aldiv@divisor+1,w
  3940  0334  1C03               	skipc
  3941  0335  0F71               	incfsz	___aldiv@divisor+1,w
  3942  0336  02F5               	subwf	___aldiv@dividend+1,f
  3943  0337  0872               	movf	___aldiv@divisor+2,w
  3944  0338  1C03               	skipc
  3945  0339  0F72               	incfsz	___aldiv@divisor+2,w
  3946  033A  02F6               	subwf	___aldiv@dividend+2,f
  3947  033B  0873               	movf	___aldiv@divisor+3,w
  3948  033C  1C03               	skipc
  3949  033D  0F73               	incfsz	___aldiv@divisor+3,w
  3950  033E  02F7               	subwf	___aldiv@dividend+3,f
  3951  033F  1422               	bsf	___aldiv@quotient,0
  3952  0340                     l1620:	
  3953  0340  3001               	movlw	1
  3954  0341                     u1665:	
  3955  0341  1003               	clrc
  3956  0342  0CF3               	rrf	___aldiv@divisor+3,f
  3957  0343  0CF2               	rrf	___aldiv@divisor+2,f
  3958  0344  0CF1               	rrf	___aldiv@divisor+1,f
  3959  0345  0CF0               	rrf	___aldiv@divisor,f
  3960  0346  3EFF               	addlw	-1
  3961  0347  1D03               	skipz
  3962  0348  2B41               	goto	u1665
  3963  0349  3001               	movlw	1
  3964  034A  02A0               	subwf	___aldiv@counter,f
  3965  034B  1D03               	btfss	3,2
  3966  034C  2B18               	goto	l1612
  3967  034D                     l1624:	
  3968  034D  0821               	movf	___aldiv@sign,w
  3969  034E  1903               	btfsc	3,2
  3970  034F  2B5B               	goto	l1628
  3971  0350  09A2               	comf	___aldiv@quotient,f
  3972  0351  09A3               	comf	___aldiv@quotient+1,f
  3973  0352  09A4               	comf	___aldiv@quotient+2,f
  3974  0353  09A5               	comf	___aldiv@quotient+3,f
  3975  0354  0AA2               	incf	___aldiv@quotient,f
  3976  0355  1903               	skipnz
  3977  0356  0AA3               	incf	___aldiv@quotient+1,f
  3978  0357  1903               	skipnz
  3979  0358  0AA4               	incf	___aldiv@quotient+2,f
  3980  0359  1903               	skipnz
  3981  035A  0AA5               	incf	___aldiv@quotient+3,f
  3982  035B                     l1628:	
  3983  035B  0825               	movf	___aldiv@quotient+3,w
  3984  035C  00F3               	movwf	?___aldiv+3
  3985  035D  0824               	movf	___aldiv@quotient+2,w
  3986  035E  00F2               	movwf	?___aldiv+2
  3987  035F  0823               	movf	___aldiv@quotient+1,w
  3988  0360  00F1               	movwf	?___aldiv+1
  3989  0361  0822               	movf	___aldiv@quotient,w
  3990  0362  00F0               	movwf	?___aldiv
  3991  0363  0008               	return
  3992  0364                     __end_of___aldiv:	
  3993  007E                     btemp	set	126	;btemp
  3994  007E                     wtemp0	set	126


Data Sizes:
    Strings     146
    Constant    18
    Data        1
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     69      72
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_10(CODE[21]), STR_9(CODE[13]), STR_8(CODE[20]), STR_7(CODE[13]), 
		 -> STR_6(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 30
		 -> read_meas@s(BANK0[30]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Usart_PrintString@Text	PTR unsigned char  size(2) Largest target is 30
		 -> STR_11(CODE[1]), read_meas@s(BANK0[30]), STR_5(CODE[5]), STR_4(CODE[12]), 
		 -> STR_3(CODE[18]), STR_2(CODE[18]), STR_1(CODE[16]), 

    OneWire_command@id	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    w1_rom_search@id	PTR unsigned char  size(1) Largest target is 8
		 -> read_meas@id(BANK0[8]), 


Critical Paths under _main in COMMON

    _start_meas->_OneWire_command
    _OneWire_command->_OneWire_Byte_Write
    _w1_rom_search->_OneWire_Byte_Write
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Usart_PrintString->_Transmit_char
    _OneWire_Byte_Read->_OneWire_Byte_Write
    _OneWire_Byte_Write->_OneWire_Bit_IO
    _USART_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_read_meas
    _read_meas->_sprintf
    _USART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    7868
                                             65 BANK0      4     4      0
                         _USART_Init
                  _Usart_PrintString
                          _read_meas
                         _start_meas
 ---------------------------------------------------------------------------------
 (1) _start_meas                                           0     0      0    1000
                    _OneWire_command
                  _Usart_PrintString
 ---------------------------------------------------------------------------------
 (2) _OneWire_command                                      4     3      1     304
                                              9 COMMON     4     3      1
                 _OneWire_Byte_Write
                      _OneWire_reset
 ---------------------------------------------------------------------------------
 (1) _read_meas                                           47    47      0    5450
                                             18 BANK0     47    47      0
                  _OneWire_Byte_Read
                 _OneWire_Byte_Write
                  _Usart_PrintString
                            ___lwdiv
                            _sprintf
                      _w1_rom_search
 ---------------------------------------------------------------------------------
 (2) _w1_rom_search                                        7     6      1     597
                                              9 COMMON     2     1      1
                                              0 BANK0      5     5      0
                     _OneWire_Bit_IO
                 _OneWire_Byte_Write
                      _OneWire_reset
 ---------------------------------------------------------------------------------
 (3) _OneWire_reset                                        3     3      0      24
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26    21      5    2674
                                              0 BANK0     18    13      5
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     586
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Usart_PrintString                                    4     2      2     696
                                              1 COMMON     4     2      2
                      _Transmit_char
 ---------------------------------------------------------------------------------
 (3) _Transmit_char                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OneWire_Byte_Read                                    2     0      2     137
                                              9 COMMON     2     0      2
                 _OneWire_Byte_Write
 ---------------------------------------------------------------------------------
 (3) _OneWire_Byte_Write                                   7     5      2     137
                                              2 COMMON     7     5      2
                     _OneWire_Bit_IO
 ---------------------------------------------------------------------------------
 (4) _OneWire_Bit_IO                                       2     2      0      45
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                          18    14      4     721
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Init
     ___aldiv
   _Usart_PrintString
     _Transmit_char
   _read_meas
     _OneWire_Byte_Read
       _OneWire_Byte_Write
         _OneWire_Bit_IO
     _OneWire_Byte_Write
       _OneWire_Bit_IO
     _Usart_PrintString
       _Transmit_char
     ___lwdiv
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _w1_rom_search
       _OneWire_Bit_IO
       _OneWire_Byte_Write
         _OneWire_Bit_IO
       _OneWire_reset
   _start_meas
     _OneWire_command
       _OneWire_Byte_Write
         _OneWire_Bit_IO
       _OneWire_reset
     _Usart_PrintString
       _Transmit_char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     45      48       5       90.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      56      12        0.0%
ABS                  0      0      56       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Wed Feb 28 21:32:21 2018

                          pc 0002                           l59 02AD                           l68 0176  
                         fsr 0004          ___wmul@multiplicand 0072                          l108 04F5  
                        l213 06A3                          l205 067A                          l222 0702  
                        l207 0659                          l218 06C7                          l148 00B9  
                        l327 0109                          l193 05FC                          l382 02E7  
                        _RB0 0030                          u994 01CC                          u995 01CA  
                        fsr0 0004                          indf 0000                         l1312 0FE6  
                       l1402 027C                         l1252 00CD                         l1340 01EA  
                       l1500 0696                         l1404 0280                         l1342 01F8  
                       l1318 0101                         l1414 029B                         l1352 0219  
                       l1280 01E0                         l1432 02C6                         l1424 02B3  
                       l1610 0308                         l1602 02F8                         l1370 019D  
                       l1450 015E                         l1620 0340                         l1612 0318  
                       l1348 020E                         l1364 0181                         l1700 049E  
                       l1286 00E4                         l1366 018F                         l1374 01A8  
                       l1526 06EB                         l1624 034D                         l1640 0432  
                       l1384 0122                         l1536 0721                         l1528 06F4  
                       l1472 0601                         l1456 0170                         l1570 0779  
                       l1562 0765                         l1546 0736                         l1554 074C  
                       l1538 0725                         l1474 060C                         l1466 05F8  
                       l1722 0503                         l1706 04C6                         l1628 035B  
                       l1572 07A7                         l1580 07D3                         l1556 0750  
                       l1396 026F                         l1732 0558                         l1478 061E  
                       l1718 04F8                         l1750 05C4                         l1670 0FF8  
                       l1584 07DE                         l1568 0774                         l1488 065D  
                       l1736 0565                         l1752 05C9                         l1658 044D  
                       l1586 05D8                         l1588 07EF                         l1748 05BA  
                       l1692 048E                         l1684 0474                         l1678 0458  
                       l1758 023B                         l1688 0484                         STR_1 0083  
                       STR_2 004E                         STR_3 0060                         STR_4 00A0  
                       STR_5 00B2                         STR_6 00AC                         STR_7 0093  
                       STR_8 003A                         STR_9 0093                         _BRGH 04C2  
                       _CREN 00C4                         u1115 01ED                         u1205 0195  
                       u1135 01F9                         u1215 019E                         u1145 0205  
                       u1155 020F                         u1075 010A                         u1085 0111  
                       u1185 0184                         u1425 06C0                         u1710 03AA  
                       u1711 03AB                         u1455 06E4                         u1712 03B0  
                       u1625 030C                         u1713 03B1                         u1705 0390  
                       u1645 031A                         u1750 0413                         u1655 032F  
                       u1751 0414                         u1735 03D8                         u1495 0711  
                       u1752 0419                         u1665 0341                         u1753 041A  
                       u1745 03F9                         u1917 0248                         u1695 036F  
                       u1927 025B                         u1937 01B5                         u1947 01BF  
                       u1875 04FD                         u1957 01D6                         u1967 00CF  
                       u1895 055F                         u1977 00D7                         _RCIF 0065  
                       _SPEN 00C7                         _ZNAK 0067                         _TRMT 04C1  
                       _TXEN 04C5                         _SYNC 04C4                         _main 021E  
                       _temp 0065                         btemp 007E                         start 0000  
              _w1_rom_search 0262              __end_of___aldiv 0364                        ?_main 0070  
                      STR_10 0025                        STR_11 005F                        STR_12 0072  
            __end_of___lwdiv 021E              __end_of___lwmod 01AD                        _RCREG 001A  
                      _SPBRG 0099                        _PORTB 0006                        _TXREG 0019  
            __end_of_dpowers 001D              __end_of_isdigit 0FE8                        main@s 0064  
                      pclath 000A              ??_Transmit_char 0070                        status 0003  
                      wtemp0 007E              __end_of_sprintf 07F6              _OneWire_command 014B  
                ?_USART_Init 0026               ?_w1_rom_search 0079              __initialization 07F6  
               __end_of_main 0262                       ??_main 0061  __size_of_OneWire_Byte_Write 0020  
     __size_of_OneWire_reset 0035                       _TRISB0 0430                       _TRISC6 043E  
                     _TRISC7 043F                    ??___aldiv 0078                       ___wmul 00FF  
                  ??___lwdiv 0074                    ??___lwmod 007C        Usart_PrintString@Text 0071  
          _Usart_PrintString 0120                    ??_isdigit 0070           ?_Usart_PrintString 0071  
        __size_of_USART_Init 00EB                  read_meas@id 0055                    ??_sprintf 0025  
    __end_of_OneWire_command 017B          ??_Usart_PrintString 0073      __end_of__initialization 07FC  
            OneWire_Bit_IO@b 0071              ??_w1_rom_search 007A               __pcstackCOMMON 0070  
               __pidataBANK0 00B7    __end_of_Usart_PrintString 014B                _OneWire_reset 01AD  
               sprintf@width 002E                   __pbssBANK0 0065                _read_meas$628 005D  
         __size_of_read_meas 0182                   __pmaintext 021E            OneWire_command@id 0079  
                    ?___wmul 0070      __size_of_OneWire_Bit_IO 001D               ?_OneWire_reset 0070  
                 __stringtab 0003             ?_OneWire_command 0079            _OneWire_Byte_Read 0FD1  
               ??_USART_Init 002A           ?_OneWire_Byte_Read 0079                      ___aldiv 02D5  
            __size_of___wmul 0021                      ___lwdiv 01E2                      ___lwmod 017B  
 __size_of_Usart_PrintString 002B          ??_OneWire_Byte_Read 007B                      __ptext1 0FE8  
                    __ptext2 014B                      __ptext3 044F                      __ptext4 0262  
                    __ptext5 01AD                      __ptext6 05D1                      __ptext7 0FDA  
                    __ptext8 00FF                      __ptext9 017B               USART_Init@baud 0026  
        OneWire_Byte_Write@b 0078          OneWire_Byte_Write@i 0076          OneWire_Byte_Write@j 0077  
          __end_of_hexpowers 0025                      _dpowers 0013                      _isdigit 0FDA  
          __end_of_read_meas 05D1             ___aldiv@dividend 0074           __end_of_USART_Init 044F  
                    _sprintf 05D1         end_of_initialization 07FC    __end_of_OneWire_Byte_Read 0FDA  
      __end_of_Transmit_char 00C2             ___aldiv@quotient 0022              ??_OneWire_reset 0070  
                  _PORTBbits 0006   __end_of_OneWire_Byte_Write 00FF                   _start_meas 0FE8  
         Usart_PrintString@i 0074               _OneWire_Bit_IO 00C2               __end_of___wmul 0120  
          w1_rom_search@diff 0022       w1_rom_search@next_diff 0021                  USART_Init@x 0079  
        start_initialization 07F6   __size_of_OneWire_Byte_Read 0009        __end_of_w1_rom_search 02D5  
     __end_of_OneWire_Bit_IO 00DF                     ??___wmul 0074                  __pdataBANK0 0067  
                 read_meas@i 005F                   read_meas@s 0035                    ___latbits 0002  
              __pcstackBANK0 0020              w1_rom_search@id 0079                  ?_start_meas 0070  
                sprintf@flag 002D                  sprintf@prec 002A             ___lwdiv@dividend 0072  
            ?_OneWire_Bit_IO 0070             OneWire_command@i 007C                     ?___aldiv 0070  
                   ?___lwdiv 0070                     ?___lwmod 0078                    __pstrings 0003  
                   ?_isdigit 0070                    _hexpowers 001D             ___lwdiv@quotient 0075  
                   ?_sprintf 0020                    _read_meas 044F             OneWire_reset@err 0072  
            ___aldiv@divisor 0070              ___aldiv@counter 0020               ___wmul@product 0074  
   __size_of_OneWire_command 0030          __size_of_start_meas 0018                  __stringbase 0012  
          ___wmul@multiplier 0070                   ?_read_meas 0070           _OneWire_Byte_Write 00DF  
        ?_OneWire_Byte_Write 0072             __size_of___aldiv 008F        __end_of_OneWire_reset 01E2  
           __size_of___lwdiv 003C             __size_of___lwmod 0032               w1_rom_search@b 0024  
             w1_rom_search@i 0023               w1_rom_search@j 0020           __end_of__stringtab 0013  
                _isdigit$405 0070                   sprintf@idx 0028                   sprintf@val 002B  
     __size_of_Transmit_char 000A             __size_of_isdigit 000E         ??_OneWire_Byte_Write 0074  
            ___lwdiv@divisor 0070              ___lwdiv@counter 0077                     __ptext10 01E2  
                   __ptext11 0120                     __ptext12 00B8                     __ptext13 0FD1  
                   __ptext14 00DF                     __ptext15 00C2                     __ptext16 0364  
                   __ptext17 02D5             __size_of_sprintf 0225       OneWire_command@command 007B  
              __size_of_main 0044            ??_OneWire_command 007A                     isdigit@c 0071  
                ??_read_meas 0032                 ??_start_meas 007D                    sprintf@ap 0029  
                  sprintf@sp 0030             ___lwmod@dividend 007A             ??_OneWire_Bit_IO 0070  
              _Transmit_char 00B8                    stringcode 000D                read_meas@diff 0060  
              read_meas@byte 0053           __end_of_start_meas 1000                     sprintf@c 0031  
                   sprintf@f 0020              ___lwmod@divisor 0078              ___lwmod@counter 007D  
                   stringdir 000D                     stringtab 0003                 ___aldiv@sign 0021  
          Transmit_char@data 0070       __size_of_w1_rom_search 0073               ?_Transmit_char 0070  
                 _USART_Init 0364  
