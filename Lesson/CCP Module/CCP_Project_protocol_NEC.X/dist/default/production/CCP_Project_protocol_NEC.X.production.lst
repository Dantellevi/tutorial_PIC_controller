

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Apr 20 16:00:05 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 1.45
    31                           ; Generated 16/11/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F877 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  000E                     	;# 
    80  000F                     	;# 
    81  0010                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  0081                     	;# 
   100  0085                     	;# 
   101  0086                     	;# 
   102  0087                     	;# 
   103  0088                     	;# 
   104  0089                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001B                     	;# 
   153  001C                     	;# 
   154  001D                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  0081                     	;# 
   158  0085                     	;# 
   159  0086                     	;# 
   160  0087                     	;# 
   161  0088                     	;# 
   162  0089                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0091                     	;# 
   167  0092                     	;# 
   168  0093                     	;# 
   169  0094                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009E                     	;# 
   173  009F                     	;# 
   174  010C                     	;# 
   175  010D                     	;# 
   176  010E                     	;# 
   177  010F                     	;# 
   178  018C                     	;# 
   179  018D                     	;# 
   180                           
   181                           	psect	strings
   182  0736                     __pstrings:	
   183  0736                     stringtab:	
   184  0736                     __stringtab:	
   185  0736                     stringcode:	
   186                           ;	String table - string pointers are 1 byte each
   187                           
   188  0736                     stringdir:	
   189  0736  3007               	movlw	high stringdir
   190  0737  008A               	movwf	10
   191  0738  0804               	movf	4,w
   192  0739  0A84               	incf	4,f
   193  073A  0782               	addwf	2,f
   194  073B                     __stringbase:	
   195  073B  3400               	retlw	0
   196  073C                     __end_of__stringtab:	
   197  073C                     _octpowers:	
   198  073C  3401               	retlw	1
   199  073D  3400               	retlw	0
   200  073E  3408               	retlw	8
   201  073F  3400               	retlw	0
   202  0740  3440               	retlw	64
   203  0741  3400               	retlw	0
   204  0742  3400               	retlw	0
   205  0743  3402               	retlw	2
   206  0744  3400               	retlw	0
   207  0745  3410               	retlw	16
   208  0746  3400               	retlw	0
   209  0747  3480               	retlw	128
   210  0748                     __end_of_octpowers:	
   211  0748                     _dpowers:	
   212  0748  3401               	retlw	1
   213  0749  3400               	retlw	0
   214  074A  340A               	retlw	10
   215  074B  3400               	retlw	0
   216  074C  3464               	retlw	100
   217  074D  3400               	retlw	0
   218  074E  34E8               	retlw	232
   219  074F  3403               	retlw	3
   220  0750  3410               	retlw	16
   221  0751  3427               	retlw	39
   222  0752                     __end_of_dpowers:	
   223  0752                     _hexpowers:	
   224  0752  3401               	retlw	1
   225  0753  3400               	retlw	0
   226  0754  3410               	retlw	16
   227  0755  3400               	retlw	0
   228  0756  3400               	retlw	0
   229  0757  3401               	retlw	1
   230  0758  3400               	retlw	0
   231  0759  3410               	retlw	16
   232  075A                     __end_of_hexpowers:	
   233  0015                     _CCPR1	set	21
   234  000E                     _TMR1	set	14
   235  0017                     _CCP1CON	set	23
   236  0006                     _PORTBbits	set	6
   237  0008                     _PORTDbits	set	8
   238  005F                     _GIE	set	95
   239  0080                     _TMR1ON	set	128
   240  005E                     _PEIE	set	94
   241  0081                     _TMR1CS	set	129
   242  0085                     _T1CKPS1	set	133
   243  0084                     _T1CKPS0	set	132
   244  0062                     _CCP1IF	set	98
   245  0060                     _TMR1IF	set	96
   246  0088                     _TRISD	set	136
   247  0086                     _TRISB	set	134
   248  043A                     _TRISC2	set	1082
   249  0462                     _CCP1IE	set	1122
   250  0460                     _TMR1IE	set	1120
   251  075A                     STR_3:	
   252  075A  3430               	retlw	48	;'0'
   253  075B  3431               	retlw	49	;'1'
   254  075C  3432               	retlw	50	;'2'
   255  075D  3433               	retlw	51	;'3'
   256  075E  3434               	retlw	52	;'4'
   257  075F  3435               	retlw	53	;'5'
   258  0760  3436               	retlw	54	;'6'
   259  0761  3437               	retlw	55	;'7'
   260  0762  3438               	retlw	56	;'8'
   261  0763  3439               	retlw	57	;'9'
   262  0764  3441               	retlw	65	;'A'
   263  0765  3442               	retlw	66	;'B'
   264  0766  3443               	retlw	67	;'C'
   265  0767  3444               	retlw	68	;'D'
   266  0768  3445               	retlw	69	;'E'
   267  0769  3446               	retlw	70	;'F'
   268  076A  3400               	retlw	0
   269  076B                     STR_4:	
   270  076B  3430               	retlw	48	;'0'
   271  076C  3431               	retlw	49	;'1'
   272  076D  3432               	retlw	50	;'2'
   273  076E  3433               	retlw	51	;'3'
   274  076F  3434               	retlw	52	;'4'
   275  0770  3435               	retlw	53	;'5'
   276  0771  3436               	retlw	54	;'6'
   277  0772  3437               	retlw	55	;'7'
   278  0773  3438               	retlw	56	;'8'
   279  0774  3439               	retlw	57	;'9'
   280  0775  3461               	retlw	97	;'a'
   281  0776  3462               	retlw	98	;'b'
   282  0777  3463               	retlw	99	;'c'
   283  0778  3464               	retlw	100	;'d'
   284  0779  3465               	retlw	101	;'e'
   285  077A  3466               	retlw	102	;'f'
   286  077B  3400               	retlw	0
   287  077C                     STR_1:	
   288  077C  3443               	retlw	67	;'C'
   289  077D  346F               	retlw	111	;'o'
   290  077E  346D               	retlw	109	;'m'
   291  077F  346D               	retlw	109	;'m'
   292  0780  3461               	retlw	97	;'a'
   293  0781  346E               	retlw	110	;'n'
   294  0782  3464               	retlw	100	;'d'
   295  0783  343A               	retlw	58	;':'
   296  0784  3420               	retlw	32	;' '
   297  0785  3430               	retlw	48	;'0'
   298  0786  3478               	retlw	120	;'x'
   299  0787  3430               	retlw	48	;'0'
   300  0788  3432               	retlw	50	;'2'
   301  0789  3458               	retlw	88	;'X'
   302  078A  3400               	retlw	0
   303  078B                     STR_2:	
   304  078B  3441               	retlw	65	;'A'
   305  078C  3464               	retlw	100	;'d'
   306  078D  3464               	retlw	100	;'d'
   307  078E  3472               	retlw	114	;'r'
   308  078F  3465               	retlw	101	;'e'
   309  0790  3473               	retlw	115	;'s'
   310  0791  3473               	retlw	115	;'s'
   311  0792  343A               	retlw	58	;':'
   312  0793  3430               	retlw	48	;'0'
   313  0794  3478               	retlw	120	;'x'
   314  0795  3430               	retlw	48	;'0'
   315  0796  3432               	retlw	50	;'2'
   316  0797  3458               	retlw	88	;'X'
   317  0798  3400               	retlw	0
   318                           
   319                           	psect	cinit
   320  0015                     start_initialization:	
   321                           ; #config settings
   322                           
   323  0015                     __initialization:	
   324                           
   325                           ; Clear objects allocated to COMMON
   326  0015  01F7               	clrf	__pbssCOMMON& (0+127)
   327  0016  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   328  0017  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   329  0018  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   330  0019  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
   331                           
   332                           ; Clear objects allocated to BANK0
   333  001A  1283               	bcf	3,5	;RP0=0, select bank0
   334  001B  1303               	bcf	3,6	;RP1=0, select bank0
   335  001C  01DF               	clrf	__pbssBANK0& (0+127)
   336  001D  01E0               	clrf	(__pbssBANK0+1)& (0+127)
   337  001E  01E1               	clrf	(__pbssBANK0+2)& (0+127)
   338  001F  01E2               	clrf	(__pbssBANK0+3)& (0+127)
   339                           
   340                           ; Clear objects allocated to BANK1
   341  0020  1383               	bcf	3,7	;select IRP bank0
   342  0021  30A0               	movlw	low __pbssBANK1
   343  0022  0084               	movwf	4
   344  0023  30F0               	movlw	low (__pbssBANK1+80)
   345  0024  120A  158A  270C   	fcall	clear_ram0
   346  0027                     end_of_initialization:	
   347                           ;End of C runtime variable initialization code
   348                           
   349  0027                     __end_of__initialization:	
   350  0027  0183               	clrf	3
   351  0028  120A  118A  2EB0   	ljmp	_main	;jump to C main() function
   352                           
   353                           	psect	bssCOMMON
   354  0077                     __pbssCOMMON:	
   355  0077                     _i:	
   356  0077                     	ds	2
   357  0079                     _n:	
   358  0079                     	ds	2
   359  007B                     _lock:	
   360  007B                     	ds	1
   361                           
   362                           	psect	bssBANK0
   363  005F                     __pbssBANK0:	
   364  005F                     _rc_addr_old:	
   365  005F                     	ds	1
   366  0060                     _rc_code_old:	
   367  0060                     	ds	1
   368  0061                     _rc_addr:	
   369  0061                     	ds	1
   370  0062                     _rc_code:	
   371  0062                     	ds	1
   372                           
   373                           	psect	bssBANK1
   374  00A0                     __pbssBANK1:	
   375  00A0                     _result:	
   376  00A0                     	ds	80
   377                           
   378                           	psect	clrtext
   379  0F0C                     clear_ram0:	
   380                           ;	Called with FSR containing the base address, and
   381                           ;	W with the last address+1
   382                           
   383  0F0C  0064               	clrwdt	;clear the watchdog before getting into this loop
   384  0F0D                     clrloop0:	
   385  0F0D  0180               	clrf	0	;clear RAM location pointed to by FSR
   386  0F0E  0A84               	incf	4,f	;increment pointer
   387  0F0F  0604               	xorwf	4,w	;XOR with final address
   388  0F10  1903               	btfsc	3,2	;have we reached the end yet?
   389  0F11  3400               	retlw	0	;all done for this memory range, return
   390  0F12  0604               	xorwf	4,w	;XOR again to restore value
   391  0F13  2F0D               	goto	clrloop0	;do the next byte
   392                           
   393                           	psect	cstackCOMMON
   394  0070                     __pcstackCOMMON:	
   395  0070                     ?_isdigit:	
   396  0070                     ?_Send_Data:	
   397                           ; 1 bit 
   398                           
   399  0070                     ?_Send_command:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_lcd_init:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?_lcd_Print_char:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_isr:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ??_isr:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ?_main:	
   415                           ; 1 bytes @ 0x0
   416                           
   417                           
   418                           ; 1 bytes @ 0x0
   419  0070                     	ds	7
   420                           
   421                           	psect	cstackBANK0
   422  0020                     __pcstackBANK0:	
   423  0020                     ??_isdigit:	
   424  0020                     ??_Send_Data:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0020                     ?___bmul:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0020                     ?___wmul:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0020                     ?___lwdiv:	
   434                           ; 2 bytes @ 0x0
   435                           
   436  0020                     Send_Data@data:	
   437                           ; 2 bytes @ 0x0
   438                           
   439  0020                     ___bmul@multiplicand:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0020                     _isdigit$385:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0020                     ___wmul@multiplier:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0020                     ___lwdiv@divisor:	
   449                           ; 2 bytes @ 0x0
   450                           
   451                           
   452                           ; 2 bytes @ 0x0
   453  0020                     	ds	1
   454  0021                     ??_Send_command:	
   455  0021                     ??_lcd_Print_char:	
   456                           ; 1 bytes @ 0x1
   457                           
   458  0021                     ??___bmul:	
   459                           ; 1 bytes @ 0x1
   460                           
   461  0021                     isdigit@c:	
   462                           ; 1 bytes @ 0x1
   463                           
   464                           
   465                           ; 1 bytes @ 0x1
   466  0021                     	ds	1
   467  0022                     ___bmul@product:	
   468  0022                     ___wmul@multiplicand:	
   469                           ; 1 bytes @ 0x2
   470                           
   471  0022                     ___lwdiv@dividend:	
   472                           ; 2 bytes @ 0x2
   473                           
   474                           
   475                           ; 2 bytes @ 0x2
   476  0022                     	ds	1
   477  0023                     Send_command@com:	
   478  0023                     lcd_Print_char@data:	
   479                           ; 1 bytes @ 0x3
   480                           
   481  0023                     ___bmul@multiplier:	
   482                           ; 1 bytes @ 0x3
   483                           
   484                           
   485                           ; 1 bytes @ 0x3
   486  0023                     	ds	1
   487  0024                     ??_lcd_init:	
   488  0024                     ?_lcd_printString:	
   489                           ; 1 bytes @ 0x4
   490                           
   491  0024                     ?_lcd_gotoxy:	
   492                           ; 1 bytes @ 0x4
   493                           
   494  0024                     ??___wmul:	
   495                           ; 1 bytes @ 0x4
   496                           
   497  0024                     ??___lwdiv:	
   498                           ; 1 bytes @ 0x4
   499                           
   500  0024                     lcd_gotoxy@y:	
   501                           ; 1 bytes @ 0x4
   502                           
   503  0024                     lcd_printString@str:	
   504                           ; 1 bytes @ 0x4
   505                           
   506  0024                     ___wmul@product:	
   507                           ; 2 bytes @ 0x4
   508                           
   509                           
   510                           ; 2 bytes @ 0x4
   511  0024                     	ds	1
   512  0025                     ??_lcd_gotoxy:	
   513  0025                     ___lwdiv@quotient:	
   514                           ; 1 bytes @ 0x5
   515                           
   516                           
   517                           ; 2 bytes @ 0x5
   518  0025                     	ds	1
   519  0026                     ??_lcd_printString:	
   520  0026                     lcd_init@lcd:	
   521                           ; 1 bytes @ 0x6
   522                           
   523  0026                     lcd_gotoxy@x:	
   524                           ; 1 bytes @ 0x6
   525                           
   526                           
   527                           ; 1 bytes @ 0x6
   528  0026                     	ds	1
   529  0027                     lcd_gotoxy@temp:	
   530  0027                     ___lwdiv@counter:	
   531                           ; 1 bytes @ 0x7
   532                           
   533                           
   534                           ; 1 bytes @ 0x7
   535  0027                     	ds	1
   536  0028                     ?_lcd_printStringXY:	
   537  0028                     ?___lwmod:	
   538                           ; 1 bytes @ 0x8
   539                           
   540  0028                     lcd_printStringXY@str:	
   541                           ; 2 bytes @ 0x8
   542                           
   543  0028                     ___lwmod@divisor:	
   544                           ; 2 bytes @ 0x8
   545                           
   546                           
   547                           ; 2 bytes @ 0x8
   548  0028                     	ds	2
   549  002A                     lcd_printStringXY@x:	
   550  002A                     ___lwmod@dividend:	
   551                           ; 1 bytes @ 0xA
   552                           
   553                           
   554                           ; 2 bytes @ 0xA
   555  002A                     	ds	1
   556  002B                     lcd_printStringXY@y:	
   557                           
   558                           ; 1 bytes @ 0xB
   559  002B                     	ds	1
   560  002C                     ??_lcd_printStringXY:	
   561  002C                     ??___lwmod:	
   562                           ; 1 bytes @ 0xC
   563                           
   564                           
   565                           ; 1 bytes @ 0xC
   566  002C                     	ds	1
   567  002D                     ___lwmod@counter:	
   568                           
   569                           ; 1 bytes @ 0xD
   570  002D                     	ds	1
   571  002E                     ?_sprintf:	
   572  002E                     sprintf@f:	
   573                           ; 2 bytes @ 0xE
   574                           
   575                           
   576                           ; 1 bytes @ 0xE
   577  002E                     	ds	3
   578  0031                     ??_sprintf:	
   579                           
   580                           ; 1 bytes @ 0x11
   581  0031                     	ds	3
   582  0034                     sprintf@idx:	
   583                           
   584                           ; 1 bytes @ 0x14
   585  0034                     	ds	1
   586  0035                     _sprintf$192:	
   587                           
   588                           ; 2 bytes @ 0x15
   589  0035                     	ds	2
   590  0037                     _sprintf$193:	
   591                           
   592                           ; 2 bytes @ 0x17
   593  0037                     	ds	2
   594  0039                     sprintf@cp:	
   595                           
   596                           ; 1 bytes @ 0x19
   597  0039                     	ds	1
   598  003A                     _sprintf$199:	
   599                           
   600                           ; 1 bytes @ 0x1A
   601  003A                     	ds	1
   602  003B                     sprintf@len:	
   603                           
   604                           ; 2 bytes @ 0x1B
   605  003B                     	ds	2
   606  003D                     sprintf@ap:	
   607                           
   608                           ; 1 bytes @ 0x1D
   609  003D                     	ds	1
   610  003E                     sprintf@val:	
   611                           
   612                           ; 2 bytes @ 0x1E
   613  003E                     	ds	2
   614  0040                     sprintf@prec:	
   615                           
   616                           ; 1 bytes @ 0x20
   617  0040                     	ds	1
   618  0041                     sprintf@width:	
   619                           
   620                           ; 2 bytes @ 0x21
   621  0041                     	ds	2
   622  0043                     sprintf@c:	
   623                           
   624                           ; 1 bytes @ 0x23
   625  0043                     	ds	1
   626  0044                     sprintf@sp:	
   627                           
   628                           ; 1 bytes @ 0x24
   629  0044                     	ds	1
   630  0045                     sprintf@flag:	
   631                           
   632                           ; 2 bytes @ 0x25
   633  0045                     	ds	2
   634  0047                     ??_main:	
   635                           
   636                           ; 1 bytes @ 0x27
   637  0047                     	ds	3
   638  004A                     main@str1:	
   639                           
   640                           ; 21 bytes @ 0x2A
   641  004A                     	ds	21
   642                           
   643                           	psect	maintext
   644  06B0                     __pmaintext:	
   645 ;;
   646 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   647 ;;
   648 ;; *************** function _main *****************
   649 ;; Defined at:
   650 ;;		line 66 in file "main.c"
   651 ;; Parameters:    Size  Location     Type
   652 ;;		None
   653 ;; Auto vars:     Size  Location     Type
   654 ;;  str1           21   42[BANK0 ] unsigned char [21]
   655 ;; Return value:  Size  Location     Type
   656 ;;                  1    wreg      void 
   657 ;; Registers used:
   658 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   659 ;; Tracked objects:
   660 ;;		On entry : B00/0
   661 ;;		On exit  : 0/0
   662 ;;		Unchanged: 0/0
   663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   664 ;;      Params:         0       0       0       0       0
   665 ;;      Locals:         0      21       0       0       0
   666 ;;      Temps:          0       3       0       0       0
   667 ;;      Totals:         0      24       0       0       0
   668 ;;Total ram usage:       24 bytes
   669 ;; Hardware stack levels required when called:    5
   670 ;; This function calls:
   671 ;;		_lcd_init
   672 ;;		_lcd_printStringXY
   673 ;;		_sprintf
   674 ;; This function is called by:
   675 ;;		Startup code after reset
   676 ;; This function uses a non-reentrant model
   677 ;;
   678                           
   679                           
   680                           ;psect for function _main
   681  06B0                     _main:	
   682                           
   683                           ;main.c: 68: char str1[21];
   684                           ;main.c: 69: TRISC2=1;
   685                           
   686                           ;incstack = 0
   687                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   688  06B0  1683               	bsf	3,5	;RP0=1, select bank1
   689  06B1  1303               	bcf	3,6	;RP1=0, select bank1
   690  06B2  1507               	bsf	7,2	;volatile
   691                           
   692                           ;main.c: 70: CCP1IE=1;
   693  06B3  150C               	bsf	12,2	;volatile
   694                           
   695                           ;main.c: 71: CCP1CON=0x04;
   696  06B4  3004               	movlw	4
   697  06B5  1283               	bcf	3,5	;RP0=0, select bank0
   698  06B6  1303               	bcf	3,6	;RP1=0, select bank0
   699  06B7  0097               	movwf	23	;volatile
   700                           
   701                           ;main.c: 72: CCP1IF=0;
   702  06B8  110C               	bcf	12,2	;volatile
   703                           
   704                           ;main.c: 75: T1CKPS0=1;
   705  06B9  1610               	bsf	16,4	;volatile
   706                           
   707                           ;main.c: 76: T1CKPS1=1;
   708  06BA  1690               	bsf	16,5	;volatile
   709                           
   710                           ;main.c: 79: TMR1CS=0;
   711  06BB  1090               	bcf	16,1	;volatile
   712                           
   713                           ;main.c: 80: TMR1IE=1;
   714  06BC  1683               	bsf	3,5	;RP0=1, select bank1
   715  06BD  1303               	bcf	3,6	;RP1=0, select bank1
   716  06BE  140C               	bsf	12,0	;volatile
   717                           
   718                           ;main.c: 82: PEIE=1;
   719  06BF  170B               	bsf	11,6	;volatile
   720                           
   721                           ;main.c: 83: TMR1ON=1;
   722  06C0  1283               	bcf	3,5	;RP0=0, select bank0
   723  06C1  1303               	bcf	3,6	;RP1=0, select bank0
   724  06C2  1410               	bsf	16,0	;volatile
   725                           
   726                           ;main.c: 84: GIE=1;
   727  06C3  178B               	bsf	11,7	;volatile
   728                           
   729                           ;main.c: 85: lcd_init(0);
   730  06C4  3000               	movlw	0
   731  06C5  120A  118A  24F2  120A  118A  	fcall	_lcd_init
   732  06CA                     l2493:	
   733                           ;main.c: 87: while(1)
   734                           
   735                           
   736                           ;main.c: 88: {
   737                           ;main.c: 89: _delay((unsigned long)((100)*(8000000/4000.0)));
   738  06CA  3002               	movlw	2
   739  06CB  1283               	bcf	3,5	;RP0=0, select bank0
   740  06CC  1303               	bcf	3,6	;RP1=0, select bank0
   741  06CD  00C9               	movwf	??_main+2
   742  06CE  3004               	movlw	4
   743  06CF  00C8               	movwf	??_main+1
   744  06D0  30B9               	movlw	185
   745  06D1  00C7               	movwf	??_main
   746  06D2                     u2927:	
   747  06D2  0BC7               	decfsz	??_main,f
   748  06D3  2ED2               	goto	u2927
   749  06D4  0BC8               	decfsz	??_main+1,f
   750  06D5  2ED2               	goto	u2927
   751  06D6  0BC9               	decfsz	??_main+2,f
   752  06D7  2ED2               	goto	u2927
   753  06D8  2ED9               	nop2
   754                           
   755                           ;main.c: 90: if((rc_code!=rc_code_old)||(rc_addr=rc_addr_old))
   756  06D9  1283               	bcf	3,5	;RP0=0, select bank0
   757  06DA  1303               	bcf	3,6	;RP1=0, select bank0
   758  06DB  0862               	movf	_rc_code,w
   759  06DC  0660               	xorwf	_rc_code_old,w
   760  06DD  1D03               	skipz
   761  06DE  2EE6               	goto	l2499
   762  06DF  085F               	movf	_rc_addr_old,w
   763  06E0  00C7               	movwf	??_main
   764  06E1  0847               	movf	??_main,w
   765  06E2  00E1               	movwf	_rc_addr
   766  06E3  0861               	movf	_rc_addr,w
   767  06E4  1903               	btfsc	3,2
   768  06E5  2ECA               	goto	l2493
   769  06E6                     l2499:	
   770                           
   771                           ;main.c: 91: {
   772                           ;main.c: 92: sprintf(str1,"Command: 0x02X",rc_code);
   773  06E6  3041               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   774  06E7  00C7               	movwf	??_main
   775  06E8  0847               	movf	??_main,w
   776  06E9  00AE               	movwf	sprintf@f
   777  06EA  0862               	movf	_rc_code,w
   778  06EB  00C8               	movwf	??_main+1
   779  06EC  01C9               	clrf	??_main+2
   780  06ED  0848               	movf	??_main+1,w
   781  06EE  00AF               	movwf	?_sprintf+1
   782  06EF  0849               	movf	??_main+2,w
   783  06F0  00B0               	movwf	?_sprintf+2
   784  06F1  304A               	movlw	(low (main@str1| 0))& (0+255)
   785  06F2  120A  118A  202B  120A  118A  	fcall	_sprintf
   786                           
   787                           ;main.c: 93: lcd_printStringXY(2,0,str1);
   788  06F7  3002               	movlw	2
   789  06F8  1283               	bcf	3,5	;RP0=0, select bank0
   790  06F9  1303               	bcf	3,6	;RP1=0, select bank0
   791  06FA  00A8               	movwf	lcd_printStringXY@str
   792  06FB  3000               	movlw	0
   793  06FC  00A9               	movwf	lcd_printStringXY@str+1
   794  06FD  01AA               	clrf	lcd_printStringXY@x
   795  06FE  304A               	movlw	(low main@str1)& (0+255)
   796  06FF  00C7               	movwf	??_main
   797  0700  0847               	movf	??_main,w
   798  0701  00AB               	movwf	lcd_printStringXY@y
   799  0702  120A  158A  2737  120A  118A  	fcall	_lcd_printStringXY
   800                           
   801                           ;main.c: 94: sprintf(str1,"Address:0x02X",rc_addr);
   802  0707  3050               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   803  0708  1283               	bcf	3,5	;RP0=0, select bank0
   804  0709  1303               	bcf	3,6	;RP1=0, select bank0
   805  070A  00C7               	movwf	??_main
   806  070B  0847               	movf	??_main,w
   807  070C  00AE               	movwf	sprintf@f
   808  070D  0861               	movf	_rc_addr,w
   809  070E  00C8               	movwf	??_main+1
   810  070F  01C9               	clrf	??_main+2
   811  0710  0848               	movf	??_main+1,w
   812  0711  00AF               	movwf	?_sprintf+1
   813  0712  0849               	movf	??_main+2,w
   814  0713  00B0               	movwf	?_sprintf+2
   815  0714  304A               	movlw	(low (main@str1| 0))& (0+255)
   816  0715  120A  118A  202B  120A  118A  	fcall	_sprintf
   817                           
   818                           ;main.c: 95: lcd_printStringXY(2,1,str1);
   819  071A  3002               	movlw	2
   820  071B  1283               	bcf	3,5	;RP0=0, select bank0
   821  071C  1303               	bcf	3,6	;RP1=0, select bank0
   822  071D  00A8               	movwf	lcd_printStringXY@str
   823  071E  3000               	movlw	0
   824  071F  00A9               	movwf	lcd_printStringXY@str+1
   825  0720  01AA               	clrf	lcd_printStringXY@x
   826  0721  0AAA               	incf	lcd_printStringXY@x,f
   827  0722  304A               	movlw	(low main@str1)& (0+255)
   828  0723  00C7               	movwf	??_main
   829  0724  0847               	movf	??_main,w
   830  0725  00AB               	movwf	lcd_printStringXY@y
   831  0726  120A  158A  2737  120A  118A  	fcall	_lcd_printStringXY
   832                           
   833                           ;main.c: 96: rc_code_old=rc_code;
   834  072B  1283               	bcf	3,5	;RP0=0, select bank0
   835  072C  1303               	bcf	3,6	;RP1=0, select bank0
   836  072D  0862               	movf	_rc_code,w
   837  072E  00C7               	movwf	??_main
   838  072F  0847               	movf	??_main,w
   839  0730  00E0               	movwf	_rc_code_old
   840                           
   841                           ;main.c: 97: rc_addr_old=rc_addr;
   842  0731  0861               	movf	_rc_addr,w
   843  0732  00C7               	movwf	??_main
   844  0733  0847               	movf	??_main,w
   845  0734  00DF               	movwf	_rc_addr_old
   846  0735  2ECA               	goto	l2493
   847  0736                     __end_of_main:	
   848                           
   849                           	psect	text1
   850  002B                     __ptext1:	
   851 ;; *************** function _sprintf *****************
   852 ;; Defined at:
   853 ;;		line 492 in file "D:\Program Files\Microchip\xc8\v1.45\sources\common\doprnt.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;  sp              1    wreg     PTR unsigned char 
   856 ;;		 -> main@str1(21), 
   857 ;;  f               1   14[BANK0 ] PTR const unsigned char 
   858 ;;		 -> STR_2(14), STR_1(15), 
   859 ;; Auto vars:     Size  Location     Type
   860 ;;  sp              1   36[BANK0 ] PTR unsigned char 
   861 ;;		 -> main@str1(21), 
   862 ;;  idx             1   20[BANK0 ] unsigned char 
   863 ;;  tmpval          4    0        struct .
   864 ;;  flag            2   37[BANK0 ] unsigned short 
   865 ;;  width           2   33[BANK0 ] int 
   866 ;;  val             2   30[BANK0 ] unsigned int 
   867 ;;  len             2   27[BANK0 ] unsigned int 
   868 ;;  c               1   35[BANK0 ] char 
   869 ;;  prec            1   32[BANK0 ] char 
   870 ;;  ap              1   29[BANK0 ] PTR void [1]
   871 ;;		 -> ?_sprintf(2), 
   872 ;;  cp              1   25[BANK0 ] PTR const unsigned char 
   873 ;;		 -> sprintf@c(1), 
   874 ;; Return value:  Size  Location     Type
   875 ;;                  2   14[BANK0 ] int 
   876 ;; Registers used:
   877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   883 ;;      Params:         0       3       0       0       0
   884 ;;      Locals:         0      19       0       0       0
   885 ;;      Temps:          0       3       0       0       0
   886 ;;      Totals:         0      25       0       0       0
   887 ;;Total ram usage:       25 bytes
   888 ;; Hardware stack levels used:    1
   889 ;; Hardware stack levels required when called:    2
   890 ;; This function calls:
   891 ;;		___bmul
   892 ;;		___lwdiv
   893 ;;		___lwmod
   894 ;;		___wmul
   895 ;;		_isdigit
   896 ;; This function is called by:
   897 ;;		_main
   898 ;; This function uses a non-reentrant model
   899 ;;
   900                           
   901                           
   902                           ;psect for function _sprintf
   903  002B                     _sprintf:	
   904                           
   905                           ;incstack = 0
   906                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   907                           ;sprintf@sp stored from wreg
   908  002B  1283               	bcf	3,5	;RP0=0, select bank0
   909  002C  1303               	bcf	3,6	;RP1=0, select bank0
   910  002D  00C4               	movwf	sprintf@sp
   911                           
   912                           ;doprnt.c: 494: va_list ap;
   913                           ;doprnt.c: 499: signed char c;
   914                           ;doprnt.c: 501: int width;
   915                           ;doprnt.c: 506: signed char prec;
   916                           ;doprnt.c: 508: unsigned short flag;
   917                           ;doprnt.c: 523: union {
   918                           ;doprnt.c: 524: unsigned long vd;
   919                           ;doprnt.c: 525: double integ;
   920                           ;doprnt.c: 526: } tmpval;
   921                           ;doprnt.c: 528: unsigned int val;
   922                           ;doprnt.c: 529: unsigned len;
   923                           ;doprnt.c: 530: const char * cp;
   924                           ;doprnt.c: 533: *ap = __va_start();
   925  002E  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   926  002F  00B1               	movwf	??_sprintf
   927  0030  0831               	movf	??_sprintf,w
   928  0031  00BD               	movwf	sprintf@ap
   929  0032                     l2463:	
   930                           ;doprnt.c: 536: while(c = *f++) {
   931                           
   932  0032  3001               	movlw	1
   933  0033  1283               	bcf	3,5	;RP0=0, select bank0
   934  0034  1303               	bcf	3,6	;RP1=0, select bank0
   935  0035  07AE               	addwf	sprintf@f,f
   936  0036  30FF               	movlw	-1
   937  0037  072E               	addwf	sprintf@f,w
   938  0038  0084               	movwf	4
   939  0039  120A  118A  2736  120A  118A  	fcall	stringdir
   940  003E  00B1               	movwf	??_sprintf
   941  003F  0831               	movf	??_sprintf,w
   942  0040  00C3               	movwf	sprintf@c
   943  0041  0843               	movf	sprintf@c,w
   944  0042  1903               	btfsc	3,2
   945  0043  2CED               	goto	l2465
   946                           
   947                           ;doprnt.c: 538: if(c != '%')
   948  0044  3025               	movlw	37
   949  0045  0643               	xorwf	sprintf@c,w
   950  0046  1903               	btfsc	3,2
   951  0047  2854               	goto	l2143
   952                           
   953                           ;doprnt.c: 540: {
   954                           ;doprnt.c: 541: ((*sp++ = (c)));
   955  0048  0843               	movf	sprintf@c,w
   956  0049  00B1               	movwf	??_sprintf
   957  004A  0844               	movf	sprintf@sp,w
   958  004B  0084               	movwf	4
   959  004C  0831               	movf	??_sprintf,w
   960  004D  1383               	bcf	3,7	;select IRP bank0
   961  004E  0080               	movwf	0
   962  004F  3001               	movlw	1
   963  0050  00B1               	movwf	??_sprintf
   964  0051  0831               	movf	??_sprintf,w
   965  0052  07C4               	addwf	sprintf@sp,f
   966                           
   967                           ;doprnt.c: 542: continue;
   968  0053  2832               	goto	l2463
   969  0054                     l2143:	
   970                           
   971                           ;doprnt.c: 543: }
   972                           ;doprnt.c: 546: width = 0;
   973  0054  01C1               	clrf	sprintf@width
   974  0055  01C2               	clrf	sprintf@width+1
   975                           
   976                           ;doprnt.c: 548: flag = 0;
   977  0056  01C5               	clrf	sprintf@flag
   978  0057  01C6               	clrf	sprintf@flag+1
   979                           
   980                           ;doprnt.c: 551: switch(*f) {
   981                           
   982                           ;doprnt.c: 550: for(;;) {
   983  0058  2864               	goto	l2155
   984  0059                     l157:	
   985                           ;doprnt.c: 553: case '-':
   986                           
   987                           
   988                           ;doprnt.c: 554: flag |= 0x08;
   989  0059  15C5               	bsf	sprintf@flag,3
   990  005A  2860               	goto	l2151
   991  005B                     l159:	
   992                           ;doprnt.c: 560: case ' ':
   993                           
   994                           ;doprnt.c: 556: continue;
   995                           
   996                           ;doprnt.c: 555: f++;
   997                           
   998                           
   999                           ;doprnt.c: 561: flag |= 0x01;
  1000  005B  1445               	bsf	sprintf@flag,0
  1001  005C  2860               	goto	l2151
  1002  005D                     l160:	
  1003                           ;doprnt.c: 573: case '#':
  1004                           
  1005                           ;doprnt.c: 563: continue;
  1006                           
  1007                           ;doprnt.c: 562: f++;
  1008                           
  1009                           
  1010                           ;doprnt.c: 574: flag |= 0x800;
  1011  005D  15C6               	bsf	sprintf@flag+1,3
  1012  005E  2860               	goto	l2151
  1013  005F                     l161:	
  1014                           ;doprnt.c: 579: case '0':
  1015                           
  1016                           ;doprnt.c: 576: continue;
  1017                           
  1018                           ;doprnt.c: 575: f++;
  1019                           
  1020                           
  1021                           ;doprnt.c: 580: flag |= 0x04;
  1022  005F  1545               	bsf	sprintf@flag,2
  1023  0060                     l2151:	
  1024                           
  1025                           ;doprnt.c: 581: f++;
  1026  0060  3001               	movlw	1
  1027  0061  00B1               	movwf	??_sprintf
  1028  0062  0831               	movf	??_sprintf,w
  1029  0063  07AE               	addwf	sprintf@f,f
  1030  0064                     l2155:	
  1031                           ;doprnt.c: 584: }
  1032                           
  1033                           ;doprnt.c: 582: continue;
  1034                           
  1035  0064  082E               	movf	sprintf@f,w
  1036  0065  0084               	movwf	4
  1037  0066  120A  118A  2736  120A  118A  	fcall	stringdir
  1038                           
  1039                           ; Switch size 1, requested type "space"
  1040                           ; Number of cases is 4, Range of values is 32 to 48
  1041                           ; switch strategies available:
  1042                           ; Name         Instructions Cycles
  1043                           ; simple_byte           13     7 (average)
  1044                           ; direct_byte           62    11 (fixed)
  1045                           ; jumptable            263     9 (fixed)
  1046                           ;	Chosen strategy is simple_byte
  1047  006B  3A20               	xorlw	32	; case 32
  1048  006C  1903               	skipnz
  1049  006D  285B               	goto	l159
  1050  006E  3A03               	xorlw	3	; case 35
  1051  006F  1903               	skipnz
  1052  0070  285D               	goto	l160
  1053  0071  3A0E               	xorlw	14	; case 45
  1054  0072  1903               	skipnz
  1055  0073  2859               	goto	l157
  1056  0074  3A1D               	xorlw	29	; case 48
  1057  0075  1903               	skipnz
  1058  0076  285F               	goto	l161
  1059  0077  2878               	goto	l163
  1060  0078                     l163:	
  1061                           ;doprnt.c: 586: }
  1062                           
  1063                           ;doprnt.c: 585: break;
  1064                           
  1065                           
  1066                           ;doprnt.c: 593: if(flag & 0x08)
  1067  0078  1DC5               	btfss	sprintf@flag,3
  1068  0079  287E               	goto	l2159
  1069                           
  1070                           ;doprnt.c: 594: flag &= ~0x04;
  1071  007A  30FB               	movlw	251
  1072  007B  05C5               	andwf	sprintf@flag,f
  1073  007C  30FF               	movlw	255
  1074  007D  05C6               	andwf	sprintf@flag+1,f
  1075  007E                     l2159:	
  1076                           
  1077                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1078  007E  082E               	movf	sprintf@f,w
  1079  007F  0084               	movwf	4
  1080  0080  120A  118A  2736  120A  118A  	fcall	stringdir
  1081  0085  120A  158A  2714  120A  118A  	fcall	_isdigit
  1082  008A  1C03               	btfss	3,0
  1083  008B  28CB               	goto	l2171
  1084                           
  1085                           ;doprnt.c: 598: width = 0;
  1086  008C  1283               	bcf	3,5	;RP0=0, select bank0
  1087  008D  1303               	bcf	3,6	;RP1=0, select bank0
  1088  008E  01C1               	clrf	sprintf@width
  1089  008F  01C2               	clrf	sprintf@width+1
  1090  0090                     l2163:	
  1091                           ;doprnt.c: 599: do {
  1092                           
  1093                           
  1094                           ;doprnt.c: 600: width *= 10;
  1095  0090  300A               	movlw	10
  1096  0091  1283               	bcf	3,5	;RP0=0, select bank0
  1097  0092  1303               	bcf	3,6	;RP1=0, select bank0
  1098  0093  00A0               	movwf	___wmul@multiplier
  1099  0094  3000               	movlw	0
  1100  0095  00A1               	movwf	___wmul@multiplier+1
  1101  0096  0842               	movf	sprintf@width+1,w
  1102  0097  00A3               	movwf	___wmul@multiplicand+1
  1103  0098  0841               	movf	sprintf@width,w
  1104  0099  00A2               	movwf	___wmul@multiplicand
  1105  009A  120A  118A  27D7  120A  118A  	fcall	___wmul
  1106  009F  1283               	bcf	3,5	;RP0=0, select bank0
  1107  00A0  1303               	bcf	3,6	;RP1=0, select bank0
  1108  00A1  0821               	movf	?___wmul+1,w
  1109  00A2  00C2               	movwf	sprintf@width+1
  1110  00A3  0820               	movf	?___wmul,w
  1111  00A4  00C1               	movwf	sprintf@width
  1112                           
  1113                           ;doprnt.c: 601: width += *f++ - '0';
  1114  00A5  082E               	movf	sprintf@f,w
  1115  00A6  0084               	movwf	4
  1116  00A7  120A  118A  2736  120A  118A  	fcall	stringdir
  1117  00AC  3ED0               	addlw	208
  1118  00AD  00B1               	movwf	??_sprintf
  1119  00AE  30FF               	movlw	255
  1120  00AF  1803               	skipnc
  1121  00B0  3000               	movlw	0
  1122  00B1  00B2               	movwf	??_sprintf+1
  1123  00B2  0831               	movf	??_sprintf,w
  1124  00B3  07C1               	addwf	sprintf@width,f
  1125  00B4  1803               	skipnc
  1126  00B5  0AC2               	incf	sprintf@width+1,f
  1127  00B6  0832               	movf	??_sprintf+1,w
  1128  00B7  07C2               	addwf	sprintf@width+1,f
  1129  00B8  3001               	movlw	1
  1130  00B9  00B1               	movwf	??_sprintf
  1131  00BA  0831               	movf	??_sprintf,w
  1132  00BB  07AE               	addwf	sprintf@f,f
  1133                           
  1134                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1135  00BC  082E               	movf	sprintf@f,w
  1136  00BD  0084               	movwf	4
  1137  00BE  120A  118A  2736  120A  118A  	fcall	stringdir
  1138  00C3  120A  158A  2714  120A  118A  	fcall	_isdigit
  1139  00C8  1C03               	btfss	3,0
  1140  00C9  28E7               	goto	l2179
  1141  00CA  2890               	goto	l2163
  1142  00CB                     l2171:	
  1143                           ;doprnt.c: 604: } else if(*f == '*') {
  1144                           
  1145  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1146  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1147  00CD  082E               	movf	sprintf@f,w
  1148  00CE  0084               	movwf	4
  1149  00CF  120A  118A  2736  120A  118A  	fcall	stringdir
  1150  00D4  3A2A               	xorlw	42
  1151  00D5  1D03               	skipz
  1152  00D6  28E7               	goto	l2179
  1153                           
  1154                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  1155  00D7  083D               	movf	sprintf@ap,w
  1156  00D8  0084               	movwf	4
  1157  00D9  1383               	bcf	3,7	;select IRP bank0
  1158  00DA  0800               	movf	0,w
  1159  00DB  00C1               	movwf	sprintf@width
  1160  00DC  0A84               	incf	4,f
  1161  00DD  0800               	movf	0,w
  1162  00DE  00C2               	movwf	sprintf@width+1
  1163  00DF  3002               	movlw	2
  1164  00E0  00B1               	movwf	??_sprintf
  1165  00E1  0831               	movf	??_sprintf,w
  1166  00E2  07BD               	addwf	sprintf@ap,f
  1167                           
  1168                           ;doprnt.c: 606: f++;
  1169  00E3  3001               	movlw	1
  1170  00E4  00B1               	movwf	??_sprintf
  1171  00E5  0831               	movf	??_sprintf,w
  1172  00E6  07AE               	addwf	sprintf@f,f
  1173  00E7                     l2179:	
  1174                           
  1175                           ;doprnt.c: 608: }
  1176                           ;doprnt.c: 611: if(*f == '.') {
  1177  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  1178  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  1179  00E9  082E               	movf	sprintf@f,w
  1180  00EA  0084               	movwf	4
  1181  00EB  120A  118A  2736  120A  118A  	fcall	stringdir
  1182  00F0  3A2E               	xorlw	46
  1183  00F1  1D03               	skipz
  1184  00F2  2941               	goto	l2201
  1185                           
  1186                           ;doprnt.c: 612: flag |= 0x4000;
  1187  00F3  1746               	bsf	sprintf@flag+1,6
  1188                           
  1189                           ;doprnt.c: 613: f++;
  1190  00F4  3001               	movlw	1
  1191  00F5  00B1               	movwf	??_sprintf
  1192  00F6  0831               	movf	??_sprintf,w
  1193  00F7  07AE               	addwf	sprintf@f,f
  1194                           
  1195                           ;doprnt.c: 615: if(*f == '*') {
  1196  00F8  082E               	movf	sprintf@f,w
  1197  00F9  0084               	movwf	4
  1198  00FA  120A  118A  2736  120A  118A  	fcall	stringdir
  1199  00FF  3A2A               	xorlw	42
  1200  0100  1D03               	skipz
  1201  0101  2912               	goto	l2193
  1202                           
  1203                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  1204  0102  083D               	movf	sprintf@ap,w
  1205  0103  0084               	movwf	4
  1206  0104  1383               	bcf	3,7	;select IRP bank0
  1207  0105  0800               	movf	0,w
  1208  0106  00B1               	movwf	??_sprintf
  1209  0107  0831               	movf	??_sprintf,w
  1210  0108  00C0               	movwf	sprintf@prec
  1211  0109  3002               	movlw	2
  1212  010A  00B1               	movwf	??_sprintf
  1213  010B  0831               	movf	??_sprintf,w
  1214  010C  07BD               	addwf	sprintf@ap,f
  1215                           
  1216                           ;doprnt.c: 617: f++;
  1217  010D  3001               	movlw	1
  1218  010E  00B1               	movwf	??_sprintf
  1219  010F  0831               	movf	??_sprintf,w
  1220  0110  07AE               	addwf	sprintf@f,f
  1221                           
  1222                           ;doprnt.c: 618: } else
  1223  0111  29DC               	goto	l2253
  1224  0112                     l2193:	
  1225                           
  1226                           ;doprnt.c: 620: {
  1227                           ;doprnt.c: 621: prec = 0;
  1228  0112  01C0               	clrf	sprintf@prec
  1229  0113                     l2199:	
  1230                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1231                           
  1232  0113  082E               	movf	sprintf@f,w
  1233  0114  0084               	movwf	4
  1234  0115  120A  118A  2736  120A  118A  	fcall	stringdir
  1235  011A  120A  158A  2714  120A  118A  	fcall	_isdigit
  1236  011F  1C03               	btfss	3,0
  1237  0120  29DC               	goto	l2253
  1238                           
  1239                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1240  0121  1283               	bcf	3,5	;RP0=0, select bank0
  1241  0122  1303               	bcf	3,6	;RP1=0, select bank0
  1242  0123  082E               	movf	sprintf@f,w
  1243  0124  0084               	movwf	4
  1244  0125  120A  118A  2736  120A  118A  	fcall	stringdir
  1245  012A  00B1               	movwf	??_sprintf
  1246  012B  300A               	movlw	10
  1247  012C  00B2               	movwf	??_sprintf+1
  1248  012D  0832               	movf	??_sprintf+1,w
  1249  012E  00A0               	movwf	___bmul@multiplicand
  1250  012F  0840               	movf	sprintf@prec,w
  1251  0130  120A  158A  2724  120A  118A  	fcall	___bmul
  1252  0135  1283               	bcf	3,5	;RP0=0, select bank0
  1253  0136  1303               	bcf	3,6	;RP1=0, select bank0
  1254  0137  0731               	addwf	??_sprintf,w
  1255  0138  3ED0               	addlw	-48
  1256  0139  00B3               	movwf	??_sprintf+2
  1257  013A  0833               	movf	??_sprintf+2,w
  1258  013B  00C0               	movwf	sprintf@prec
  1259  013C  3001               	movlw	1
  1260  013D  00B1               	movwf	??_sprintf
  1261  013E  0831               	movf	??_sprintf,w
  1262  013F  07AE               	addwf	sprintf@f,f
  1263  0140  2913               	goto	l2199
  1264  0141                     l2201:	
  1265                           ;doprnt.c: 624: }
  1266                           ;doprnt.c: 625: } else {
  1267                           
  1268                           
  1269                           ;doprnt.c: 626: prec = 0;
  1270  0141  1283               	bcf	3,5	;RP0=0, select bank0
  1271  0142  1303               	bcf	3,6	;RP1=0, select bank0
  1272  0143  01C0               	clrf	sprintf@prec
  1273                           
  1274                           ;doprnt.c: 630: }
  1275                           ;doprnt.c: 635: switch(c = *f++) {
  1276  0144  29DC               	goto	l2253
  1277  0145                     l180:	
  1278                           ;doprnt.c: 689: case 'o':
  1279                           
  1280                           ;doprnt.c: 638: goto alldone;
  1281                           
  1282                           ;doprnt.c: 637: case 0:
  1283                           
  1284                           
  1285                           ;doprnt.c: 691: flag |= 0x40;
  1286  0145  1745               	bsf	sprintf@flag,6
  1287                           
  1288                           ;doprnt.c: 698: case 'i':
  1289                           ;doprnt.c: 699: break;
  1290                           
  1291                           ;doprnt.c: 697: case 'd':
  1292                           
  1293                           ;doprnt.c: 693: break;
  1294  0146  2A02               	goto	l2255
  1295  0147                     l184:	
  1296                           ;doprnt.c: 712: case 'X':
  1297                           
  1298                           
  1299                           ;doprnt.c: 714: flag |= 0x20;
  1300  0147  16C5               	bsf	sprintf@flag,5
  1301  0148                     l185:	
  1302                           ;doprnt.c: 718: case 'x':
  1303                           
  1304                           
  1305                           ;doprnt.c: 721: flag |= 0x80;
  1306  0148  17C5               	bsf	sprintf@flag,7
  1307                           
  1308                           ;doprnt.c: 723: break;
  1309  0149  2A02               	goto	l2255
  1310  014A                     l2203:	
  1311                           ;doprnt.c: 750: dostring:
  1312                           
  1313                           
  1314                           ;doprnt.c: 753: if(prec && prec < len)
  1315  014A  0840               	movf	sprintf@prec,w
  1316  014B  1903               	btfsc	3,2
  1317  014C  295F               	goto	l2209
  1318  014D  0840               	movf	sprintf@prec,w
  1319  014E  00B1               	movwf	??_sprintf
  1320  014F  01B2               	clrf	??_sprintf+1
  1321  0150  1BB1               	btfsc	??_sprintf,7
  1322  0151  03B2               	decf	??_sprintf+1,f
  1323  0152  083C               	movf	sprintf@len+1,w
  1324  0153  0232               	subwf	??_sprintf+1,w
  1325  0154  1D03               	skipz
  1326  0155  2958               	goto	u2385
  1327  0156  083B               	movf	sprintf@len,w
  1328  0157  0231               	subwf	??_sprintf,w
  1329  0158                     u2385:	
  1330  0158  1803               	skipnc
  1331  0159  295F               	goto	l2209
  1332                           
  1333                           ;doprnt.c: 754: len = prec;
  1334  015A  0840               	movf	sprintf@prec,w
  1335  015B  00BB               	movwf	sprintf@len
  1336  015C  01BC               	clrf	sprintf@len+1
  1337  015D  1BBB               	btfsc	sprintf@len,7
  1338  015E  03BC               	decf	sprintf@len+1,f
  1339  015F                     l2209:	
  1340                           
  1341                           ;doprnt.c: 757: if(width > len)
  1342  015F  0842               	movf	sprintf@width+1,w
  1343  0160  023C               	subwf	sprintf@len+1,w
  1344  0161  1D03               	skipz
  1345  0162  2965               	goto	u2395
  1346  0163  0841               	movf	sprintf@width,w
  1347  0164  023B               	subwf	sprintf@len,w
  1348  0165                     u2395:	
  1349  0165  1803               	skipnc
  1350  0166  296E               	goto	l2213
  1351                           
  1352                           ;doprnt.c: 758: width -= len;
  1353  0167  083B               	movf	sprintf@len,w
  1354  0168  02C1               	subwf	sprintf@width,f
  1355  0169  083C               	movf	sprintf@len+1,w
  1356  016A  1C03               	skipc
  1357  016B  03C2               	decf	sprintf@width+1,f
  1358  016C  02C2               	subwf	sprintf@width+1,f
  1359  016D  2970               	goto	l2215
  1360  016E                     l2213:	
  1361                           
  1362                           ;doprnt.c: 759: else
  1363                           ;doprnt.c: 760: width = 0;
  1364  016E  01C1               	clrf	sprintf@width
  1365  016F  01C2               	clrf	sprintf@width+1
  1366  0170                     l2215:	
  1367                           
  1368                           ;doprnt.c: 762: if(!(flag & 0x08))
  1369  0170  1DC5               	btfss	sprintf@flag,3
  1370  0171  297E               	goto	l2223
  1371  0172  299C               	goto	l2231
  1372  0173                     l2219:	
  1373                           ;doprnt.c: 764: while(width--)
  1374                           
  1375                           
  1376                           ;doprnt.c: 765: ((*sp++ = (' ')));
  1377  0173  3020               	movlw	32
  1378  0174  00B1               	movwf	??_sprintf
  1379  0175  0844               	movf	sprintf@sp,w
  1380  0176  0084               	movwf	4
  1381  0177  0831               	movf	??_sprintf,w
  1382  0178  1383               	bcf	3,7	;select IRP bank0
  1383  0179  0080               	movwf	0
  1384  017A  3001               	movlw	1
  1385  017B  00B1               	movwf	??_sprintf
  1386  017C  0831               	movf	??_sprintf,w
  1387  017D  07C4               	addwf	sprintf@sp,f
  1388  017E                     l2223:	
  1389  017E  30FF               	movlw	255
  1390  017F  07C1               	addwf	sprintf@width,f
  1391  0180  1803               	skipnc
  1392  0181  0AC2               	incf	sprintf@width+1,f
  1393  0182  30FF               	movlw	255
  1394  0183  07C2               	addwf	sprintf@width+1,f
  1395  0184  0A41               	incf	sprintf@width,w
  1396  0185  1D03               	skipz
  1397  0186  2973               	goto	l2219
  1398  0187  0A42               	incf	sprintf@width+1,w
  1399  0188  1903               	btfsc	3,2
  1400  0189  299C               	goto	l2231
  1401  018A  2973               	goto	l2219
  1402  018B                     l2225:	
  1403                           ;doprnt.c: 767: while(len--)
  1404                           
  1405                           
  1406                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  1407  018B  0839               	movf	sprintf@cp,w
  1408  018C  0084               	movwf	4
  1409  018D  1383               	bcf	3,7	;select IRP bank0
  1410  018E  0800               	movf	0,w
  1411  018F  00B1               	movwf	??_sprintf
  1412  0190  0844               	movf	sprintf@sp,w
  1413  0191  0084               	movwf	4
  1414  0192  0831               	movf	??_sprintf,w
  1415  0193  0080               	movwf	0
  1416  0194  3001               	movlw	1
  1417  0195  00B1               	movwf	??_sprintf
  1418  0196  0831               	movf	??_sprintf,w
  1419  0197  07B9               	addwf	sprintf@cp,f
  1420  0198  3001               	movlw	1
  1421  0199  00B1               	movwf	??_sprintf
  1422  019A  0831               	movf	??_sprintf,w
  1423  019B  07C4               	addwf	sprintf@sp,f
  1424  019C                     l2231:	
  1425  019C  3001               	movlw	1
  1426  019D  02BB               	subwf	sprintf@len,f
  1427  019E  3000               	movlw	0
  1428  019F  1C03               	skipc
  1429  01A0  03BC               	decf	sprintf@len+1,f
  1430  01A1  02BC               	subwf	sprintf@len+1,f
  1431  01A2  0A3B               	incf	sprintf@len,w
  1432  01A3  1D03               	skipz
  1433  01A4  298B               	goto	l2225
  1434  01A5  0A3C               	incf	sprintf@len+1,w
  1435  01A6  1D03               	btfss	3,2
  1436  01A7  298B               	goto	l2225
  1437                           
  1438                           ;doprnt.c: 770: if(flag & 0x08)
  1439  01A8  19C5               	btfsc	sprintf@flag,3
  1440  01A9  29B6               	goto	l2239
  1441  01AA  2832               	goto	l2463
  1442  01AB                     l2235:	
  1443                           ;doprnt.c: 771: while(width--)
  1444                           
  1445                           
  1446                           ;doprnt.c: 772: ((*sp++ = (' ')));
  1447  01AB  3020               	movlw	32
  1448  01AC  00B1               	movwf	??_sprintf
  1449  01AD  0844               	movf	sprintf@sp,w
  1450  01AE  0084               	movwf	4
  1451  01AF  0831               	movf	??_sprintf,w
  1452  01B0  1383               	bcf	3,7	;select IRP bank0
  1453  01B1  0080               	movwf	0
  1454  01B2  3001               	movlw	1
  1455  01B3  00B1               	movwf	??_sprintf
  1456  01B4  0831               	movf	??_sprintf,w
  1457  01B5  07C4               	addwf	sprintf@sp,f
  1458  01B6                     l2239:	
  1459  01B6  30FF               	movlw	255
  1460  01B7  07C1               	addwf	sprintf@width,f
  1461  01B8  1803               	skipnc
  1462  01B9  0AC2               	incf	sprintf@width+1,f
  1463  01BA  30FF               	movlw	255
  1464  01BB  07C2               	addwf	sprintf@width+1,f
  1465  01BC  0A41               	incf	sprintf@width,w
  1466  01BD  1D03               	skipz
  1467  01BE  29AB               	goto	l2235
  1468  01BF  0A42               	incf	sprintf@width+1,w
  1469  01C0  1903               	btfsc	3,2
  1470  01C1  2832               	goto	l2463
  1471  01C2  29AB               	goto	l2235
  1472  01C3                     l2241:	
  1473                           ;doprnt.c: 784: case 'c':
  1474                           
  1475                           ;doprnt.c: 774: continue;
  1476                           
  1477                           
  1478                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  1479  01C3  083D               	movf	sprintf@ap,w
  1480  01C4  0084               	movwf	4
  1481  01C5  1383               	bcf	3,7	;select IRP bank0
  1482  01C6  0800               	movf	0,w
  1483  01C7  00B1               	movwf	??_sprintf
  1484  01C8  0831               	movf	??_sprintf,w
  1485  01C9  00C3               	movwf	sprintf@c
  1486  01CA  3002               	movlw	2
  1487  01CB  00B1               	movwf	??_sprintf
  1488  01CC  0831               	movf	??_sprintf,w
  1489  01CD  07BD               	addwf	sprintf@ap,f
  1490  01CE                     l2245:	
  1491                           ;doprnt.c: 802: default:
  1492                           
  1493                           
  1494                           ;doprnt.c: 805: cp = (char *)&c;
  1495  01CE  3043               	movlw	(low (sprintf@c| 0))& (0+255)
  1496  01CF  00B1               	movwf	??_sprintf
  1497  01D0  0831               	movf	??_sprintf,w
  1498  01D1  00B9               	movwf	sprintf@cp
  1499                           
  1500                           ;doprnt.c: 806: len = 1;
  1501  01D2  3001               	movlw	1
  1502  01D3  00BB               	movwf	sprintf@len
  1503  01D4  3000               	movlw	0
  1504  01D5  00BC               	movwf	sprintf@len+1
  1505                           
  1506                           ;doprnt.c: 807: goto dostring;
  1507  01D6  294A               	goto	l2203
  1508  01D7                     l2249:	
  1509                           ;doprnt.c: 817: case 'u':
  1510                           
  1511                           
  1512                           ;doprnt.c: 818: flag |= 0xC0;
  1513  01D7  30C0               	movlw	192
  1514  01D8  04C5               	iorwf	sprintf@flag,f
  1515  01D9  3000               	movlw	0
  1516  01DA  04C6               	iorwf	sprintf@flag+1,f
  1517                           
  1518                           ;doprnt.c: 822: }
  1519                           
  1520                           ;doprnt.c: 819: break;
  1521  01DB  2A02               	goto	l2255
  1522  01DC                     l2253:	
  1523  01DC  3001               	movlw	1
  1524  01DD  1283               	bcf	3,5	;RP0=0, select bank0
  1525  01DE  1303               	bcf	3,6	;RP1=0, select bank0
  1526  01DF  07AE               	addwf	sprintf@f,f
  1527  01E0  30FF               	movlw	-1
  1528  01E1  072E               	addwf	sprintf@f,w
  1529  01E2  0084               	movwf	4
  1530  01E3  120A  118A  2736  120A  118A  	fcall	stringdir
  1531  01E8  00C3               	movwf	sprintf@c
  1532                           
  1533                           ; Switch size 1, requested type "space"
  1534                           ; Number of cases is 8, Range of values is 0 to 120
  1535                           ; switch strategies available:
  1536                           ; Name         Instructions Cycles
  1537                           ; simple_byte           25    13 (average)
  1538                           ; jumptable            260     6 (fixed)
  1539                           ;	Chosen strategy is simple_byte
  1540  01E9  3A00               	xorlw	0	; case 0
  1541  01EA  1903               	skipnz
  1542  01EB  2CED               	goto	l2465
  1543  01EC  3A58               	xorlw	88	; case 88
  1544  01ED  1903               	skipnz
  1545  01EE  2947               	goto	l184
  1546  01EF  3A3B               	xorlw	59	; case 99
  1547  01F0  1903               	skipnz
  1548  01F1  29C3               	goto	l2241
  1549  01F2  3A07               	xorlw	7	; case 100
  1550  01F3  1903               	skipnz
  1551  01F4  2A02               	goto	l2255
  1552  01F5  3A0D               	xorlw	13	; case 105
  1553  01F6  1903               	skipnz
  1554  01F7  2A02               	goto	l2255
  1555  01F8  3A06               	xorlw	6	; case 111
  1556  01F9  1903               	skipnz
  1557  01FA  2945               	goto	l180
  1558  01FB  3A1A               	xorlw	26	; case 117
  1559  01FC  1903               	skipnz
  1560  01FD  29D7               	goto	l2249
  1561  01FE  3A0D               	xorlw	13	; case 120
  1562  01FF  1903               	skipnz
  1563  0200  2948               	goto	l185
  1564  0201  29CE               	goto	l2245
  1565  0202                     l2255:	
  1566                           
  1567                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  1568  0202  30C0               	movlw	192
  1569  0203  0545               	andwf	sprintf@flag,w
  1570  0204  00B1               	movwf	??_sprintf
  1571  0205  3000               	movlw	0
  1572  0206  0546               	andwf	sprintf@flag+1,w
  1573  0207  00B2               	movwf	??_sprintf+1
  1574  0208  0831               	movf	??_sprintf,w
  1575  0209  0432               	iorwf	??_sprintf+1,w
  1576  020A  1D03               	btfss	3,2
  1577  020B  2A24               	goto	l2267
  1578                           
  1579                           ;doprnt.c: 1253: {
  1580                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1581  020C  083D               	movf	sprintf@ap,w
  1582  020D  0084               	movwf	4
  1583  020E  1383               	bcf	3,7	;select IRP bank0
  1584  020F  0800               	movf	0,w
  1585  0210  00BE               	movwf	sprintf@val
  1586  0211  0A84               	incf	4,f
  1587  0212  0800               	movf	0,w
  1588  0213  00BF               	movwf	sprintf@val+1
  1589  0214  3002               	movlw	2
  1590  0215  00B1               	movwf	??_sprintf
  1591  0216  0831               	movf	??_sprintf,w
  1592  0217  07BD               	addwf	sprintf@ap,f
  1593                           
  1594                           ;doprnt.c: 1261: if((int)val < 0) {
  1595  0218  1FBF               	btfss	sprintf@val+1,7
  1596  0219  2A30               	goto	l2271
  1597                           
  1598                           ;doprnt.c: 1262: flag |= 0x03;
  1599  021A  3003               	movlw	3
  1600  021B  04C5               	iorwf	sprintf@flag,f
  1601  021C  3000               	movlw	0
  1602  021D  04C6               	iorwf	sprintf@flag+1,f
  1603                           
  1604                           ;doprnt.c: 1263: val = -val;
  1605  021E  09BE               	comf	sprintf@val,f
  1606  021F  09BF               	comf	sprintf@val+1,f
  1607  0220  0ABE               	incf	sprintf@val,f
  1608  0221  1903               	skipnz
  1609  0222  0ABF               	incf	sprintf@val+1,f
  1610                           
  1611                           ;doprnt.c: 1264: }
  1612                           ;doprnt.c: 1266: }
  1613  0223  2A30               	goto	l2271
  1614  0224                     l2267:	
  1615                           
  1616                           ;doprnt.c: 1268: else
  1617                           ;doprnt.c: 1273: {
  1618                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1619  0224  083D               	movf	sprintf@ap,w
  1620  0225  0084               	movwf	4
  1621  0226  1383               	bcf	3,7	;select IRP bank0
  1622  0227  0800               	movf	0,w
  1623  0228  00BE               	movwf	sprintf@val
  1624  0229  0A84               	incf	4,f
  1625  022A  0800               	movf	0,w
  1626  022B  00BF               	movwf	sprintf@val+1
  1627  022C  3002               	movlw	2
  1628  022D  00B1               	movwf	??_sprintf
  1629  022E  0831               	movf	??_sprintf,w
  1630  022F  07BD               	addwf	sprintf@ap,f
  1631  0230                     l2271:	
  1632                           
  1633                           ;doprnt.c: 1287: }
  1634                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  1635  0230  0840               	movf	sprintf@prec,w
  1636  0231  1D03               	btfss	3,2
  1637  0232  2AA8               	goto	l2309
  1638  0233  083E               	movf	sprintf@val,w
  1639  0234  043F               	iorwf	sprintf@val+1,w
  1640  0235  1D03               	btfss	3,2
  1641  0236  2AA8               	goto	l2309
  1642                           
  1643                           ;doprnt.c: 1291: prec++;
  1644  0237  3001               	movlw	1
  1645  0238  00B1               	movwf	??_sprintf
  1646  0239  0831               	movf	??_sprintf,w
  1647  023A  07C0               	addwf	sprintf@prec,f
  1648                           
  1649                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  1650  023B  2AA8               	goto	l2309
  1651  023C                     l210:	
  1652                           ;doprnt.c: 1299: case 0x00:
  1653                           
  1654                           
  1655                           ;doprnt.c: 1302: case 0xC0:
  1656                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1657  023C  01C3               	clrf	sprintf@c
  1658  023D  0AC3               	incf	sprintf@c,f
  1659  023E                     L7:	
  1660  023E  3005               	movlw	5
  1661  023F  0643               	xorwf	sprintf@c,w
  1662  0240  1903               	btfsc	3,2
  1663  0241  2AB7               	goto	l2311
  1664                           
  1665                           ;doprnt.c: 1306: if(val < dpowers[c])
  1666  0242  0843               	movf	sprintf@c,w
  1667  0243  00B1               	movwf	??_sprintf
  1668  0244  0731               	addwf	??_sprintf,w
  1669  0245  3E0D               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1670  0246  0084               	movwf	4
  1671  0247  120A  118A  2736  120A  118A  	fcall	stringdir
  1672  024C  00B2               	movwf	??_sprintf+1
  1673  024D  120A  118A  2736  120A  118A  	fcall	stringdir
  1674  0252  00B3               	movwf	??_sprintf+2
  1675  0253  0833               	movf	??_sprintf+2,w
  1676  0254  023F               	subwf	sprintf@val+1,w
  1677  0255  1D03               	skipz
  1678  0256  2A59               	goto	u2505
  1679  0257  0832               	movf	??_sprintf+1,w
  1680  0258  023E               	subwf	sprintf@val,w
  1681  0259                     u2505:	
  1682  0259  1C03               	btfss	3,0
  1683  025A  2AB7               	goto	l2311
  1684                           
  1685                           ;doprnt.c: 1307: break;
  1686  025B  3001               	movlw	1
  1687  025C  00B1               	movwf	??_sprintf
  1688  025D  0831               	movf	??_sprintf,w
  1689  025E  07C3               	addwf	sprintf@c,f
  1690  025F  2A3E               	goto	L7
  1691  0260                     l215:	
  1692                           ;doprnt.c: 1314: case 0x80:
  1693                           
  1694                           ;doprnt.c: 1309: break;
  1695                           
  1696                           
  1697                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1698  0260  01C3               	clrf	sprintf@c
  1699  0261  0AC3               	incf	sprintf@c,f
  1700  0262                     L8:	
  1701  0262  3004               	movlw	4
  1702  0263  0643               	xorwf	sprintf@c,w
  1703  0264  1903               	btfsc	3,2
  1704  0265  2AB7               	goto	l2311
  1705                           
  1706                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1707  0266  0843               	movf	sprintf@c,w
  1708  0267  00B1               	movwf	??_sprintf
  1709  0268  0731               	addwf	??_sprintf,w
  1710  0269  3E17               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  1711  026A  0084               	movwf	4
  1712  026B  120A  118A  2736  120A  118A  	fcall	stringdir
  1713  0270  00B2               	movwf	??_sprintf+1
  1714  0271  120A  118A  2736  120A  118A  	fcall	stringdir
  1715  0276  00B3               	movwf	??_sprintf+2
  1716  0277  0833               	movf	??_sprintf+2,w
  1717  0278  023F               	subwf	sprintf@val+1,w
  1718  0279  1D03               	skipz
  1719  027A  2A7D               	goto	u2535
  1720  027B  0832               	movf	??_sprintf+1,w
  1721  027C  023E               	subwf	sprintf@val,w
  1722  027D                     u2535:	
  1723  027D  1C03               	btfss	3,0
  1724  027E  2AB7               	goto	l2311
  1725                           
  1726                           ;doprnt.c: 1318: break;
  1727  027F  3001               	movlw	1
  1728  0280  00B1               	movwf	??_sprintf
  1729  0281  0831               	movf	??_sprintf,w
  1730  0282  07C3               	addwf	sprintf@c,f
  1731  0283  2A62               	goto	L8
  1732  0284                     l219:	
  1733                           ;doprnt.c: 1326: case 0x40:
  1734                           
  1735                           ;doprnt.c: 1320: break;
  1736                           
  1737                           
  1738                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  1739  0284  01C3               	clrf	sprintf@c
  1740  0285  0AC3               	incf	sprintf@c,f
  1741  0286                     L9:	
  1742  0286  3006               	movlw	6
  1743  0287  0643               	xorwf	sprintf@c,w
  1744  0288  1903               	btfsc	3,2
  1745  0289  2AB7               	goto	l2311
  1746                           
  1747                           ;doprnt.c: 1329: if(val < octpowers[c])
  1748  028A  0843               	movf	sprintf@c,w
  1749  028B  00B1               	movwf	??_sprintf
  1750  028C  0731               	addwf	??_sprintf,w
  1751  028D  3E01               	addlw	low ((_octpowers-__stringbase)| (0+32768))
  1752  028E  0084               	movwf	4
  1753  028F  120A  118A  2736  120A  118A  	fcall	stringdir
  1754  0294  00B2               	movwf	??_sprintf+1
  1755  0295  120A  118A  2736  120A  118A  	fcall	stringdir
  1756  029A  00B3               	movwf	??_sprintf+2
  1757  029B  0833               	movf	??_sprintf+2,w
  1758  029C  023F               	subwf	sprintf@val+1,w
  1759  029D  1D03               	skipz
  1760  029E  2AA1               	goto	u2565
  1761  029F  0832               	movf	??_sprintf+1,w
  1762  02A0  023E               	subwf	sprintf@val,w
  1763  02A1                     u2565:	
  1764  02A1  1C03               	btfss	3,0
  1765  02A2  2AB7               	goto	l2311
  1766                           
  1767                           ;doprnt.c: 1330: break;
  1768  02A3  3001               	movlw	1
  1769  02A4  00B1               	movwf	??_sprintf
  1770  02A5  0831               	movf	??_sprintf,w
  1771  02A6  07C3               	addwf	sprintf@c,f
  1772  02A7  2A86               	goto	L9
  1773  02A8                     l2309:	
  1774                           ;doprnt.c: 1336: }
  1775                           
  1776                           ;doprnt.c: 1332: break;
  1777                           
  1778  02A8  0845               	movf	sprintf@flag,w
  1779  02A9  39C0               	andlw	192
  1780                           
  1781                           ; Switch size 1, requested type "space"
  1782                           ; Number of cases is 4, Range of values is 0 to 192
  1783                           ; switch strategies available:
  1784                           ; Name         Instructions Cycles
  1785                           ; simple_byte           13     7 (average)
  1786                           ; jumptable            260     6 (fixed)
  1787                           ;	Chosen strategy is simple_byte
  1788  02AA  3A00               	xorlw	0	; case 0
  1789  02AB  1903               	skipnz
  1790  02AC  2A3C               	goto	l210
  1791  02AD  3A40               	xorlw	64	; case 64
  1792  02AE  1903               	skipnz
  1793  02AF  2A84               	goto	l219
  1794  02B0  3AC0               	xorlw	192	; case 128
  1795  02B1  1903               	skipnz
  1796  02B2  2A60               	goto	l215
  1797  02B3  3A40               	xorlw	64	; case 192
  1798  02B4  1903               	skipnz
  1799  02B5  2A3C               	goto	l210
  1800  02B6  2AB7               	goto	l2311
  1801  02B7                     l2311:	
  1802                           
  1803                           ;doprnt.c: 1339: if(c < prec)
  1804  02B7  0843               	movf	sprintf@c,w
  1805  02B8  3A80               	xorlw	128
  1806  02B9  00B1               	movwf	??_sprintf
  1807  02BA  0840               	movf	sprintf@prec,w
  1808  02BB  3A80               	xorlw	128
  1809  02BC  02B1               	subwf	??_sprintf,f
  1810  02BD  1803               	skipnc
  1811  02BE  2AC4               	goto	l2315
  1812                           
  1813                           ;doprnt.c: 1340: c = prec;
  1814  02BF  0840               	movf	sprintf@prec,w
  1815  02C0  00B1               	movwf	??_sprintf
  1816  02C1  0831               	movf	??_sprintf,w
  1817  02C2  00C3               	movwf	sprintf@c
  1818  02C3  2AD0               	goto	l2319
  1819  02C4                     l2315:	
  1820                           
  1821                           ;doprnt.c: 1341: else if(prec < c)
  1822  02C4  0840               	movf	sprintf@prec,w
  1823  02C5  3A80               	xorlw	128
  1824  02C6  00B1               	movwf	??_sprintf
  1825  02C7  0843               	movf	sprintf@c,w
  1826  02C8  3A80               	xorlw	128
  1827  02C9  02B1               	subwf	??_sprintf,f
  1828  02CA  1803               	skipnc
  1829  02CB  2AD0               	goto	l2319
  1830                           
  1831                           ;doprnt.c: 1342: prec = c;
  1832  02CC  0843               	movf	sprintf@c,w
  1833  02CD  00B1               	movwf	??_sprintf
  1834  02CE  0831               	movf	??_sprintf,w
  1835  02CF  00C0               	movwf	sprintf@prec
  1836  02D0                     l2319:	
  1837                           
  1838                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1839  02D0  0841               	movf	sprintf@width,w
  1840  02D1  0442               	iorwf	sprintf@width+1,w
  1841  02D2  1903               	btfsc	3,2
  1842  02D3  2AE4               	goto	l2325
  1843  02D4  3003               	movlw	3
  1844  02D5  0545               	andwf	sprintf@flag,w
  1845  02D6  00B1               	movwf	??_sprintf
  1846  02D7  3000               	movlw	0
  1847  02D8  0546               	andwf	sprintf@flag+1,w
  1848  02D9  00B2               	movwf	??_sprintf+1
  1849  02DA  0831               	movf	??_sprintf,w
  1850  02DB  0432               	iorwf	??_sprintf+1,w
  1851  02DC  1903               	btfsc	3,2
  1852  02DD  2AE4               	goto	l2325
  1853                           
  1854                           ;doprnt.c: 1346: width--;
  1855  02DE  30FF               	movlw	255
  1856  02DF  07C1               	addwf	sprintf@width,f
  1857  02E0  1803               	skipnc
  1858  02E1  0AC2               	incf	sprintf@width+1,f
  1859  02E2  30FF               	movlw	255
  1860  02E3  07C2               	addwf	sprintf@width+1,f
  1861  02E4                     l2325:	
  1862                           
  1863                           ;doprnt.c: 1348: if(flag & 0x4000) {
  1864  02E4  1F46               	btfss	sprintf@flag+1,6
  1865  02E5  2B09               	goto	l2333
  1866                           
  1867                           ;doprnt.c: 1349: if(width > prec)
  1868  02E6  0840               	movf	sprintf@prec,w
  1869  02E7  00B1               	movwf	??_sprintf
  1870  02E8  01B2               	clrf	??_sprintf+1
  1871  02E9  1BB1               	btfsc	??_sprintf,7
  1872  02EA  03B2               	decf	??_sprintf+1,f
  1873  02EB  0832               	movf	??_sprintf+1,w
  1874  02EC  3A80               	xorlw	128
  1875  02ED  00B3               	movwf	??_sprintf+2
  1876  02EE  0842               	movf	sprintf@width+1,w
  1877  02EF  3A80               	xorlw	128
  1878  02F0  0233               	subwf	??_sprintf+2,w
  1879  02F1  1D03               	skipz
  1880  02F2  2AF5               	goto	u2635
  1881  02F3  0841               	movf	sprintf@width,w
  1882  02F4  0231               	subwf	??_sprintf,w
  1883  02F5                     u2635:	
  1884  02F5  1803               	skipnc
  1885  02F6  2B05               	goto	l2331
  1886                           
  1887                           ;doprnt.c: 1350: width -= prec;
  1888  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  1889  02F8  1303               	bcf	3,6	;RP1=0, select bank0
  1890  02F9  0840               	movf	sprintf@prec,w
  1891  02FA  00B1               	movwf	??_sprintf
  1892  02FB  01B2               	clrf	??_sprintf+1
  1893  02FC  1BB1               	btfsc	??_sprintf,7
  1894  02FD  03B2               	decf	??_sprintf+1,f
  1895  02FE  0831               	movf	??_sprintf,w
  1896  02FF  02C1               	subwf	sprintf@width,f
  1897  0300  0832               	movf	??_sprintf+1,w
  1898  0301  1C03               	skipc
  1899  0302  03C2               	decf	sprintf@width+1,f
  1900  0303  02C2               	subwf	sprintf@width+1,f
  1901  0304  2B09               	goto	l2333
  1902  0305                     l2331:	
  1903                           
  1904                           ;doprnt.c: 1351: else
  1905                           ;doprnt.c: 1352: width = 0;
  1906  0305  1283               	bcf	3,5	;RP0=0, select bank0
  1907  0306  1303               	bcf	3,6	;RP1=0, select bank0
  1908  0307  01C1               	clrf	sprintf@width
  1909  0308  01C2               	clrf	sprintf@width+1
  1910  0309                     l2333:	
  1911                           
  1912                           ;doprnt.c: 1353: }
  1913                           ;doprnt.c: 1357: if((flag & (
  1914                           ;doprnt.c: 1359: 0x04|
  1915                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  1916  0309  30C4               	movlw	196
  1917  030A  0545               	andwf	sprintf@flag,w
  1918  030B  00B1               	movwf	??_sprintf
  1919  030C  3008               	movlw	8
  1920  030D  0546               	andwf	sprintf@flag+1,w
  1921  030E  00B2               	movwf	??_sprintf+1
  1922  030F  3040               	movlw	64
  1923  0310  0631               	xorwf	??_sprintf,w
  1924  0311  3008               	movlw	8
  1925  0312  1903               	skipnz
  1926  0313  0632               	xorwf	??_sprintf+1,w
  1927  0314  1D03               	btfss	3,2
  1928  0315  2B1C               	goto	l2339
  1929                           
  1930                           ;doprnt.c: 1362: if(width)
  1931  0316  0841               	movf	sprintf@width,w
  1932  0317  0442               	iorwf	sprintf@width+1,w
  1933  0318  1903               	btfsc	3,2
  1934  0319  2B41               	goto	l2347
  1935                           
  1936                           ;doprnt.c: 1363: width--;
  1937  031A  30FF               	movlw	255
  1938  031B  2B37               	goto	L1
  1939  031C                     l2339:	
  1940                           ;doprnt.c: 1364: } else
  1941                           
  1942                           
  1943                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  1944  031C  30C0               	movlw	192
  1945  031D  0545               	andwf	sprintf@flag,w
  1946  031E  00B1               	movwf	??_sprintf
  1947  031F  3008               	movlw	8
  1948  0320  0546               	andwf	sprintf@flag+1,w
  1949  0321  00B2               	movwf	??_sprintf+1
  1950  0322  3080               	movlw	128
  1951  0323  0631               	xorwf	??_sprintf,w
  1952  0324  3008               	movlw	8
  1953  0325  1903               	skipnz
  1954  0326  0632               	xorwf	??_sprintf+1,w
  1955  0327  1D03               	btfss	3,2
  1956  0328  2B41               	goto	l2347
  1957                           
  1958                           ;doprnt.c: 1372: if(width > 2)
  1959  0329  0842               	movf	sprintf@width+1,w
  1960  032A  3A80               	xorlw	128
  1961  032B  00FF               	movwf	127
  1962  032C  3080               	movlw	128
  1963  032D  027F               	subwf	127,w
  1964  032E  1D03               	skipz
  1965  032F  2B32               	goto	u2675
  1966  0330  3003               	movlw	3
  1967  0331  0241               	subwf	sprintf@width,w
  1968  0332                     u2675:	
  1969  0332  1C03               	skipc
  1970  0333  2B3D               	goto	l2345
  1971                           
  1972                           ;doprnt.c: 1373: width -= 2;
  1973  0334  30FE               	movlw	254
  1974  0335  1283               	bcf	3,5	;RP0=0, select bank0
  1975  0336  1303               	bcf	3,6	;RP1=0, select bank0
  1976  0337                     L1:	
  1977  0337  07C1               	addwf	sprintf@width,f
  1978  0338  1803               	skipnc
  1979  0339  0AC2               	incf	sprintf@width+1,f
  1980  033A  30FF               	movlw	255
  1981  033B  07C2               	addwf	sprintf@width+1,f
  1982  033C  2B41               	goto	l2347
  1983  033D                     l2345:	
  1984                           
  1985                           ;doprnt.c: 1374: else
  1986                           ;doprnt.c: 1375: width = 0;
  1987  033D  1283               	bcf	3,5	;RP0=0, select bank0
  1988  033E  1303               	bcf	3,6	;RP1=0, select bank0
  1989  033F  01C1               	clrf	sprintf@width
  1990  0340  01C2               	clrf	sprintf@width+1
  1991  0341                     l2347:	
  1992                           
  1993                           ;doprnt.c: 1376: }
  1994                           ;doprnt.c: 1381: if(width > c)
  1995  0341  0843               	movf	sprintf@c,w
  1996  0342  00B1               	movwf	??_sprintf
  1997  0343  01B2               	clrf	??_sprintf+1
  1998  0344  1BB1               	btfsc	??_sprintf,7
  1999  0345  03B2               	decf	??_sprintf+1,f
  2000  0346  0832               	movf	??_sprintf+1,w
  2001  0347  3A80               	xorlw	128
  2002  0348  00B3               	movwf	??_sprintf+2
  2003  0349  0842               	movf	sprintf@width+1,w
  2004  034A  3A80               	xorlw	128
  2005  034B  0233               	subwf	??_sprintf+2,w
  2006  034C  1D03               	skipz
  2007  034D  2B50               	goto	u2685
  2008  034E  0841               	movf	sprintf@width,w
  2009  034F  0231               	subwf	??_sprintf,w
  2010  0350                     u2685:	
  2011  0350  1803               	skipnc
  2012  0351  2B60               	goto	l2351
  2013                           
  2014                           ;doprnt.c: 1382: width -= c;
  2015  0352  1283               	bcf	3,5	;RP0=0, select bank0
  2016  0353  1303               	bcf	3,6	;RP1=0, select bank0
  2017  0354  0843               	movf	sprintf@c,w
  2018  0355  00B1               	movwf	??_sprintf
  2019  0356  01B2               	clrf	??_sprintf+1
  2020  0357  1BB1               	btfsc	??_sprintf,7
  2021  0358  03B2               	decf	??_sprintf+1,f
  2022  0359  0831               	movf	??_sprintf,w
  2023  035A  02C1               	subwf	sprintf@width,f
  2024  035B  0832               	movf	??_sprintf+1,w
  2025  035C  1C03               	skipc
  2026  035D  03C2               	decf	sprintf@width+1,f
  2027  035E  02C2               	subwf	sprintf@width+1,f
  2028  035F  2B64               	goto	l2353
  2029  0360                     l2351:	
  2030                           
  2031                           ;doprnt.c: 1383: else
  2032                           ;doprnt.c: 1384: width = 0;
  2033  0360  1283               	bcf	3,5	;RP0=0, select bank0
  2034  0361  1303               	bcf	3,6	;RP1=0, select bank0
  2035  0362  01C1               	clrf	sprintf@width
  2036  0363  01C2               	clrf	sprintf@width+1
  2037  0364                     l2353:	
  2038                           
  2039                           ;doprnt.c: 1387: if(flag & 0x04) {
  2040  0364  1D45               	btfss	sprintf@flag,2
  2041  0365  2BBB               	goto	l2389
  2042                           
  2043                           ;doprnt.c: 1392: if(flag & 0x03)
  2044  0366  3003               	movlw	3
  2045  0367  0545               	andwf	sprintf@flag,w
  2046  0368  00B1               	movwf	??_sprintf
  2047  0369  3000               	movlw	0
  2048  036A  0546               	andwf	sprintf@flag+1,w
  2049  036B  00B2               	movwf	??_sprintf+1
  2050  036C  0831               	movf	??_sprintf,w
  2051  036D  0432               	iorwf	??_sprintf+1,w
  2052  036E  1903               	btfsc	3,2
  2053  036F  2B72               	goto	l239
  2054                           
  2055                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  2056  0370  302D               	movlw	45
  2057  0371  2B75               	goto	L14
  2058  0372                     l239:	
  2059                           
  2060                           ;doprnt.c: 1396: else
  2061                           ;doprnt.c: 1399: if(flag & 0x01)
  2062  0372  1C45               	btfss	sprintf@flag,0
  2063  0373  2B7B               	goto	l2365
  2064                           
  2065                           ;doprnt.c: 1400: ((*sp++ = (' ')));
  2066  0374  3020               	movlw	32
  2067  0375                     L14:	
  2068  0375  00B1               	movwf	??_sprintf
  2069  0376  0844               	movf	sprintf@sp,w
  2070  0377  0084               	movwf	4
  2071  0378  0831               	movf	??_sprintf,w
  2072  0379  1383               	bcf	3,7	;select IRP bank0
  2073  037A  2BA0               	goto	L10
  2074  037B                     l2365:	
  2075                           
  2076                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  2077  037B  30C0               	movlw	192
  2078  037C  0545               	andwf	sprintf@flag,w
  2079  037D  00B1               	movwf	??_sprintf
  2080  037E  3008               	movlw	8
  2081  037F  0546               	andwf	sprintf@flag+1,w
  2082  0380  00B2               	movwf	??_sprintf+1
  2083  0381  3080               	movlw	128
  2084  0382  0631               	xorwf	??_sprintf,w
  2085  0383  3008               	movlw	8
  2086  0384  1903               	skipnz
  2087  0385  0632               	xorwf	??_sprintf+1,w
  2088  0386  1D03               	btfss	3,2
  2089  0387  2BA5               	goto	l2381
  2090                           
  2091                           ;doprnt.c: 1404: ((*sp++ = ('0')));
  2092  0388  3030               	movlw	48
  2093  0389  00B1               	movwf	??_sprintf
  2094  038A  0844               	movf	sprintf@sp,w
  2095  038B  0084               	movwf	4
  2096  038C  0831               	movf	??_sprintf,w
  2097  038D  1383               	bcf	3,7	;select IRP bank0
  2098  038E  0080               	movwf	0
  2099  038F  3001               	movlw	1
  2100  0390  00B1               	movwf	??_sprintf
  2101  0391  0831               	movf	??_sprintf,w
  2102  0392  07C4               	addwf	sprintf@sp,f
  2103                           
  2104                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  2105  0393  1AC5               	btfsc	sprintf@flag,5
  2106  0394  2B97               	goto	l2375
  2107  0395  3078               	movlw	120
  2108  0396  2B98               	goto	L2
  2109  0397                     l2375:	
  2110  0397  3058               	movlw	88
  2111  0398                     L2:	
  2112  0398  00B5               	movwf	_sprintf$192
  2113  0399  3000               	movlw	0
  2114  039A  00B6               	movwf	_sprintf$192+1
  2115  039B  0835               	movf	_sprintf$192,w
  2116  039C  00B1               	movwf	??_sprintf
  2117  039D  0844               	movf	sprintf@sp,w
  2118  039E  0084               	movwf	4
  2119  039F  0831               	movf	??_sprintf,w
  2120  03A0                     L10:	
  2121  03A0  0080               	movwf	0
  2122  03A1  3001               	movlw	1
  2123  03A2  00B1               	movwf	??_sprintf
  2124  03A3  0831               	movf	??_sprintf,w
  2125  03A4  07C4               	addwf	sprintf@sp,f
  2126  03A5                     l2381:	
  2127                           
  2128                           ;doprnt.c: 1412: }
  2129                           ;doprnt.c: 1415: if(width)
  2130  03A5  0841               	movf	sprintf@width,w
  2131  03A6  0442               	iorwf	sprintf@width+1,w
  2132  03A7  1903               	btfsc	3,2
  2133  03A8  2CB1               	goto	l2453
  2134                           
  2135                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2136                           
  2137                           ;doprnt.c: 1416: do
  2138  03A9  3030               	movlw	48
  2139  03AA  00B1               	movwf	??_sprintf
  2140  03AB  0844               	movf	sprintf@sp,w
  2141  03AC  0084               	movwf	4
  2142  03AD  0831               	movf	??_sprintf,w
  2143  03AE  1383               	bcf	3,7	;select IRP bank0
  2144  03AF  0080               	movwf	0
  2145  03B0  3001               	movlw	1
  2146  03B1  00B1               	movwf	??_sprintf
  2147  03B2  0831               	movf	??_sprintf,w
  2148  03B3  07C4               	addwf	sprintf@sp,f
  2149                           
  2150                           ;doprnt.c: 1418: while(--width);
  2151  03B4  30FF               	movlw	255
  2152  03B5  07C1               	addwf	sprintf@width,f
  2153  03B6  1803               	skipnc
  2154  03B7  0AC2               	incf	sprintf@width+1,f
  2155  03B8  30FF               	movlw	255
  2156  03B9  07C2               	addwf	sprintf@width+1,f
  2157  03BA  2BA5               	goto	l2381
  2158  03BB                     l2389:	
  2159                           ;doprnt.c: 1420: } else
  2160                           
  2161                           
  2162                           ;doprnt.c: 1422: {
  2163                           ;doprnt.c: 1424: if(width
  2164                           ;doprnt.c: 1426: && !(flag & 0x08)
  2165                           ;doprnt.c: 1428: )
  2166  03BB  0841               	movf	sprintf@width,w
  2167  03BC  0442               	iorwf	sprintf@width+1,w
  2168  03BD  1D03               	btfss	3,2
  2169  03BE  19C5               	btfsc	sprintf@flag,3
  2170  03BF  2BD5               	goto	l2399
  2171  03C0                     l2393:	
  2172                           ;doprnt.c: 1429: do
  2173                           
  2174                           
  2175                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2176  03C0  3020               	movlw	32
  2177  03C1  00B1               	movwf	??_sprintf
  2178  03C2  0844               	movf	sprintf@sp,w
  2179  03C3  0084               	movwf	4
  2180  03C4  0831               	movf	??_sprintf,w
  2181  03C5  1383               	bcf	3,7	;select IRP bank0
  2182  03C6  0080               	movwf	0
  2183  03C7  3001               	movlw	1
  2184  03C8  00B1               	movwf	??_sprintf
  2185  03C9  0831               	movf	??_sprintf,w
  2186  03CA  07C4               	addwf	sprintf@sp,f
  2187                           
  2188                           ;doprnt.c: 1431: while(--width);
  2189  03CB  30FF               	movlw	255
  2190  03CC  07C1               	addwf	sprintf@width,f
  2191  03CD  1803               	skipnc
  2192  03CE  0AC2               	incf	sprintf@width+1,f
  2193  03CF  30FF               	movlw	255
  2194  03D0  07C2               	addwf	sprintf@width+1,f
  2195  03D1  0841               	movf	sprintf@width,w
  2196  03D2  0442               	iorwf	sprintf@width+1,w
  2197  03D3  1D03               	btfss	3,2
  2198  03D4  2BC0               	goto	l2393
  2199  03D5                     l2399:	
  2200                           
  2201                           ;doprnt.c: 1438: if(flag & 0x03)
  2202  03D5  3003               	movlw	3
  2203  03D6  0545               	andwf	sprintf@flag,w
  2204  03D7  00B1               	movwf	??_sprintf
  2205  03D8  3000               	movlw	0
  2206  03D9  0546               	andwf	sprintf@flag+1,w
  2207  03DA  00B2               	movwf	??_sprintf+1
  2208  03DB  0831               	movf	??_sprintf,w
  2209  03DC  0432               	iorwf	??_sprintf+1,w
  2210  03DD  1903               	btfsc	3,2
  2211  03DE  2BE1               	goto	l255
  2212                           
  2213                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2214  03DF  302D               	movlw	45
  2215  03E0  2BE4               	goto	L11
  2216  03E1                     l255:	
  2217                           
  2218                           ;doprnt.c: 1443: else if(flag & 0x01)
  2219  03E1  1C45               	btfss	sprintf@flag,0
  2220  03E2  2BEE               	goto	l2409
  2221                           
  2222                           ;doprnt.c: 1444: ((*sp++ = (' ')));
  2223  03E3  3020               	movlw	32
  2224  03E4                     L11:	
  2225  03E4  00B1               	movwf	??_sprintf
  2226  03E5  0844               	movf	sprintf@sp,w
  2227  03E6  0084               	movwf	4
  2228  03E7  0831               	movf	??_sprintf,w
  2229  03E8  1383               	bcf	3,7	;select IRP bank0
  2230  03E9  0080               	movwf	0
  2231  03EA  3001               	movlw	1
  2232  03EB  00B1               	movwf	??_sprintf
  2233  03EC  0831               	movf	??_sprintf,w
  2234  03ED  07C4               	addwf	sprintf@sp,f
  2235  03EE                     l2409:	
  2236                           
  2237                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  2238  03EE  30C0               	movlw	192
  2239  03EF  0545               	andwf	sprintf@flag,w
  2240  03F0  00B1               	movwf	??_sprintf
  2241  03F1  3008               	movlw	8
  2242  03F2  0546               	andwf	sprintf@flag+1,w
  2243  03F3  00B2               	movwf	??_sprintf+1
  2244  03F4  3040               	movlw	64
  2245  03F5  0631               	xorwf	??_sprintf,w
  2246  03F6  3008               	movlw	8
  2247  03F7  1903               	skipnz
  2248  03F8  0632               	xorwf	??_sprintf+1,w
  2249  03F9  1D03               	btfss	3,2
  2250  03FA  2BFD               	goto	l2415
  2251                           
  2252                           ;doprnt.c: 1449: ((*sp++ = ('0')));
  2253  03FB  3030               	movlw	48
  2254  03FC  2CA7               	goto	L15
  2255  03FD                     l2415:	
  2256                           
  2257                           ;doprnt.c: 1450: else
  2258                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  2259  03FD  30C0               	movlw	192
  2260  03FE  0545               	andwf	sprintf@flag,w
  2261  03FF  00B1               	movwf	??_sprintf
  2262  0400  3008               	movlw	8
  2263  0401  0546               	andwf	sprintf@flag+1,w
  2264  0402  00B2               	movwf	??_sprintf+1
  2265  0403  3080               	movlw	128
  2266  0404  0631               	xorwf	??_sprintf,w
  2267  0405  3008               	movlw	8
  2268  0406  1903               	skipnz
  2269  0407  0632               	xorwf	??_sprintf+1,w
  2270  0408  1D03               	btfss	3,2
  2271  0409  2CB1               	goto	l2453
  2272                           
  2273                           ;doprnt.c: 1458: ((*sp++ = ('0')));
  2274  040A  3030               	movlw	48
  2275  040B  00B1               	movwf	??_sprintf
  2276  040C  0844               	movf	sprintf@sp,w
  2277  040D  0084               	movwf	4
  2278  040E  0831               	movf	??_sprintf,w
  2279  040F  1383               	bcf	3,7	;select IRP bank0
  2280  0410  0080               	movwf	0
  2281  0411  3001               	movlw	1
  2282  0412  00B1               	movwf	??_sprintf
  2283  0413  0831               	movf	??_sprintf,w
  2284  0414  07C4               	addwf	sprintf@sp,f
  2285                           
  2286                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  2287  0415  1AC5               	btfsc	sprintf@flag,5
  2288  0416  2C19               	goto	l2425
  2289  0417  3078               	movlw	120
  2290  0418  2C1A               	goto	L3
  2291  0419                     l2425:	
  2292  0419  3058               	movlw	88
  2293  041A                     L3:	
  2294  041A  00B7               	movwf	_sprintf$193
  2295  041B  3000               	movlw	0
  2296  041C  00B8               	movwf	_sprintf$193+1
  2297  041D  0837               	movf	_sprintf$193,w
  2298  041E  00B1               	movwf	??_sprintf
  2299  041F  0844               	movf	sprintf@sp,w
  2300  0420  0084               	movwf	4
  2301  0421  0831               	movf	??_sprintf,w
  2302  0422  2CAC               	goto	L12
  2303  0423                     l2431:	
  2304                           ;doprnt.c: 1478: {
  2305                           ;doprnt.c: 1483: case 0x00:
  2306                           
  2307                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
  2308                           
  2309                           ;doprnt.c: 1466: }
  2310                           ;doprnt.c: 1469: }
  2311                           ;doprnt.c: 1474: while(prec--) {
  2312                           
  2313                           
  2314                           ;doprnt.c: 1486: case 0xC0:
  2315                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2316  0423  300A               	movlw	10
  2317  0424  00A8               	movwf	___lwmod@divisor
  2318  0425  3000               	movlw	0
  2319  0426  00A9               	movwf	___lwmod@divisor+1
  2320  0427  0840               	movf	sprintf@prec,w
  2321  0428  00B1               	movwf	??_sprintf
  2322  0429  0731               	addwf	??_sprintf,w
  2323  042A  3E0D               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2324  042B  0084               	movwf	4
  2325  042C  120A  118A  2736  120A  118A  	fcall	stringdir
  2326  0431  00A0               	movwf	___lwdiv@divisor
  2327  0432  120A  118A  2736  120A  118A  	fcall	stringdir
  2328  0437  00A1               	movwf	___lwdiv@divisor+1
  2329  0438  083F               	movf	sprintf@val+1,w
  2330  0439  00A3               	movwf	___lwdiv@dividend+1
  2331  043A  083E               	movf	sprintf@val,w
  2332  043B  00A2               	movwf	___lwdiv@dividend
  2333  043C  120A  118A  2799  120A  118A  	fcall	___lwdiv
  2334  0441  1283               	bcf	3,5	;RP0=0, select bank0
  2335  0442  1303               	bcf	3,6	;RP1=0, select bank0
  2336  0443  0821               	movf	?___lwdiv+1,w
  2337  0444  00AB               	movwf	___lwmod@dividend+1
  2338  0445  0820               	movf	?___lwdiv,w
  2339  0446  00AA               	movwf	___lwmod@dividend
  2340  0447  120A  158A  27CC  120A  118A  	fcall	___lwmod
  2341  044C  1283               	bcf	3,5	;RP0=0, select bank0
  2342  044D  1303               	bcf	3,6	;RP1=0, select bank0
  2343  044E  0828               	movf	?___lwmod,w
  2344  044F  2CA2               	goto	L13
  2345  0450                     l2433:	
  2346                           ;doprnt.c: 1497: case 0x80:
  2347                           
  2348                           ;doprnt.c: 1491: break;
  2349                           
  2350                           
  2351                           ;doprnt.c: 1499: {
  2352                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2353  0450  0840               	movf	sprintf@prec,w
  2354  0451  00B1               	movwf	??_sprintf
  2355  0452  0731               	addwf	??_sprintf,w
  2356  0453  3E17               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  2357  0454  0084               	movwf	4
  2358  0455  120A  118A  2736  120A  118A  	fcall	stringdir
  2359  045A  00A0               	movwf	___lwdiv@divisor
  2360  045B  120A  118A  2736  120A  118A  	fcall	stringdir
  2361  0460  00A1               	movwf	___lwdiv@divisor+1
  2362  0461  083F               	movf	sprintf@val+1,w
  2363  0462  00A3               	movwf	___lwdiv@dividend+1
  2364  0463  083E               	movf	sprintf@val,w
  2365  0464  00A2               	movwf	___lwdiv@dividend
  2366  0465  120A  118A  2799  120A  118A  	fcall	___lwdiv
  2367  046A  1283               	bcf	3,5	;RP0=0, select bank0
  2368  046B  1303               	bcf	3,6	;RP1=0, select bank0
  2369  046C  0820               	movf	?___lwdiv,w
  2370  046D  390F               	andlw	15
  2371  046E  00B2               	movwf	??_sprintf+1
  2372  046F  0832               	movf	??_sprintf+1,w
  2373  0470  00B4               	movwf	sprintf@idx
  2374                           
  2375                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  2376  0471  1AC5               	btfsc	sprintf@flag,5
  2377  0472  2C75               	goto	l2439
  2378  0473  3030               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  2379  0474  2C76               	goto	L5
  2380  0475                     l2439:	
  2381  0475  301F               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2382  0476                     L5:	
  2383  0476  00B1               	movwf	??_sprintf
  2384  0477  0831               	movf	??_sprintf,w
  2385  0478  00BA               	movwf	_sprintf$199
  2386  0479  0834               	movf	sprintf@idx,w
  2387  047A  073A               	addwf	_sprintf$199,w
  2388  047B  0084               	movwf	4
  2389  047C  120A  118A  2736  120A  118A  	fcall	stringdir
  2390  0481  00B1               	movwf	??_sprintf
  2391  0482  0831               	movf	??_sprintf,w
  2392  0483  2CA5               	goto	L6
  2393  0484                     l2443:	
  2394                           ;doprnt.c: 1516: case 0x40:
  2395                           
  2396                           ;doprnt.c: 1508: }
  2397                           ;doprnt.c: 1510: break;
  2398                           
  2399                           
  2400                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  2401  0484  0840               	movf	sprintf@prec,w
  2402  0485  00B1               	movwf	??_sprintf
  2403  0486  0731               	addwf	??_sprintf,w
  2404  0487  3E01               	addlw	low ((_octpowers-__stringbase)| (0+32768))
  2405  0488  0084               	movwf	4
  2406  0489  120A  118A  2736  120A  118A  	fcall	stringdir
  2407  048E  00A0               	movwf	___lwdiv@divisor
  2408  048F  120A  118A  2736  120A  118A  	fcall	stringdir
  2409  0494  00A1               	movwf	___lwdiv@divisor+1
  2410  0495  083F               	movf	sprintf@val+1,w
  2411  0496  00A3               	movwf	___lwdiv@dividend+1
  2412  0497  083E               	movf	sprintf@val,w
  2413  0498  00A2               	movwf	___lwdiv@dividend
  2414  0499  120A  118A  2799  120A  118A  	fcall	___lwdiv
  2415  049E  1283               	bcf	3,5	;RP0=0, select bank0
  2416  049F  1303               	bcf	3,6	;RP1=0, select bank0
  2417  04A0  0820               	movf	?___lwdiv,w
  2418  04A1  3907               	andlw	7
  2419  04A2                     L13:	
  2420  04A2  3E30               	addlw	48
  2421  04A3  00B2               	movwf	??_sprintf+1
  2422  04A4  0832               	movf	??_sprintf+1,w
  2423  04A5                     L6:	
  2424  04A5  00C3               	movwf	sprintf@c
  2425  04A6                     l2449:	
  2426                           ;doprnt.c: 1523: }
  2427                           
  2428                           ;doprnt.c: 1520: break;
  2429                           
  2430                           
  2431                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2432  04A6  0843               	movf	sprintf@c,w
  2433  04A7                     L15:	
  2434  04A7  00B1               	movwf	??_sprintf
  2435  04A8  0844               	movf	sprintf@sp,w
  2436  04A9  0084               	movwf	4
  2437  04AA  0831               	movf	??_sprintf,w
  2438  04AB  1383               	bcf	3,7	;select IRP bank0
  2439  04AC                     L12:	
  2440  04AC  0080               	movwf	0
  2441  04AD  3001               	movlw	1
  2442  04AE  00B1               	movwf	??_sprintf
  2443  04AF  0831               	movf	??_sprintf,w
  2444  04B0  07C4               	addwf	sprintf@sp,f
  2445  04B1                     l2453:	
  2446  04B1  30FF               	movlw	255
  2447  04B2  00B1               	movwf	??_sprintf
  2448  04B3  0831               	movf	??_sprintf,w
  2449  04B4  07C0               	addwf	sprintf@prec,f
  2450  04B5  0A40               	incf	sprintf@prec,w
  2451  04B6  1903               	btfsc	3,2
  2452  04B7  2CC8               	goto	l277
  2453  04B8  0845               	movf	sprintf@flag,w
  2454  04B9  39C0               	andlw	192
  2455                           
  2456                           ; Switch size 1, requested type "space"
  2457                           ; Number of cases is 4, Range of values is 0 to 192
  2458                           ; switch strategies available:
  2459                           ; Name         Instructions Cycles
  2460                           ; simple_byte           13     7 (average)
  2461                           ; jumptable            260     6 (fixed)
  2462                           ;	Chosen strategy is simple_byte
  2463  04BA  3A00               	xorlw	0	; case 0
  2464  04BB  1903               	skipnz
  2465  04BC  2C23               	goto	l2431
  2466  04BD  3A40               	xorlw	64	; case 64
  2467  04BE  1903               	skipnz
  2468  04BF  2C84               	goto	l2443
  2469  04C0  3AC0               	xorlw	192	; case 128
  2470  04C1  1903               	skipnz
  2471  04C2  2C50               	goto	l2433
  2472  04C3  3A40               	xorlw	64	; case 192
  2473  04C4  1903               	skipnz
  2474  04C5  2C23               	goto	l2431
  2475  04C6  2CA6               	goto	l2449
  2476  04C7  2CA6               	goto	l2449
  2477  04C8                     l277:	
  2478                           
  2479                           ;doprnt.c: 1525: }
  2480                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  2481  04C8  1DC5               	btfss	sprintf@flag,3
  2482  04C9  2832               	goto	l2463
  2483  04CA  0842               	movf	sprintf@width+1,w
  2484  04CB  3A80               	xorlw	128
  2485  04CC  00FF               	movwf	127
  2486  04CD  3080               	movlw	128
  2487  04CE  027F               	subwf	127,w
  2488  04CF  1D03               	skipz
  2489  04D0  2CD3               	goto	u2875
  2490  04D1  3001               	movlw	1
  2491  04D2  0241               	subwf	sprintf@width,w
  2492  04D3                     u2875:	
  2493  04D3  1C03               	skipc
  2494  04D4  2832               	goto	l2463
  2495  04D5                     l2457:	
  2496                           ;doprnt.c: 1529: do
  2497                           
  2498                           
  2499                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  2500  04D5  3020               	movlw	32
  2501  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  2502  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  2503  04D8  00B1               	movwf	??_sprintf
  2504  04D9  0844               	movf	sprintf@sp,w
  2505  04DA  0084               	movwf	4
  2506  04DB  0831               	movf	??_sprintf,w
  2507  04DC  1383               	bcf	3,7	;select IRP bank0
  2508  04DD  0080               	movwf	0
  2509  04DE  3001               	movlw	1
  2510  04DF  00B1               	movwf	??_sprintf
  2511  04E0  0831               	movf	??_sprintf,w
  2512  04E1  07C4               	addwf	sprintf@sp,f
  2513                           
  2514                           ;doprnt.c: 1531: while(--width);
  2515  04E2  30FF               	movlw	255
  2516  04E3  07C1               	addwf	sprintf@width,f
  2517  04E4  1803               	skipnc
  2518  04E5  0AC2               	incf	sprintf@width+1,f
  2519  04E6  30FF               	movlw	255
  2520  04E7  07C2               	addwf	sprintf@width+1,f
  2521  04E8  0841               	movf	sprintf@width,w
  2522  04E9  0442               	iorwf	sprintf@width+1,w
  2523  04EA  1903               	btfsc	3,2
  2524  04EB  2832               	goto	l2463
  2525  04EC  2CD5               	goto	l2457
  2526  04ED                     l2465:	
  2527                           ;doprnt.c: 1533: }
  2528                           ;doprnt.c: 1535: alldone:
  2529                           
  2530                           
  2531                           ;doprnt.c: 1538: *sp = 0;
  2532  04ED  0844               	movf	sprintf@sp,w
  2533  04EE  0084               	movwf	4
  2534  04EF  1383               	bcf	3,7	;select IRP bank0
  2535  04F0  0180               	clrf	0
  2536  04F1  0008               	return
  2537  04F2                     __end_of_sprintf:	
  2538                           ;doprnt.c: 1540: return 0;
  2539                           ;	Return value of _sprintf is never used
  2540                           
  2541                           
  2542                           	psect	text2
  2543  0F14                     __ptext2:	
  2544 ;; *************** function _isdigit *****************
  2545 ;; Defined at:
  2546 ;;		line 8 in file "D:\Program Files\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;  c               1    wreg     unsigned char 
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;  c               1    1[BANK0 ] unsigned char 
  2551 ;; Return value:  Size  Location     Type
  2552 ;;		None               void
  2553 ;; Registers used:
  2554 ;;		wreg, status,2, status,0
  2555 ;; Tracked objects:
  2556 ;;		On entry : 0/0
  2557 ;;		On exit  : 0/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2560 ;;      Params:         0       0       0       0       0
  2561 ;;      Locals:         0       2       0       0       0
  2562 ;;      Temps:          0       0       0       0       0
  2563 ;;      Totals:         0       2       0       0       0
  2564 ;;Total ram usage:        2 bytes
  2565 ;; Hardware stack levels used:    1
  2566 ;; Hardware stack levels required when called:    1
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_sprintf
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           
  2575                           ;psect for function _isdigit
  2576  0F14                     _isdigit:	
  2577                           
  2578                           ;incstack = 0
  2579                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2580                           ;isdigit@c stored from wreg
  2581  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  2582  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  2583  0F16  00A1               	movwf	isdigit@c
  2584  0F17  01A0               	clrf	_isdigit$385
  2585  0F18  303A               	movlw	58
  2586  0F19  0221               	subwf	isdigit@c,w
  2587  0F1A  1803               	skipnc
  2588  0F1B  2F22               	goto	l2087
  2589  0F1C  3030               	movlw	48
  2590  0F1D  0221               	subwf	isdigit@c,w
  2591  0F1E  1C03               	skipc
  2592  0F1F  2F22               	goto	l2087
  2593  0F20  01A0               	clrf	_isdigit$385
  2594  0F21  0AA0               	incf	_isdigit$385,f
  2595  0F22                     l2087:	
  2596  0F22  0C20               	rrf	_isdigit$385,w
  2597  0F23  0008               	return
  2598  0F24                     __end_of_isdigit:	
  2599                           
  2600                           	psect	text3
  2601  07D7                     __ptext3:	
  2602 ;; *************** function ___wmul *****************
  2603 ;; Defined at:
  2604 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2607 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;  product         2    4[BANK0 ] unsigned int 
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  2    0[BANK0 ] unsigned int 
  2612 ;; Registers used:
  2613 ;;		wreg, status,2, status,0
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2619 ;;      Params:         0       4       0       0       0
  2620 ;;      Locals:         0       2       0       0       0
  2621 ;;      Temps:          0       0       0       0       0
  2622 ;;      Totals:         0       6       0       0       0
  2623 ;;Total ram usage:        6 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    1
  2626 ;; This function calls:
  2627 ;;		Nothing
  2628 ;; This function is called by:
  2629 ;;		_sprintf
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           
  2634                           ;psect for function ___wmul
  2635  07D7                     ___wmul:	
  2636                           
  2637                           ;incstack = 0
  2638                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2639  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  2640  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  2641  07D9  01A4               	clrf	___wmul@product
  2642  07DA  01A5               	clrf	___wmul@product+1
  2643  07DB                     l2093:	
  2644  07DB  1C20               	btfss	___wmul@multiplier,0
  2645  07DC  2FE3               	goto	l366
  2646  07DD  0822               	movf	___wmul@multiplicand,w
  2647  07DE  07A4               	addwf	___wmul@product,f
  2648  07DF  1803               	skipnc
  2649  07E0  0AA5               	incf	___wmul@product+1,f
  2650  07E1  0823               	movf	___wmul@multiplicand+1,w
  2651  07E2  07A5               	addwf	___wmul@product+1,f
  2652  07E3                     l366:	
  2653  07E3  3001               	movlw	1
  2654  07E4                     u2265:	
  2655  07E4  1003               	clrc
  2656  07E5  0DA2               	rlf	___wmul@multiplicand,f
  2657  07E6  0DA3               	rlf	___wmul@multiplicand+1,f
  2658  07E7  3EFF               	addlw	-1
  2659  07E8  1D03               	skipz
  2660  07E9  2FE4               	goto	u2265
  2661  07EA  3001               	movlw	1
  2662  07EB                     u2275:	
  2663  07EB  1003               	clrc
  2664  07EC  0CA1               	rrf	___wmul@multiplier+1,f
  2665  07ED  0CA0               	rrf	___wmul@multiplier,f
  2666  07EE  3EFF               	addlw	-1
  2667  07EF  1D03               	skipz
  2668  07F0  2FEB               	goto	u2275
  2669  07F1  0820               	movf	___wmul@multiplier,w
  2670  07F2  0421               	iorwf	___wmul@multiplier+1,w
  2671  07F3  1D03               	btfss	3,2
  2672  07F4  2FDB               	goto	l2093
  2673  07F5  0825               	movf	___wmul@product+1,w
  2674  07F6  00A1               	movwf	?___wmul+1
  2675  07F7  0824               	movf	___wmul@product,w
  2676  07F8  00A0               	movwf	?___wmul
  2677  07F9  0008               	return
  2678  07FA                     __end_of___wmul:	
  2679                           
  2680                           	psect	text4
  2681  0FCC                     __ptext4:	
  2682 ;; *************** function ___lwmod *****************
  2683 ;; Defined at:
  2684 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;  divisor         2    8[BANK0 ] unsigned int 
  2687 ;;  dividend        2   10[BANK0 ] unsigned int 
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;  counter         1   13[BANK0 ] unsigned char 
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  2    8[BANK0 ] unsigned int 
  2692 ;; Registers used:
  2693 ;;		wreg, status,2, status,0
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2699 ;;      Params:         0       4       0       0       0
  2700 ;;      Locals:         0       1       0       0       0
  2701 ;;      Temps:          0       1       0       0       0
  2702 ;;      Totals:         0       6       0       0       0
  2703 ;;Total ram usage:        6 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    1
  2706 ;; This function calls:
  2707 ;;		Nothing
  2708 ;; This function is called by:
  2709 ;;		_sprintf
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           
  2714                           ;psect for function ___lwmod
  2715  0FCC                     ___lwmod:	
  2716                           
  2717                           ;incstack = 0
  2718                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2719  0FCC  1283               	bcf	3,5	;RP0=0, select bank0
  2720  0FCD  1303               	bcf	3,6	;RP1=0, select bank0
  2721  0FCE  0828               	movf	___lwmod@divisor,w
  2722  0FCF  0429               	iorwf	___lwmod@divisor+1,w
  2723  0FD0  1903               	btfsc	3,2
  2724  0FD1  2FFB               	goto	l1539
  2725  0FD2  01AD               	clrf	___lwmod@counter
  2726  0FD3  0AAD               	incf	___lwmod@counter,f
  2727  0FD4                     l1529:	
  2728  0FD4  1BA9               	btfsc	___lwmod@divisor+1,7
  2729  0FD5  2FE2               	goto	l1531
  2730  0FD6  3001               	movlw	1
  2731  0FD7                     u1345:	
  2732  0FD7  1003               	clrc
  2733  0FD8  0DA8               	rlf	___lwmod@divisor,f
  2734  0FD9  0DA9               	rlf	___lwmod@divisor+1,f
  2735  0FDA  3EFF               	addlw	-1
  2736  0FDB  1D03               	skipz
  2737  0FDC  2FD7               	goto	u1345
  2738  0FDD  3001               	movlw	1
  2739  0FDE  00AC               	movwf	??___lwmod
  2740  0FDF  082C               	movf	??___lwmod,w
  2741  0FE0  07AD               	addwf	___lwmod@counter,f
  2742  0FE1  2FD4               	goto	l1529
  2743  0FE2                     l1531:	
  2744  0FE2  0829               	movf	___lwmod@divisor+1,w
  2745  0FE3  022B               	subwf	___lwmod@dividend+1,w
  2746  0FE4  1D03               	skipz
  2747  0FE5  2FE8               	goto	u1365
  2748  0FE6  0828               	movf	___lwmod@divisor,w
  2749  0FE7  022A               	subwf	___lwmod@dividend,w
  2750  0FE8                     u1365:	
  2751  0FE8  1C03               	skipc
  2752  0FE9  2FF0               	goto	l1535
  2753  0FEA  0828               	movf	___lwmod@divisor,w
  2754  0FEB  02AA               	subwf	___lwmod@dividend,f
  2755  0FEC  0829               	movf	___lwmod@divisor+1,w
  2756  0FED  1C03               	skipc
  2757  0FEE  03AB               	decf	___lwmod@dividend+1,f
  2758  0FEF  02AB               	subwf	___lwmod@dividend+1,f
  2759  0FF0                     l1535:	
  2760  0FF0  3001               	movlw	1
  2761  0FF1                     u1375:	
  2762  0FF1  1003               	clrc
  2763  0FF2  0CA9               	rrf	___lwmod@divisor+1,f
  2764  0FF3  0CA8               	rrf	___lwmod@divisor,f
  2765  0FF4  3EFF               	addlw	-1
  2766  0FF5  1D03               	skipz
  2767  0FF6  2FF1               	goto	u1375
  2768  0FF7  3001               	movlw	1
  2769  0FF8  02AD               	subwf	___lwmod@counter,f
  2770  0FF9  1D03               	btfss	3,2
  2771  0FFA  2FE2               	goto	l1531
  2772  0FFB                     l1539:	
  2773  0FFB  082B               	movf	___lwmod@dividend+1,w
  2774  0FFC  00A9               	movwf	?___lwmod+1
  2775  0FFD  082A               	movf	___lwmod@dividend,w
  2776  0FFE  00A8               	movwf	?___lwmod
  2777  0FFF  0008               	return
  2778  1000                     __end_of___lwmod:	
  2779                           
  2780                           	psect	text5
  2781  0799                     __ptext5:	
  2782 ;; *************** function ___lwdiv *****************
  2783 ;; Defined at:
  2784 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2785 ;; Parameters:    Size  Location     Type
  2786 ;;  divisor         2    0[BANK0 ] unsigned int 
  2787 ;;  dividend        2    2[BANK0 ] unsigned int 
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;  quotient        2    5[BANK0 ] unsigned int 
  2790 ;;  counter         1    7[BANK0 ] unsigned char 
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  2    0[BANK0 ] unsigned int 
  2793 ;; Registers used:
  2794 ;;		wreg, status,2, status,0
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2800 ;;      Params:         0       4       0       0       0
  2801 ;;      Locals:         0       3       0       0       0
  2802 ;;      Temps:          0       1       0       0       0
  2803 ;;      Totals:         0       8       0       0       0
  2804 ;;Total ram usage:        8 bytes
  2805 ;; Hardware stack levels used:    1
  2806 ;; Hardware stack levels required when called:    1
  2807 ;; This function calls:
  2808 ;;		Nothing
  2809 ;; This function is called by:
  2810 ;;		_sprintf
  2811 ;; This function uses a non-reentrant model
  2812 ;;
  2813                           
  2814                           
  2815                           ;psect for function ___lwdiv
  2816  0799                     ___lwdiv:	
  2817                           
  2818                           ;incstack = 0
  2819                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2820  0799  1283               	bcf	3,5	;RP0=0, select bank0
  2821  079A  1303               	bcf	3,6	;RP1=0, select bank0
  2822  079B  01A5               	clrf	___lwdiv@quotient
  2823  079C  01A6               	clrf	___lwdiv@quotient+1
  2824  079D  0820               	movf	___lwdiv@divisor,w
  2825  079E  0421               	iorwf	___lwdiv@divisor+1,w
  2826  079F  1903               	btfsc	3,2
  2827  07A0  2FD2               	goto	l1517
  2828  07A1  01A7               	clrf	___lwdiv@counter
  2829  07A2  0AA7               	incf	___lwdiv@counter,f
  2830  07A3                     l1505:	
  2831  07A3  1BA1               	btfsc	___lwdiv@divisor+1,7
  2832  07A4  2FB1               	goto	l1507
  2833  07A5  3001               	movlw	1
  2834  07A6                     u1275:	
  2835  07A6  1003               	clrc
  2836  07A7  0DA0               	rlf	___lwdiv@divisor,f
  2837  07A8  0DA1               	rlf	___lwdiv@divisor+1,f
  2838  07A9  3EFF               	addlw	-1
  2839  07AA  1D03               	skipz
  2840  07AB  2FA6               	goto	u1275
  2841  07AC  3001               	movlw	1
  2842  07AD  00A4               	movwf	??___lwdiv
  2843  07AE  0824               	movf	??___lwdiv,w
  2844  07AF  07A7               	addwf	___lwdiv@counter,f
  2845  07B0  2FA3               	goto	l1505
  2846  07B1                     l1507:	
  2847  07B1  3001               	movlw	1
  2848  07B2                     u1295:	
  2849  07B2  1003               	clrc
  2850  07B3  0DA5               	rlf	___lwdiv@quotient,f
  2851  07B4  0DA6               	rlf	___lwdiv@quotient+1,f
  2852  07B5  3EFF               	addlw	-1
  2853  07B6  1D03               	skipz
  2854  07B7  2FB2               	goto	u1295
  2855  07B8  0821               	movf	___lwdiv@divisor+1,w
  2856  07B9  0223               	subwf	___lwdiv@dividend+1,w
  2857  07BA  1D03               	skipz
  2858  07BB  2FBE               	goto	u1305
  2859  07BC  0820               	movf	___lwdiv@divisor,w
  2860  07BD  0222               	subwf	___lwdiv@dividend,w
  2861  07BE                     u1305:	
  2862  07BE  1C03               	skipc
  2863  07BF  2FC7               	goto	l1513
  2864  07C0  0820               	movf	___lwdiv@divisor,w
  2865  07C1  02A2               	subwf	___lwdiv@dividend,f
  2866  07C2  0821               	movf	___lwdiv@divisor+1,w
  2867  07C3  1C03               	skipc
  2868  07C4  03A3               	decf	___lwdiv@dividend+1,f
  2869  07C5  02A3               	subwf	___lwdiv@dividend+1,f
  2870  07C6  1425               	bsf	___lwdiv@quotient,0
  2871  07C7                     l1513:	
  2872  07C7  3001               	movlw	1
  2873  07C8                     u1315:	
  2874  07C8  1003               	clrc
  2875  07C9  0CA1               	rrf	___lwdiv@divisor+1,f
  2876  07CA  0CA0               	rrf	___lwdiv@divisor,f
  2877  07CB  3EFF               	addlw	-1
  2878  07CC  1D03               	skipz
  2879  07CD  2FC8               	goto	u1315
  2880  07CE  3001               	movlw	1
  2881  07CF  02A7               	subwf	___lwdiv@counter,f
  2882  07D0  1D03               	btfss	3,2
  2883  07D1  2FB1               	goto	l1507
  2884  07D2                     l1517:	
  2885  07D2  0826               	movf	___lwdiv@quotient+1,w
  2886  07D3  00A1               	movwf	?___lwdiv+1
  2887  07D4  0825               	movf	___lwdiv@quotient,w
  2888  07D5  00A0               	movwf	?___lwdiv
  2889  07D6  0008               	return
  2890  07D7                     __end_of___lwdiv:	
  2891                           
  2892                           	psect	text6
  2893  0F24                     __ptext6:	
  2894 ;; *************** function ___bmul *****************
  2895 ;; Defined at:
  2896 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v1.45\sources\common\Umul8.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;  multiplier      1    wreg     unsigned char 
  2899 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2900 ;; Auto vars:     Size  Location     Type
  2901 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2902 ;;  product         1    2[BANK0 ] unsigned char 
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  1    wreg      unsigned char 
  2905 ;; Registers used:
  2906 ;;		wreg, status,2, status,0
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2912 ;;      Params:         0       1       0       0       0
  2913 ;;      Locals:         0       2       0       0       0
  2914 ;;      Temps:          0       1       0       0       0
  2915 ;;      Totals:         0       4       0       0       0
  2916 ;;Total ram usage:        4 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:    1
  2919 ;; This function calls:
  2920 ;;		Nothing
  2921 ;; This function is called by:
  2922 ;;		_sprintf
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           
  2927                           ;psect for function ___bmul
  2928  0F24                     ___bmul:	
  2929                           
  2930                           ;incstack = 0
  2931                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2932                           ;___bmul@multiplier stored from wreg
  2933  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  2934  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  2935  0F26  00A3               	movwf	___bmul@multiplier
  2936  0F27  01A2               	clrf	___bmul@product
  2937  0F28                     l1483:	
  2938  0F28  1C23               	btfss	___bmul@multiplier,0
  2939  0F29  2F2E               	goto	l1487
  2940  0F2A  0820               	movf	___bmul@multiplicand,w
  2941  0F2B  00A1               	movwf	??___bmul
  2942  0F2C  0821               	movf	??___bmul,w
  2943  0F2D  07A2               	addwf	___bmul@product,f
  2944  0F2E                     l1487:	
  2945  0F2E  1003               	clrc
  2946  0F2F  0DA0               	rlf	___bmul@multiplicand,f
  2947  0F30  1003               	clrc
  2948  0F31  0CA3               	rrf	___bmul@multiplier,f
  2949  0F32  0823               	movf	___bmul@multiplier,w
  2950  0F33  1D03               	btfss	3,2
  2951  0F34  2F28               	goto	l1483
  2952  0F35  0822               	movf	___bmul@product,w
  2953  0F36  0008               	return
  2954  0F37                     __end_of___bmul:	
  2955                           
  2956                           	psect	text7
  2957  0F37                     __ptext7:	
  2958 ;; *************** function _lcd_printStringXY *****************
  2959 ;; Defined at:
  2960 ;;		line 189 in file "LCD.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;  str             2    8[BANK0 ] PTR unsigned char 
  2963 ;;		 -> RAM(512), 
  2964 ;;  x               1   10[BANK0 ] unsigned char 
  2965 ;;  y               1   11[BANK0 ] unsigned char 
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;		None
  2968 ;; Return value:  Size  Location     Type
  2969 ;;                  1    wreg      void 
  2970 ;; Registers used:
  2971 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2977 ;;      Params:         0       4       0       0       0
  2978 ;;      Locals:         0       0       0       0       0
  2979 ;;      Temps:          0       1       0       0       0
  2980 ;;      Totals:         0       5       0       0       0
  2981 ;;Total ram usage:        5 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    4
  2984 ;; This function calls:
  2985 ;;		_lcd_gotoxy
  2986 ;;		_lcd_printString
  2987 ;; This function is called by:
  2988 ;;		_main
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           
  2993                           ;psect for function _lcd_printStringXY
  2994  0F37                     _lcd_printStringXY:	
  2995                           
  2996                           ;LCD.c: 191: lcd_gotoxy(x,y);
  2997                           
  2998                           ;incstack = 0
  2999                           ; Regs used in _lcd_printStringXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3000  0F37  1283               	bcf	3,5	;RP0=0, select bank0
  3001  0F38  1303               	bcf	3,6	;RP1=0, select bank0
  3002  0F39  082B               	movf	lcd_printStringXY@y,w
  3003  0F3A  00AC               	movwf	??_lcd_printStringXY
  3004  0F3B  082C               	movf	??_lcd_printStringXY,w
  3005  0F3C  00A4               	movwf	lcd_gotoxy@y
  3006  0F3D  082A               	movf	lcd_printStringXY@x,w
  3007  0F3E  120A  118A  2590  120A  158A  	fcall	_lcd_gotoxy
  3008                           
  3009                           ;LCD.c: 192: lcd_printString(str);
  3010  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  3011  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  3012  0F45  0828               	movf	lcd_printStringXY@str,w
  3013  0F46  00A4               	movwf	lcd_printString@str
  3014  0F47  0829               	movf	lcd_printStringXY@str+1,w
  3015  0F48  00A5               	movwf	lcd_printString@str+1
  3016  0F49  120A  158A  277F   	fcall	_lcd_printString
  3017  0F4C  0008               	return
  3018  0F4D                     __end_of_lcd_printStringXY:	
  3019                           
  3020                           	psect	text8
  3021  0F7F                     __ptext8:	
  3022 ;; *************** function _lcd_printString *****************
  3023 ;; Defined at:
  3024 ;;		line 126 in file "LCD.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  str             2    4[BANK0 ] PTR unsigned char 
  3027 ;;		 -> RAM(512), 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;		None
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  1    wreg      void 
  3032 ;; Registers used:
  3033 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3039 ;;      Params:         0       2       0       0       0
  3040 ;;      Locals:         0       0       0       0       0
  3041 ;;      Temps:          0       0       0       0       0
  3042 ;;      Totals:         0       2       0       0       0
  3043 ;;Total ram usage:        2 bytes
  3044 ;; Hardware stack levels used:    1
  3045 ;; Hardware stack levels required when called:    3
  3046 ;; This function calls:
  3047 ;;		_lcd_Print_char
  3048 ;; This function is called by:
  3049 ;;		_lcd_printStringXY
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           
  3054                           ;psect for function _lcd_printString
  3055  0F7F                     _lcd_printString:	
  3056  0F7F                     l2035:	
  3057                           ;LCD.c: 128: while((*str) != '\0')
  3058                           
  3059                           ;incstack = 0
  3060                           ; Regs used in _lcd_printString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3061                           
  3062  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  3063  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  3064  0F81  0824               	movf	lcd_printString@str,w
  3065  0F82  0084               	movwf	4
  3066  0F83  1783               	bsf	3,7
  3067  0F84  1C25               	btfss	lcd_printString@str+1,0
  3068  0F85  1383               	bcf	3,7
  3069  0F86  0800               	movf	0,w
  3070  0F87  1903               	btfsc	3,2
  3071  0F88  0008               	return
  3072                           
  3073                           ;LCD.c: 129: {
  3074                           ;LCD.c: 130: lcd_Print_char(*str);
  3075  0F89  1283               	bcf	3,5	;RP0=0, select bank0
  3076  0F8A  1303               	bcf	3,6	;RP1=0, select bank0
  3077  0F8B  0824               	movf	lcd_printString@str,w
  3078  0F8C  0084               	movwf	4
  3079  0F8D  1783               	bsf	3,7
  3080  0F8E  1C25               	btfss	lcd_printString@str+1,0
  3081  0F8F  1383               	bcf	3,7
  3082  0F90  0800               	movf	0,w
  3083  0F91  120A  158A  279F  120A  158A  	fcall	_lcd_Print_char
  3084                           
  3085                           ;LCD.c: 131: str++;
  3086  0F96  3001               	movlw	1
  3087  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  3088  0F98  1303               	bcf	3,6	;RP1=0, select bank0
  3089  0F99  07A4               	addwf	lcd_printString@str,f
  3090  0F9A  1803               	skipnc
  3091  0F9B  0AA5               	incf	lcd_printString@str+1,f
  3092  0F9C  3000               	movlw	0
  3093  0F9D  07A5               	addwf	lcd_printString@str+1,f
  3094  0F9E  2F7F               	goto	l2035
  3095  0F9F                     __end_of_lcd_printString:	
  3096                           
  3097                           	psect	text9
  3098  0F9F                     __ptext9:	
  3099 ;; *************** function _lcd_Print_char *****************
  3100 ;; Defined at:
  3101 ;;		line 109 in file "LCD.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;  data            1    wreg     unsigned char 
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;  data            1    3[BANK0 ] unsigned char 
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		wreg, status,2, status,0, pclath, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3115 ;;      Params:         0       0       0       0       0
  3116 ;;      Locals:         0       1       0       0       0
  3117 ;;      Temps:          0       2       0       0       0
  3118 ;;      Totals:         0       3       0       0       0
  3119 ;;Total ram usage:        3 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; Hardware stack levels required when called:    2
  3122 ;; This function calls:
  3123 ;;		_Send_Data
  3124 ;; This function is called by:
  3125 ;;		_lcd_printString
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           
  3130                           ;psect for function _lcd_Print_char
  3131  0F9F                     _lcd_Print_char:	
  3132                           
  3133                           ;incstack = 0
  3134                           ; Regs used in _lcd_Print_char: [wreg+status,2+status,0+pclath+cstack]
  3135                           ;lcd_Print_char@data stored from wreg
  3136  0F9F  1283               	bcf	3,5	;RP0=0, select bank0
  3137  0FA0  1303               	bcf	3,6	;RP1=0, select bank0
  3138  0FA1  00A3               	movwf	lcd_Print_char@data
  3139                           
  3140                           ;LCD.c: 111: (PORTBbits.RB0=1);
  3141  0FA2  1406               	bsf	6,0	;volatile
  3142                           
  3143                           ;LCD.c: 112: Send_Data(data >> 4);
  3144  0FA3  0823               	movf	lcd_Print_char@data,w
  3145  0FA4  00A1               	movwf	??_lcd_Print_char
  3146  0FA5  3004               	movlw	4
  3147  0FA6                     u2155:	
  3148  0FA6  1003               	clrc
  3149  0FA7  0CA1               	rrf	??_lcd_Print_char,f
  3150  0FA8  3EFF               	addlw	-1
  3151  0FA9  1D03               	skipz
  3152  0FAA  2FA6               	goto	u2155
  3153  0FAB  0821               	movf	??_lcd_Print_char,w
  3154  0FAC  120A  158A  274D  120A  158A  	fcall	_Send_Data
  3155                           
  3156                           ;LCD.c: 113: (PORTBbits.RB2=1);
  3157  0FB1  1283               	bcf	3,5	;RP0=0, select bank0
  3158  0FB2  1303               	bcf	3,6	;RP1=0, select bank0
  3159  0FB3  1506               	bsf	6,2	;volatile
  3160                           
  3161                           ;LCD.c: 114: (PORTBbits.RB2=0);
  3162  0FB4  1106               	bcf	6,2	;volatile
  3163                           
  3164                           ;LCD.c: 115: Send_Data(data & 0x0F);
  3165  0FB5  0823               	movf	lcd_Print_char@data,w
  3166  0FB6  390F               	andlw	15
  3167  0FB7  120A  158A  274D  120A  158A  	fcall	_Send_Data
  3168                           
  3169                           ;LCD.c: 116: (PORTBbits.RB2=1);
  3170  0FBC  1283               	bcf	3,5	;RP0=0, select bank0
  3171  0FBD  1303               	bcf	3,6	;RP1=0, select bank0
  3172  0FBE  1506               	bsf	6,2	;volatile
  3173                           
  3174                           ;LCD.c: 117: (PORTBbits.RB2=0);
  3175  0FBF  1106               	bcf	6,2	;volatile
  3176                           
  3177                           ;LCD.c: 118: _delay((unsigned long)((4)*(8000000/4000.0)));
  3178  0FC0  300B               	movlw	11
  3179  0FC1  1283               	bcf	3,5	;RP0=0, select bank0
  3180  0FC2  1303               	bcf	3,6	;RP1=0, select bank0
  3181  0FC3  00A2               	movwf	??_lcd_Print_char+1
  3182  0FC4  3061               	movlw	97
  3183  0FC5  00A1               	movwf	??_lcd_Print_char
  3184  0FC6                     u2937:	
  3185  0FC6  0BA1               	decfsz	??_lcd_Print_char,f
  3186  0FC7  2FC6               	goto	u2937
  3187  0FC8  0BA2               	decfsz	??_lcd_Print_char+1,f
  3188  0FC9  2FC6               	goto	u2937
  3189  0FCA  2FCB               	nop2
  3190  0FCB  0008               	return
  3191  0FCC                     __end_of_lcd_Print_char:	
  3192                           
  3193                           	psect	text10
  3194  0590                     __ptext10:	
  3195 ;; *************** function _lcd_gotoxy *****************
  3196 ;; Defined at:
  3197 ;;		line 138 in file "LCD.c"
  3198 ;; Parameters:    Size  Location     Type
  3199 ;;  x               1    wreg     unsigned char 
  3200 ;;  y               1    4[BANK0 ] unsigned char 
  3201 ;; Auto vars:     Size  Location     Type
  3202 ;;  x               1    6[BANK0 ] unsigned char 
  3203 ;;  temp            1    7[BANK0 ] unsigned char 
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  1    wreg      void 
  3206 ;; Registers used:
  3207 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3213 ;;      Params:         0       1       0       0       0
  3214 ;;      Locals:         0       2       0       0       0
  3215 ;;      Temps:          0       1       0       0       0
  3216 ;;      Totals:         0       4       0       0       0
  3217 ;;Total ram usage:        4 bytes
  3218 ;; Hardware stack levels used:    1
  3219 ;; Hardware stack levels required when called:    3
  3220 ;; This function calls:
  3221 ;;		_Send_command
  3222 ;; This function is called by:
  3223 ;;		_lcd_printStringXY
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           
  3228                           ;psect for function _lcd_gotoxy
  3229  0590                     _lcd_gotoxy:	
  3230                           
  3231                           ;incstack = 0
  3232                           ; Regs used in _lcd_gotoxy: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3233                           ;lcd_gotoxy@x stored from wreg
  3234  0590  1283               	bcf	3,5	;RP0=0, select bank0
  3235  0591  1303               	bcf	3,6	;RP1=0, select bank0
  3236  0592  00A6               	movwf	lcd_gotoxy@x
  3237                           
  3238                           ;LCD.c: 140: if(x > 39) x = 39;
  3239  0593  3028               	movlw	40
  3240  0594  0226               	subwf	lcd_gotoxy@x,w
  3241  0595  1C03               	skipc
  3242  0596  2D9B               	goto	l2043
  3243  0597  3027               	movlw	39
  3244  0598  00A5               	movwf	??_lcd_gotoxy
  3245  0599  0825               	movf	??_lcd_gotoxy,w
  3246  059A  00A6               	movwf	lcd_gotoxy@x
  3247  059B                     l2043:	
  3248                           ;LCD.c: 141: if(x < 0) x = 0;
  3249                           
  3250                           
  3251                           ;LCD.c: 142: if(y > 3) y = 3;
  3252  059B  3004               	movlw	4
  3253  059C  0224               	subwf	lcd_gotoxy@y,w
  3254  059D  1C03               	skipc
  3255  059E  2DA3               	goto	l48
  3256  059F  3003               	movlw	3
  3257  05A0  00A5               	movwf	??_lcd_gotoxy
  3258  05A1  0825               	movf	??_lcd_gotoxy,w
  3259  05A2  00A4               	movwf	lcd_gotoxy@y
  3260  05A3                     l48:	
  3261                           ;LCD.c: 143: if(y < 0) y = 0;
  3262                           
  3263                           
  3264                           ;LCD.c: 145: char temp = 0x00;
  3265  05A3  01A7               	clrf	lcd_gotoxy@temp
  3266                           
  3267                           ;LCD.c: 147: (PORTBbits.RB0=0);
  3268  05A4  1006               	bcf	6,0	;volatile
  3269                           
  3270                           ;LCD.c: 149: switch (y)
  3271  05A5  2E18               	goto	l2077
  3272  05A6                     l2051:	
  3273                           ;LCD.c: 150: {
  3274                           ;LCD.c: 151: case 0:
  3275                           
  3276                           
  3277                           ;LCD.c: 152: {
  3278                           ;LCD.c: 153: temp |= (0x80 + x);
  3279  05A6  0826               	movf	lcd_gotoxy@x,w
  3280  05A7  3E80               	addlw	128
  3281  05A8  00A5               	movwf	??_lcd_gotoxy
  3282  05A9  0825               	movf	??_lcd_gotoxy,w
  3283  05AA  04A7               	iorwf	lcd_gotoxy@temp,f
  3284                           
  3285                           ;LCD.c: 154: Send_command(temp >> 4);
  3286  05AB  0827               	movf	lcd_gotoxy@temp,w
  3287  05AC  00A5               	movwf	??_lcd_gotoxy
  3288  05AD  3004               	movlw	4
  3289  05AE                     u2195:	
  3290  05AE  1003               	clrc
  3291  05AF  0CA5               	rrf	??_lcd_gotoxy,f
  3292  05B0  3EFF               	addlw	-1
  3293  05B1  1D03               	skipz
  3294  05B2  2DAE               	goto	u2195
  3295  05B3  0825               	movf	??_lcd_gotoxy,w
  3296  05B4  120A  158A  2765  120A  118A  	fcall	_Send_command
  3297                           
  3298                           ;LCD.c: 155: Send_command(temp & 0x0F);
  3299  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  3300  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  3301  05BB  0827               	movf	lcd_gotoxy@temp,w
  3302  05BC  390F               	andlw	15
  3303  05BD  120A  158A  2765   	fcall	_Send_command
  3304                           
  3305                           ;LCD.c: 156: break;
  3306  05C0  0008               	return
  3307  05C1                     l2057:	
  3308                           ;LCD.c: 157: }
  3309                           ;LCD.c: 158: case 1:
  3310                           
  3311                           
  3312                           ;LCD.c: 159: {
  3313                           ;LCD.c: 160: temp |= (0xC0 + x);
  3314  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  3315  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  3316  05C3  0826               	movf	lcd_gotoxy@x,w
  3317  05C4  3EC0               	addlw	192
  3318  05C5  00A5               	movwf	??_lcd_gotoxy
  3319  05C6  0825               	movf	??_lcd_gotoxy,w
  3320  05C7  04A7               	iorwf	lcd_gotoxy@temp,f
  3321                           
  3322                           ;LCD.c: 161: Send_command(temp >> 4);
  3323  05C8  0827               	movf	lcd_gotoxy@temp,w
  3324  05C9  00A5               	movwf	??_lcd_gotoxy
  3325  05CA  3004               	movlw	4
  3326  05CB                     u2205:	
  3327  05CB  1003               	clrc
  3328  05CC  0CA5               	rrf	??_lcd_gotoxy,f
  3329  05CD  3EFF               	addlw	-1
  3330  05CE  1D03               	skipz
  3331  05CF  2DCB               	goto	u2205
  3332  05D0  0825               	movf	??_lcd_gotoxy,w
  3333  05D1  120A  158A  2765  120A  118A  	fcall	_Send_command
  3334                           
  3335                           ;LCD.c: 162: Send_command(temp & 0x0F);
  3336  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  3337  05D7  1303               	bcf	3,6	;RP1=0, select bank0
  3338  05D8  0827               	movf	lcd_gotoxy@temp,w
  3339  05D9  390F               	andlw	15
  3340  05DA  120A  158A  2765   	fcall	_Send_command
  3341                           
  3342                           ;LCD.c: 163: break;
  3343  05DD  0008               	return
  3344  05DE                     l2063:	
  3345                           ;LCD.c: 164: }
  3346                           ;LCD.c: 165: case 2:
  3347                           
  3348                           
  3349                           ;LCD.c: 166: {
  3350                           ;LCD.c: 167: temp |= (0x94 + x);
  3351  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  3352  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  3353  05E0  0826               	movf	lcd_gotoxy@x,w
  3354  05E1  3E94               	addlw	148
  3355  05E2  00A5               	movwf	??_lcd_gotoxy
  3356  05E3  0825               	movf	??_lcd_gotoxy,w
  3357  05E4  04A7               	iorwf	lcd_gotoxy@temp,f
  3358                           
  3359                           ;LCD.c: 168: Send_command(temp >> 4);
  3360  05E5  0827               	movf	lcd_gotoxy@temp,w
  3361  05E6  00A5               	movwf	??_lcd_gotoxy
  3362  05E7  3004               	movlw	4
  3363  05E8                     u2215:	
  3364  05E8  1003               	clrc
  3365  05E9  0CA5               	rrf	??_lcd_gotoxy,f
  3366  05EA  3EFF               	addlw	-1
  3367  05EB  1D03               	skipz
  3368  05EC  2DE8               	goto	u2215
  3369  05ED  0825               	movf	??_lcd_gotoxy,w
  3370  05EE  120A  158A  2765  120A  118A  	fcall	_Send_command
  3371                           
  3372                           ;LCD.c: 169: Send_command(temp & 0x0F);
  3373  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  3374  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  3375  05F5  0827               	movf	lcd_gotoxy@temp,w
  3376  05F6  390F               	andlw	15
  3377  05F7  120A  158A  2765   	fcall	_Send_command
  3378                           
  3379                           ;LCD.c: 170: break;
  3380  05FA  0008               	return
  3381  05FB                     l2069:	
  3382                           ;LCD.c: 171: }
  3383                           ;LCD.c: 172: case 3:
  3384                           
  3385                           
  3386                           ;LCD.c: 173: {
  3387                           ;LCD.c: 174: temp |= (0xD4 + x);
  3388  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  3389  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  3390  05FD  0826               	movf	lcd_gotoxy@x,w
  3391  05FE  3ED4               	addlw	212
  3392  05FF  00A5               	movwf	??_lcd_gotoxy
  3393  0600  0825               	movf	??_lcd_gotoxy,w
  3394  0601  04A7               	iorwf	lcd_gotoxy@temp,f
  3395                           
  3396                           ;LCD.c: 175: Send_command(temp >> 4);
  3397  0602  0827               	movf	lcd_gotoxy@temp,w
  3398  0603  00A5               	movwf	??_lcd_gotoxy
  3399  0604  3004               	movlw	4
  3400  0605                     u2225:	
  3401  0605  1003               	clrc
  3402  0606  0CA5               	rrf	??_lcd_gotoxy,f
  3403  0607  3EFF               	addlw	-1
  3404  0608  1D03               	skipz
  3405  0609  2E05               	goto	u2225
  3406  060A  0825               	movf	??_lcd_gotoxy,w
  3407  060B  120A  158A  2765  120A  118A  	fcall	_Send_command
  3408                           
  3409                           ;LCD.c: 176: Send_command(temp & 0x0F);
  3410  0610  1283               	bcf	3,5	;RP0=0, select bank0
  3411  0611  1303               	bcf	3,6	;RP1=0, select bank0
  3412  0612  0827               	movf	lcd_gotoxy@temp,w
  3413  0613  390F               	andlw	15
  3414  0614  120A  158A  2765   	fcall	_Send_command
  3415                           
  3416                           ;LCD.c: 178: }
  3417                           ;LCD.c: 179: }
  3418                           
  3419                           ;LCD.c: 177: break;
  3420  0617  0008               	return
  3421  0618                     l2077:	
  3422  0618  1283               	bcf	3,5	;RP0=0, select bank0
  3423  0619  1303               	bcf	3,6	;RP1=0, select bank0
  3424  061A  0824               	movf	lcd_gotoxy@y,w
  3425                           
  3426                           ; Switch size 1, requested type "space"
  3427                           ; Number of cases is 4, Range of values is 0 to 3
  3428                           ; switch strategies available:
  3429                           ; Name         Instructions Cycles
  3430                           ; simple_byte           13     7 (average)
  3431                           ; direct_byte           20     8 (fixed)
  3432                           ; jumptable            260     6 (fixed)
  3433                           ;	Chosen strategy is simple_byte
  3434  061B  3A00               	xorlw	0	; case 0
  3435  061C  1903               	skipnz
  3436  061D  2DA6               	goto	l2051
  3437  061E  3A01               	xorlw	1	; case 1
  3438  061F  1903               	skipnz
  3439  0620  2DC1               	goto	l2057
  3440  0621  3A03               	xorlw	3	; case 2
  3441  0622  1903               	skipnz
  3442  0623  2DDE               	goto	l2063
  3443  0624  3A01               	xorlw	1	; case 3
  3444  0625  1903               	skipnz
  3445  0626  2DFB               	goto	l2069
  3446  0627  2E28               	goto	l55
  3447  0628                     l55:	
  3448  0628  0008               	return
  3449  0629                     __end_of_lcd_gotoxy:	
  3450                           
  3451                           	psect	text11
  3452  04F2                     __ptext11:	
  3453 ;; *************** function _lcd_init *****************
  3454 ;; Defined at:
  3455 ;;		line 70 in file "LCD.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  lcd             1    wreg     unsigned char 
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;  lcd             1    6[BANK0 ] unsigned char 
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  1    wreg      void 
  3462 ;; Registers used:
  3463 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3469 ;;      Params:         0       0       0       0       0
  3470 ;;      Locals:         0       1       0       0       0
  3471 ;;      Temps:          0       2       0       0       0
  3472 ;;      Totals:         0       3       0       0       0
  3473 ;;Total ram usage:        3 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    3
  3476 ;; This function calls:
  3477 ;;		_Send_command
  3478 ;; This function is called by:
  3479 ;;		_main
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           
  3484                           ;psect for function _lcd_init
  3485  04F2                     _lcd_init:	
  3486                           
  3487                           ;incstack = 0
  3488                           ; Regs used in _lcd_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3489                           ;lcd_init@lcd stored from wreg
  3490  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  3491  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  3492  04F4  00A6               	movwf	lcd_init@lcd
  3493                           
  3494                           ;LCD.c: 72: TRISB=0x00;
  3495  04F5  1683               	bsf	3,5	;RP0=1, select bank1
  3496  04F6  1303               	bcf	3,6	;RP1=0, select bank1
  3497  04F7  0186               	clrf	6	;volatile
  3498                           
  3499                           ;LCD.c: 73: TRISD=0x00;
  3500  04F8  0188               	clrf	8	;volatile
  3501                           
  3502                           ;LCD.c: 75: switch (lcd)
  3503  04F9  2D06               	goto	l2117
  3504  04FA                     l2107:	
  3505                           ;LCD.c: 76: {
  3506                           ;LCD.c: 77: case 0: lcd = 0x0C; break;
  3507                           
  3508  04FA  300C               	movlw	12
  3509  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  3510  04FC  2D02               	goto	L18
  3511  04FD                     l2109:	
  3512                           ;LCD.c: 78: case 1: lcd = 0x0D; break;
  3513                           
  3514  04FD  300D               	movlw	13
  3515  04FE  2D02               	goto	L18
  3516  04FF                     l2111:	
  3517                           ;LCD.c: 79: case 2: lcd = 0x0E; break;
  3518                           
  3519  04FF  300E               	movlw	14
  3520  0500  2D02               	goto	L18
  3521  0501                     l2113:	
  3522                           ;LCD.c: 80: case 3: lcd = 0x0F; break;
  3523                           
  3524  0501  300F               	movlw	15
  3525  0502                     L18:	
  3526  0502  00A4               	movwf	??_lcd_init
  3527  0503  0824               	movf	??_lcd_init,w
  3528  0504  00A6               	movwf	lcd_init@lcd
  3529                           
  3530                           ;LCD.c: 81: }
  3531  0505  2D15               	goto	l2119
  3532  0506                     l2117:	
  3533  0506  1283               	bcf	3,5	;RP0=0, select bank0
  3534  0507  0826               	movf	lcd_init@lcd,w
  3535                           
  3536                           ; Switch size 1, requested type "space"
  3537                           ; Number of cases is 4, Range of values is 0 to 3
  3538                           ; switch strategies available:
  3539                           ; Name         Instructions Cycles
  3540                           ; simple_byte           13     7 (average)
  3541                           ; direct_byte           20     8 (fixed)
  3542                           ; jumptable            260     6 (fixed)
  3543                           ;	Chosen strategy is simple_byte
  3544  0508  3A00               	xorlw	0	; case 0
  3545  0509  1903               	skipnz
  3546  050A  2CFA               	goto	l2107
  3547  050B  3A01               	xorlw	1	; case 1
  3548  050C  1903               	skipnz
  3549  050D  2CFD               	goto	l2109
  3550  050E  3A03               	xorlw	3	; case 2
  3551  050F  1903               	skipnz
  3552  0510  2CFF               	goto	l2111
  3553  0511  3A01               	xorlw	1	; case 3
  3554  0512  1903               	skipnz
  3555  0513  2D01               	goto	l2113
  3556  0514  2D15               	goto	l2119
  3557  0515                     l2119:	
  3558                           
  3559                           ;LCD.c: 83: _delay((unsigned long)((20)*(8000000/4000.0)));
  3560  0515  3034               	movlw	52
  3561  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3562  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3563  0518  00A5               	movwf	??_lcd_init+1
  3564  0519  30F1               	movlw	241
  3565  051A  00A4               	movwf	??_lcd_init
  3566  051B                     u2947:	
  3567  051B  0BA4               	decfsz	??_lcd_init,f
  3568  051C  2D1B               	goto	u2947
  3569  051D  0BA5               	decfsz	??_lcd_init+1,f
  3570  051E  2D1B               	goto	u2947
  3571                           
  3572                           ;LCD.c: 85: Send_command(0x03);
  3573  051F  3003               	movlw	3
  3574  0520  120A  158A  2765  120A  118A  	fcall	_Send_command
  3575                           
  3576                           ;LCD.c: 86: _delay((unsigned long)((40)*(8000000/4000000.0)));
  3577  0525  3019               	movlw	25
  3578  0526  1283               	bcf	3,5	;RP0=0, select bank0
  3579  0527  1303               	bcf	3,6	;RP1=0, select bank0
  3580  0528  00A4               	movwf	??_lcd_init
  3581  0529                     u2957:	
  3582  0529  0BA4               	decfsz	??_lcd_init,f
  3583  052A  2D29               	goto	u2957
  3584  052B  2D2C               	nop2
  3585                           
  3586                           ;LCD.c: 87: Send_command(0x03);
  3587  052C  3003               	movlw	3
  3588  052D  120A  158A  2765  120A  118A  	fcall	_Send_command
  3589                           
  3590                           ;LCD.c: 88: _delay((unsigned long)((40)*(8000000/4000000.0)));
  3591  0532  3019               	movlw	25
  3592  0533  1283               	bcf	3,5	;RP0=0, select bank0
  3593  0534  1303               	bcf	3,6	;RP1=0, select bank0
  3594  0535  00A4               	movwf	??_lcd_init
  3595  0536                     u2967:	
  3596  0536  0BA4               	decfsz	??_lcd_init,f
  3597  0537  2D36               	goto	u2967
  3598  0538  2D39               	nop2
  3599                           
  3600                           ;LCD.c: 89: Send_command(0x03);
  3601  0539  3003               	movlw	3
  3602  053A  120A  158A  2765  120A  118A  	fcall	_Send_command
  3603                           
  3604                           ;LCD.c: 90: _delay((unsigned long)((40)*(8000000/4000000.0)));
  3605  053F  3019               	movlw	25
  3606  0540  1283               	bcf	3,5	;RP0=0, select bank0
  3607  0541  1303               	bcf	3,6	;RP1=0, select bank0
  3608  0542  00A4               	movwf	??_lcd_init
  3609  0543                     u2977:	
  3610  0543  0BA4               	decfsz	??_lcd_init,f
  3611  0544  2D43               	goto	u2977
  3612  0545  2D46               	nop2
  3613                           
  3614                           ;LCD.c: 91: Send_command(0x02);
  3615  0546  3002               	movlw	2
  3616  0547  120A  158A  2765  120A  118A  	fcall	_Send_command
  3617                           
  3618                           ;LCD.c: 92: _delay((unsigned long)((40)*(8000000/4000000.0)));
  3619  054C  3019               	movlw	25
  3620  054D  1283               	bcf	3,5	;RP0=0, select bank0
  3621  054E  1303               	bcf	3,6	;RP1=0, select bank0
  3622  054F  00A4               	movwf	??_lcd_init
  3623  0550                     u2987:	
  3624  0550  0BA4               	decfsz	??_lcd_init,f
  3625  0551  2D50               	goto	u2987
  3626  0552  2D53               	nop2
  3627                           
  3628                           ;LCD.c: 93: Send_command(0x02);
  3629  0553  3002               	movlw	2
  3630  0554  120A  158A  2765  120A  118A  	fcall	_Send_command
  3631                           
  3632                           ;LCD.c: 94: Send_command(0x08);
  3633  0559  3008               	movlw	8
  3634  055A  120A  158A  2765  120A  118A  	fcall	_Send_command
  3635                           
  3636                           ;LCD.c: 95: Send_command(0x00);
  3637  055F  3000               	movlw	0
  3638  0560  120A  158A  2765  120A  118A  	fcall	_Send_command
  3639                           
  3640                           ;LCD.c: 96: Send_command(0x08);
  3641  0565  3008               	movlw	8
  3642  0566  120A  158A  2765  120A  118A  	fcall	_Send_command
  3643                           
  3644                           ;LCD.c: 97: Send_command(0x00);
  3645  056B  3000               	movlw	0
  3646  056C  120A  158A  2765  120A  118A  	fcall	_Send_command
  3647                           
  3648                           ;LCD.c: 98: Send_command(0x01);
  3649  0571  3001               	movlw	1
  3650  0572  120A  158A  2765  120A  118A  	fcall	_Send_command
  3651                           
  3652                           ;LCD.c: 99: Send_command(0x00);
  3653  0577  3000               	movlw	0
  3654  0578  120A  158A  2765  120A  118A  	fcall	_Send_command
  3655                           
  3656                           ;LCD.c: 100: Send_command(0x06);
  3657  057D  3006               	movlw	6
  3658  057E  120A  158A  2765  120A  118A  	fcall	_Send_command
  3659                           
  3660                           ;LCD.c: 101: Send_command(0x00);
  3661  0583  3000               	movlw	0
  3662  0584  120A  158A  2765  120A  118A  	fcall	_Send_command
  3663                           
  3664                           ;LCD.c: 102: Send_command(lcd);
  3665  0589  1283               	bcf	3,5	;RP0=0, select bank0
  3666  058A  1303               	bcf	3,6	;RP1=0, select bank0
  3667  058B  0826               	movf	lcd_init@lcd,w
  3668  058C  120A  158A  2765   	fcall	_Send_command
  3669  058F  0008               	return
  3670  0590                     __end_of_lcd_init:	
  3671                           
  3672                           	psect	text12
  3673  0F65                     __ptext12:	
  3674 ;; *************** function _Send_command *****************
  3675 ;; Defined at:
  3676 ;;		line 57 in file "LCD.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;  com             1    wreg     unsigned char 
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  com             1    3[BANK0 ] unsigned char 
  3681 ;; Return value:  Size  Location     Type
  3682 ;;                  1    wreg      void 
  3683 ;; Registers used:
  3684 ;;		wreg, status,2, status,0, pclath, cstack
  3685 ;; Tracked objects:
  3686 ;;		On entry : 0/0
  3687 ;;		On exit  : 0/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3690 ;;      Params:         0       0       0       0       0
  3691 ;;      Locals:         0       1       0       0       0
  3692 ;;      Temps:          0       2       0       0       0
  3693 ;;      Totals:         0       3       0       0       0
  3694 ;;Total ram usage:        3 bytes
  3695 ;; Hardware stack levels used:    1
  3696 ;; Hardware stack levels required when called:    2
  3697 ;; This function calls:
  3698 ;;		_Send_Data
  3699 ;; This function is called by:
  3700 ;;		_lcd_init
  3701 ;;		_lcd_gotoxy
  3702 ;;		_lcd_clear
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           
  3707                           ;psect for function _Send_command
  3708  0F65                     _Send_command:	
  3709                           
  3710                           ;incstack = 0
  3711                           ; Regs used in _Send_command: [wreg+status,2+status,0+pclath+cstack]
  3712                           ;Send_command@com stored from wreg
  3713  0F65  1283               	bcf	3,5	;RP0=0, select bank0
  3714  0F66  1303               	bcf	3,6	;RP1=0, select bank0
  3715  0F67  00A3               	movwf	Send_command@com
  3716                           
  3717                           ;LCD.c: 59: (PORTBbits.RB0=0);
  3718  0F68  1006               	bcf	6,0	;volatile
  3719                           
  3720                           ;LCD.c: 60: Send_Data(com);
  3721  0F69  0823               	movf	Send_command@com,w
  3722  0F6A  120A  158A  274D  120A  158A  	fcall	_Send_Data
  3723                           
  3724                           ;LCD.c: 61: (PORTBbits.RB2=1);
  3725  0F6F  1283               	bcf	3,5	;RP0=0, select bank0
  3726  0F70  1303               	bcf	3,6	;RP1=0, select bank0
  3727  0F71  1506               	bsf	6,2	;volatile
  3728                           
  3729                           ;LCD.c: 62: (PORTBbits.RB2=0);
  3730  0F72  1106               	bcf	6,2	;volatile
  3731                           
  3732                           ;LCD.c: 63: _delay((unsigned long)((4)*(8000000/4000.0)));
  3733  0F73  300B               	movlw	11
  3734  0F74  1283               	bcf	3,5	;RP0=0, select bank0
  3735  0F75  1303               	bcf	3,6	;RP1=0, select bank0
  3736  0F76  00A2               	movwf	??_Send_command+1
  3737  0F77  3061               	movlw	97
  3738  0F78  00A1               	movwf	??_Send_command
  3739  0F79                     u2997:	
  3740  0F79  0BA1               	decfsz	??_Send_command,f
  3741  0F7A  2F79               	goto	u2997
  3742  0F7B  0BA2               	decfsz	??_Send_command+1,f
  3743  0F7C  2F79               	goto	u2997
  3744  0F7D  2F7E               	nop2
  3745  0F7E  0008               	return
  3746  0F7F                     __end_of_Send_command:	
  3747                           
  3748                           	psect	text13
  3749  0F4D                     __ptext13:	
  3750 ;; *************** function _Send_Data *****************
  3751 ;; Defined at:
  3752 ;;		line 9 in file "LCD.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;  data            1    wreg     unsigned char 
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;  data            1    0[BANK0 ] unsigned char 
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  1    wreg      void 
  3759 ;; Registers used:
  3760 ;;		wreg
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3766 ;;      Params:         0       0       0       0       0
  3767 ;;      Locals:         0       1       0       0       0
  3768 ;;      Temps:          0       0       0       0       0
  3769 ;;      Totals:         0       1       0       0       0
  3770 ;;Total ram usage:        1 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    1
  3773 ;; This function calls:
  3774 ;;		Nothing
  3775 ;; This function is called by:
  3776 ;;		_Send_command
  3777 ;;		_lcd_Print_char
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           
  3782                           ;psect for function _Send_Data
  3783  0F4D                     _Send_Data:	
  3784                           
  3785                           ;incstack = 0
  3786                           ; Regs used in _Send_Data: [wreg]
  3787                           ;Send_Data@data stored from wreg
  3788  0F4D  1283               	bcf	3,5	;RP0=0, select bank0
  3789  0F4E  1303               	bcf	3,6	;RP1=0, select bank0
  3790  0F4F  00A0               	movwf	Send_Data@data
  3791                           
  3792                           ;LCD.c: 11: if(data&0x01)
  3793  0F50  1C20               	btfss	Send_Data@data,0
  3794  0F51  2F54               	goto	l13
  3795                           
  3796                           ;LCD.c: 12: {
  3797                           ;LCD.c: 13: PORTDbits.RD4=1;
  3798  0F52  1608               	bsf	8,4	;volatile
  3799                           
  3800                           ;LCD.c: 15: }
  3801  0F53  2F55               	goto	l14
  3802  0F54                     l13:	
  3803                           
  3804                           ;LCD.c: 16: else
  3805                           ;LCD.c: 17: {
  3806                           ;LCD.c: 18: PORTDbits.RD4=0;
  3807  0F54  1208               	bcf	8,4	;volatile
  3808  0F55                     l14:	
  3809                           
  3810                           ;LCD.c: 19: }
  3811                           ;LCD.c: 21: if(data&0x02)
  3812  0F55  1CA0               	btfss	Send_Data@data,1
  3813  0F56  2F59               	goto	l15
  3814                           
  3815                           ;LCD.c: 22: {
  3816                           ;LCD.c: 23: PORTDbits.RD5=1;
  3817  0F57  1688               	bsf	8,5	;volatile
  3818                           
  3819                           ;LCD.c: 25: }
  3820  0F58  2F5A               	goto	l16
  3821  0F59                     l15:	
  3822                           
  3823                           ;LCD.c: 26: else
  3824                           ;LCD.c: 27: {
  3825                           ;LCD.c: 28: PORTDbits.RD5=0;
  3826  0F59  1288               	bcf	8,5	;volatile
  3827  0F5A                     l16:	
  3828                           
  3829                           ;LCD.c: 29: }
  3830                           ;LCD.c: 31: if(data&0x04)
  3831  0F5A  1D20               	btfss	Send_Data@data,2
  3832  0F5B  2F5E               	goto	l17
  3833                           
  3834                           ;LCD.c: 32: {
  3835                           ;LCD.c: 33: PORTDbits.RD6=1;
  3836  0F5C  1708               	bsf	8,6	;volatile
  3837                           
  3838                           ;LCD.c: 35: }
  3839  0F5D  2F5F               	goto	l18
  3840  0F5E                     l17:	
  3841                           
  3842                           ;LCD.c: 36: else
  3843                           ;LCD.c: 37: {
  3844                           ;LCD.c: 38: PORTDbits.RD6=0;
  3845  0F5E  1308               	bcf	8,6	;volatile
  3846  0F5F                     l18:	
  3847                           
  3848                           ;LCD.c: 39: }
  3849                           ;LCD.c: 41: if(data&0x08)
  3850  0F5F  1DA0               	btfss	Send_Data@data,3
  3851  0F60  2F63               	goto	l19
  3852                           
  3853                           ;LCD.c: 42: {
  3854                           ;LCD.c: 43: PORTDbits.RD7=1;
  3855  0F61  1788               	bsf	8,7	;volatile
  3856                           
  3857                           ;LCD.c: 45: }
  3858  0F62  0008               	return
  3859  0F63                     l19:	
  3860                           
  3861                           ;LCD.c: 46: else
  3862                           ;LCD.c: 47: {
  3863                           ;LCD.c: 48: PORTDbits.RD7=0;
  3864  0F63  1388               	bcf	8,7	;volatile
  3865  0F64  0008               	return
  3866  0F65                     __end_of_Send_Data:	
  3867                           
  3868                           	psect	text14
  3869  0629                     __ptext14:	
  3870 ;; *************** function _isr *****************
  3871 ;; Defined at:
  3872 ;;		line 15 in file "main.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;		None
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;		None
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  1    wreg      void 
  3879 ;; Registers used:
  3880 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3886 ;;      Params:         0       0       0       0       0
  3887 ;;      Locals:         0       0       0       0       0
  3888 ;;      Temps:          7       0       0       0       0
  3889 ;;      Totals:         7       0       0       0       0
  3890 ;;Total ram usage:        7 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; This function calls:
  3893 ;;		Nothing
  3894 ;; This function is called by:
  3895 ;;		Interrupt level 1
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           
  3900                           ;psect for function _isr
  3901  0629                     _isr:	
  3902                           
  3903                           ;main.c: 17: if(TMR1IE && TMR1IF)
  3904  0629  1683               	bsf	3,5	;RP0=1, select bank1
  3905  062A  1303               	bcf	3,6	;RP1=0, select bank1
  3906  062B  1C0C               	btfss	12,0	;volatile
  3907  062C  2E37               	goto	i1l1917
  3908  062D  1283               	bcf	3,5	;RP0=0, select bank0
  3909  062E  1303               	bcf	3,6	;RP1=0, select bank0
  3910  062F  1C0C               	btfss	12,0	;volatile
  3911  0630  2E37               	goto	i1l1917
  3912                           
  3913                           ;main.c: 18: {
  3914                           ;main.c: 19: TMR1=0;
  3915  0631  018E               	clrf	14	;volatile
  3916  0632  018F               	clrf	15	;volatile
  3917                           
  3918                           ;main.c: 20: TMR1IF=0;
  3919  0633  100C               	bcf	12,0	;volatile
  3920                           
  3921                           ;main.c: 21: lock=0;
  3922  0634  01FB               	clrf	_lock
  3923                           
  3924                           ;main.c: 22: n=0;
  3925  0635  01F9               	clrf	_n
  3926  0636  01FA               	clrf	_n+1
  3927  0637                     i1l1917:	
  3928                           
  3929                           ;main.c: 23: }
  3930                           ;main.c: 24: if(CCP1IF)
  3931  0637  1283               	bcf	3,5	;RP0=0, select bank0
  3932  0638  1D0C               	btfss	12,2	;volatile
  3933  0639  2EA4               	goto	i1l126
  3934                           
  3935                           ;main.c: 25: {
  3936                           ;main.c: 26: TMR1=0;
  3937  063A  018E               	clrf	14	;volatile
  3938  063B  018F               	clrf	15	;volatile
  3939                           
  3940                           ;main.c: 27: CCP1IE=0;
  3941  063C  1683               	bsf	3,5	;RP0=1, select bank1
  3942  063D  1303               	bcf	3,6	;RP1=0, select bank1
  3943  063E  110C               	bcf	12,2	;volatile
  3944                           
  3945                           ;main.c: 28: CCP1IF=0;
  3946  063F  1283               	bcf	3,5	;RP0=0, select bank0
  3947  0640  1303               	bcf	3,6	;RP1=0, select bank0
  3948  0641  110C               	bcf	12,2	;volatile
  3949                           
  3950                           ;main.c: 29: if(!lock)
  3951  0642  087B               	movf	_lock,w
  3952  0643  1D03               	btfss	3,2
  3953  0644  2EA1               	goto	i1l1955
  3954                           
  3955                           ;main.c: 30: {
  3956                           ;main.c: 31: result[n]=CCPR1;
  3957  0645  0879               	movf	_n,w
  3958  0646  00F0               	movwf	??_isr
  3959  0647  0770               	addwf	??_isr,w
  3960  0648  3EA0               	addlw	(low (_result| 0))& (0+255)
  3961  0649  0084               	movwf	4
  3962  064A  0815               	movf	21,w	;volatile
  3963  064B  1383               	bcf	3,7	;select IRP bank1
  3964  064C  0080               	movwf	0
  3965  064D  0A84               	incf	4,f
  3966  064E  0816               	movf	22,w	;volatile
  3967  064F  0080               	movwf	0
  3968                           
  3969                           ;main.c: 32: n++;
  3970  0650  3001               	movlw	1
  3971  0651  07F9               	addwf	_n,f
  3972  0652  1803               	skipnc
  3973  0653  0AFA               	incf	_n+1,f
  3974  0654  3000               	movlw	0
  3975  0655  07FA               	addwf	_n+1,f
  3976                           
  3977                           ;main.c: 33: if(n>33)
  3978  0656  3000               	movlw	0
  3979  0657  027A               	subwf	_n+1,w
  3980  0658  3022               	movlw	34
  3981  0659  1903               	skipnz
  3982  065A  0279               	subwf	_n,w
  3983  065B  1C03               	skipc
  3984  065C  2EA1               	goto	i1l1955
  3985                           
  3986                           ;main.c: 34: {
  3987                           ;main.c: 35: rc_code=0;
  3988  065D  01E2               	clrf	_rc_code
  3989                           
  3990                           ;main.c: 36: rc_addr=0;
  3991  065E  01E1               	clrf	_rc_addr
  3992                           
  3993                           ;main.c: 37: for(i=0;i<8;i++)
  3994  065F  01F7               	clrf	_i
  3995  0660  01F8               	clrf	_i+1
  3996  0661  3000               	movlw	0
  3997  0662  0278               	subwf	_i+1,w
  3998  0663  3008               	movlw	8
  3999  0664  1903               	skipnz
  4000  0665  0277               	subwf	_i,w
  4001  0666  1803               	btfsc	3,0
  4002  0667  2E9D               	goto	i1l1951
  4003                           
  4004                           ;main.c: 38: {
  4005                           ;main.c: 49: rc_code>>=1;
  4006  0668  1003               	clrc
  4007  0669                     L19:	
  4008  0669  0CE2               	rrf	_rc_code,f
  4009                           
  4010                           ;main.c: 50: rc_addr>>=1;
  4011  066A  1003               	clrc
  4012  066B  0CE1               	rrf	_rc_addr,f
  4013                           
  4014                           ;main.c: 51: if(result[i+18]>240) rc_code|=0x80;
  4015  066C  0877               	movf	_i,w
  4016  066D  00F0               	movwf	??_isr
  4017  066E  0770               	addwf	??_isr,w
  4018  066F  3E24               	addlw	36
  4019  0670  3EA0               	addlw	(low (_result| 0))& (0+255)
  4020  0671  0084               	movwf	4
  4021  0672  0800               	movf	0,w
  4022  0673  00F1               	movwf	??_isr+1
  4023  0674  0A84               	incf	4,f
  4024  0675  0800               	movf	0,w
  4025  0676  00F2               	movwf	??_isr+2
  4026  0677  3000               	movlw	0
  4027  0678  0272               	subwf	??_isr+2,w
  4028  0679  30F1               	movlw	241
  4029  067A  1903               	skipnz
  4030  067B  0271               	subwf	??_isr+1,w
  4031  067C  1803               	btfsc	3,0
  4032  067D  17E2               	bsf	_rc_code,7
  4033                           
  4034                           ;main.c: 52: if(result[i+2]>240) rc_addr|=0x80;
  4035  067E  0877               	movf	_i,w
  4036  067F  00F0               	movwf	??_isr
  4037  0680  0770               	addwf	??_isr,w
  4038  0681  3E04               	addlw	4
  4039  0682  3EA0               	addlw	(low (_result| 0))& (0+255)
  4040  0683  0084               	movwf	4
  4041  0684  0800               	movf	0,w
  4042  0685  00F1               	movwf	??_isr+1
  4043  0686  0A84               	incf	4,f
  4044  0687  0800               	movf	0,w
  4045  0688  00F2               	movwf	??_isr+2
  4046  0689  3000               	movlw	0
  4047  068A  0272               	subwf	??_isr+2,w
  4048  068B  30F1               	movlw	241
  4049  068C  1903               	skipnz
  4050  068D  0271               	subwf	??_isr+1,w
  4051  068E  1803               	btfsc	3,0
  4052  068F  17E1               	bsf	_rc_addr,7
  4053  0690  3001               	movlw	1
  4054  0691  07F7               	addwf	_i,f
  4055  0692  1803               	skipnc
  4056  0693  0AF8               	incf	_i+1,f
  4057  0694  3000               	movlw	0
  4058  0695  07F8               	addwf	_i+1,f
  4059  0696  3000               	movlw	0
  4060  0697  0278               	subwf	_i+1,w
  4061  0698  3008               	movlw	8
  4062  0699  1903               	skipnz
  4063  069A  0277               	subwf	_i,w
  4064  069B  1C03               	skipc
  4065  069C  2E69               	goto	L19
  4066  069D                     i1l1951:	
  4067                           
  4068                           ;main.c: 54: }
  4069                           ;main.c: 55: n=0;
  4070  069D  01F9               	clrf	_n
  4071  069E  01FA               	clrf	_n+1
  4072                           
  4073                           ;main.c: 56: lock=1;
  4074  069F  01FB               	clrf	_lock
  4075  06A0  0AFB               	incf	_lock,f
  4076  06A1                     i1l1955:	
  4077                           
  4078                           ;main.c: 58: }
  4079                           ;main.c: 59: }
  4080                           ;main.c: 60: CCP1IE=1;
  4081  06A1  1683               	bsf	3,5	;RP0=1, select bank1
  4082  06A2  1303               	bcf	3,6	;RP1=0, select bank1
  4083  06A3  150C               	bsf	12,2	;volatile
  4084  06A4                     i1l126:	
  4085  06A4  0876               	movf	??_isr+6,w
  4086  06A5  1283               	bcf	3,5	;RP0=0, select bank0
  4087  06A6  00FF               	movwf	127
  4088  06A7  0875               	movf	??_isr+5,w
  4089  06A8  008A               	movwf	10
  4090  06A9  0874               	movf	??_isr+4,w
  4091  06AA  0084               	movwf	4
  4092  06AB  0E73               	swapf	(??_isr+3)^(0+-128),w
  4093  06AC  0083               	movwf	3
  4094  06AD  0EFE               	swapf	126,f
  4095  06AE  0E7E               	swapf	126,w
  4096  06AF  0009               	retfie
  4097  06B0                     __end_of_isr:	
  4098  007E                     btemp	set	126	;btemp
  4099  007E                     wtemp0	set	126
  4100                           
  4101                           	psect	intentry
  4102  0004                     __pintentry:	
  4103                           ;incstack = 0
  4104                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0]
  4105                           
  4106  0004                     interrupt_function:	
  4107  007E                     saved_w	set	btemp
  4108  0004  00FE               	movwf	btemp
  4109  0005  0E03               	swapf	3,w
  4110  0006  00F3               	movwf	??_isr+3
  4111  0007  0804               	movf	4,w
  4112  0008  00F4               	movwf	??_isr+4
  4113  0009  080A               	movf	10,w
  4114  000A  00F5               	movwf	??_isr+5
  4115  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4116  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4117  000D  087F               	movf	btemp+1,w
  4118  000E  00F6               	movwf	??_isr+6
  4119  000F  120A  118A  2E29   	ljmp	_isr


Data Sizes:
    Strings     63
    Constant    30
    Data        0
    BSS         89
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      12
    BANK0            80     63      67
    BANK1            80      0      80
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf$199	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_4(CODE[17]), STR_3(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_2(CODE[14]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 21
		 -> main@str1(BANK0[21]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_printStringXY@str	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    lcd_printString@str	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_printStringXY->_lcd_gotoxy
    _lcd_printString->_lcd_Print_char
    _lcd_Print_char->_Send_Data
    _lcd_gotoxy->_Send_command
    _lcd_init->_Send_command
    _Send_command->_Send_Data

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    7478
                                             39 BANK0     24    24      0
                           _lcd_init
                  _lcd_printStringXY
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    26      3    5506
                                             14 BANK0     25    22      3
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     480
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     145
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _lcd_printStringXY                                    5     1      4    1511
                                              8 BANK0      5     1      4
                         _lcd_gotoxy
                    _lcd_printString
 ---------------------------------------------------------------------------------
 (2) _lcd_printString                                      2     0      2     316
                                              4 BANK0      2     0      2
                     _lcd_Print_char
 ---------------------------------------------------------------------------------
 (3) _lcd_Print_char                                       3     3      0     186
                                              1 BANK0      3     3      0
                          _Send_Data
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           4     3      1     712
                                              4 BANK0      4     3      1
                       _Send_command
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0     229
                                              4 BANK0      3     3      0
                       _Send_command
 ---------------------------------------------------------------------------------
 (3) _Send_command                                         3     3      0     155
                                              1 BANK0      3     3      0
                          _Send_Data
 ---------------------------------------------------------------------------------
 (4) _Send_Data                                            1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  7     7      0       0
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_init
     _Send_command
       _Send_Data
   _lcd_printStringXY
     _lcd_gotoxy
       _Send_command
         _Send_Data
     _lcd_printString
       _lcd_Print_char
         _Send_Data
   _sprintf
     ___bmul
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      9F       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3F      43       5       83.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      9F      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Apr 20 16:00:05 2018

                         _i 0077                           _n 0079                           pc 0002  
            ___bmul@product 0022               Send_Data@data 0020                          l13 0F54  
                        l14 0F55                          l15 0F59                          l16 0F5A  
                        l17 0F5E                          l18 0F5F                          l19 0F63  
                        l55 0628                          l48 05A3                          fsr 0004  
       ___wmul@multiplicand 0022                         l210 023C                         l215 0260  
                       l160 005D                         l161 005F                         l219 0284  
                       l163 0078                         l180 0145                         l157 0059  
                       l255 03E1                         l239 0372                         l159 005B  
                       l184 0147                         l185 0148                         l277 04C8  
                       l366 07E3                         _GIE 005F                         _isr 0629  
                       fsr0 0004                 lcd_init@lcd 0026                         indf 0000  
               _sprintf$192 0035                 _sprintf$193 0037                 _sprintf$199 003A  
               lcd_gotoxy@x 0026                 lcd_gotoxy@y 0024            ??_lcd_Print_char 0021  
                      l2111 04FF                        l2113 0501                        l2201 0141  
                      l2107 04FA                        l2051 05A6                        l2043 059B  
                      l2035 0F7F                        l2203 014A                        l2109 04FD  
                      l2117 0506                        l2213 016E                        l2119 0515  
                      l2063 05DE                        l2311 02B7                        l2223 017E  
                      l2231 019C                        l2215 0170                        l2151 0060  
                      l2143 0054                        l2057 05C1                        l1513 07C7  
                      l1505 07A3                        l2241 01C3                        l2225 018B  
                      l2209 015F                        l1507 07B1                        l1531 0FE2  
                      l2331 0305                        l2315 02C4                        l2235 01AB  
                      l2219 0173                        l2163 0090                        l2171 00CB  
                      l2155 0064                        l2069 05FB                        l2077 0618  
                      l1517 07D2                        l2093 07DB                        l2333 0309  
                      l2325 02E4                        l2309 02A8                        l2245 01CE  
                      l2253 01DC                        l1535 0FF0                        l2087 0F22  
                      l2431 0423                        l2415 03FD                        l2351 0360  
                      l2319 02D0                        l2271 0230                        l2239 01B6  
                      l2255 0202                        l2159 007E                        l1529 0FD4  
                      l2433 0450                        l2425 0419                        l2409 03EE  
                      l2353 0364                        l2345 033D                        l2249 01D7  
                      l2193 0112                        l1483 0F28                        l1539 0FFB  
                      l2443 0484                        l2347 0341                        l2339 031C  
                      l2267 0224                        l2179 00E7                        l2453 04B1  
                      l2365 037B                        l2381 03A5                        l1487 0F2E  
                      l2439 0475                        l2375 0397                        l2199 0113  
                      l2463 0032                        l2457 04D5                        l2449 04A6  
                      l2393 03C0                        l2465 04ED                        l2389 03BB  
                      l2493 06CA                        l2399 03D5                        l2499 06E6  
                      ?_isr 0070                        STR_1 077C                        STR_2 078B  
                      STR_3 075A                        STR_4 076B                        u1305 07BE  
                      u1315 07C8                        u2205 05CB                        u2215 05E8  
                      u2225 0605                        u1345 0FD7                        u2155 0FA6  
                      u1275 07A6                        u1365 0FE8                        u1295 07B2  
                      u1375 0FF1                        u2265 07E4                        u2505 0259  
                      u2195 05AE                        u2275 07EB                        u2535 027D  
                      u2385 0158                        u2635 02F5                        u2395 0165  
                      u2565 02A1                        u2675 0332                        _PEIE 005E  
                      u2685 0350                        u2927 06D2                        u2937 0FC6  
                      u2947 051B                        u2875 04D3                        u2957 0529  
                      u2967 0536                        u2977 0543                        u2987 0550  
                      u2997 0F79                        _TMR1 000E                        _main 06B0  
                      _lock 007B                        btemp 007E                        start 0012  
         ___bmul@multiplier 0023                       ??_isr 0070                       ?_main 0070  
                     _CCPR1 0015             __end_of___lwdiv 07D7                       i1l126 06A4  
           __end_of___lwmod 1000                       _TRISB 0086                       _TRISD 0088  
           __end_of_dpowers 0752             __end_of_isdigit 0F24                       pclath 000A  
                     status 0003                       wtemp0 007E             __end_of_sprintf 04F2  
          ?_lcd_printString 0024             __initialization 0015                __end_of_main 0736  
                    ??_main 0047        lcd_printStringXY@str 0028                      _CCP1IE 0462  
                    _CCP1IF 0062                      i1l1917 0637                      i1l1951 069D  
                    i1l1955 06A1                      _TMR1IE 0460                      _TMR1IF 0060  
                    _TMR1CS 0081                      _TMR1ON 0080                      _TRISC2 043A  
          __end_of_lcd_init 0590                      ___bmul 0F24          __size_of_Send_Data 0018  
                    ___wmul 07D7                   ??___lwdiv 0024                   ??___lwmod 002C  
                    _result 00A0                   ??_isdigit 0020                      saved_w 007E  
                 ??_sprintf 0031     __end_of__initialization 0027               ?_Send_command 0070  
       ___bmul@multiplicand 0020              __pcstackCOMMON 0070              lcd_gotoxy@temp 0027  
         __end_of_Send_Data 0F65                sprintf@width 0041                  __pbssBANK0 005F  
                __pbssBANK1 00A0              ??_Send_command 0021                  __pmaintext 06B0  
                   ?___bmul 0020                     ?___wmul 0020                  __pintentry 0004  
                   _CCP1CON 0017                     _T1CKPS0 0084                     _T1CKPS1 0085  
                _lcd_gotoxy 0590                   ?_lcd_init 0070                  __stringtab 0736  
           __size_of___bmul 0013             __size_of___wmul 0023                     ___lwdiv 0799  
                   ___lwmod 0FCC                     __ptext1 002B                     __ptext2 0F14  
                   __ptext3 07D7                     __ptext4 0FCC                     __ptext5 0799  
                   __ptext6 0F24                     __ptext7 0F37                     __ptext8 0F7F  
                   __ptext9 0F9F           __end_of_hexpowers 075A                     _dpowers 0748  
                   _rc_addr 0061                     _rc_code 0062                     _isdigit 0F14  
              __size_of_isr 0087                     _sprintf 002B                     clrloop0 0F0D  
                ??_lcd_init 0024        end_of_initialization 0027           __end_of_octpowers 0748  
   __size_of_lcd_Print_char 002D    __size_of_lcd_printString 0020           _lcd_printStringXY 0F37  
        ?_lcd_printStringXY 0028                   _PORTBbits 0006                   _PORTDbits 0008  
      __end_of_Send_command 0F7F         ??_lcd_printStringXY 002C                 ?_lcd_gotoxy 0024  
 __end_of_lcd_printStringXY 0F4D          lcd_printStringXY@x 002A          lcd_printStringXY@y 002B  
        lcd_printString@str 0024              __end_of___bmul 0F37              __end_of___wmul 07FA  
       start_initialization 0015                 __end_of_isr 06B0                   _Send_Data 0F4D  
                  ??___bmul 0021         __size_of_lcd_gotoxy 0099                    ??___wmul 0024  
         ??_lcd_printString 0026                 __pbssCOMMON 0077                   ___latbits 0002  
             __pcstackBANK0 0020           __size_of_lcd_init 009E                 sprintf@flag 0045  
                ?_Send_Data 0070                 sprintf@prec 0040              _lcd_Print_char 0F9F  
          ___lwdiv@dividend 0022  __size_of_lcd_printStringXY 0016                    ?___lwdiv 0020  
                  ?___lwmod 0028       __size_of_Send_command 001A                   __pstrings 0736  
                  ?_isdigit 0070                   _hexpowers 0752            ___lwdiv@quotient 0025  
                  ?_sprintf 002E             Send_command@com 0023           interrupt_function 0004  
            ___wmul@product 0024      __end_of_lcd_Print_char 0FCC                   clear_ram0 0F0C  
                 _octpowers 073C                _Send_command 0F65                 __stringbase 073B  
         ___wmul@multiplier 0020                ??_lcd_gotoxy 0025                 ??_Send_Data 0020  
           ?_lcd_Print_char 0070                 _rc_addr_old 005F          __end_of_lcd_gotoxy 0629  
          __size_of___lwdiv 003E            __size_of___lwmod 0034          __end_of__stringtab 073C  
               _rc_code_old 0060                 _isdigit$385 0020                  sprintf@idx 0034  
                sprintf@len 003B                  sprintf@val 003E            __size_of_isdigit 0010  
           ___lwdiv@divisor 0020             ___lwdiv@counter 0027                    __ptext10 0590  
                  __ptext11 04F2                    __ptext12 0F65                    __ptext13 0F4D  
                  __ptext14 0629                    _lcd_init 04F2            __size_of_sprintf 04C7  
             __size_of_main 0086          lcd_Print_char@data 0023             _lcd_printString 0F7F  
                  main@str1 004A                    isdigit@c 0021                    intlevel1 0000  
                 sprintf@ap 003D                   sprintf@cp 0039                   sprintf@sp 0044  
          ___lwmod@dividend 002A                   stringcode 0736                    sprintf@c 0043  
                  sprintf@f 002E             ___lwmod@divisor 0028             ___lwmod@counter 002D  
                  stringdir 0736                    stringtab 0736     __end_of_lcd_printString 0F9F  
