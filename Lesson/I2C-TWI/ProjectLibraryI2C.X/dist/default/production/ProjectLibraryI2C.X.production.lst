

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Feb 16 20:54:04 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2
    26                           	psect	text17,local,class=CODE,merge=1,delta=2
    27                           	psect	text18,local,class=CODE,merge=1,delta=2
    28                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text20,local,class=CODE,merge=1,delta=2
    30                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    31                           	dabs	1,0x7E,2
    32  0000                     
    33                           ; Version 1.44
    34                           ; Generated 14/09/2017 GMT
    35                           ; 
    36                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC16F877 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     	;# 
    68  0001                     	;# 
    69  0002                     	;# 
    70  0003                     	;# 
    71  0004                     	;# 
    72  0005                     	;# 
    73  0006                     	;# 
    74  0007                     	;# 
    75  0008                     	;# 
    76  0009                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  000E                     	;# 
    83  000F                     	;# 
    84  0010                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0013                     	;# 
    88  0014                     	;# 
    89  0015                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  0019                     	;# 
    95  001A                     	;# 
    96  001B                     	;# 
    97  001B                     	;# 
    98  001C                     	;# 
    99  001D                     	;# 
   100  001E                     	;# 
   101  001F                     	;# 
   102  0081                     	;# 
   103  0085                     	;# 
   104  0086                     	;# 
   105  0087                     	;# 
   106  0088                     	;# 
   107  0089                     	;# 
   108  008C                     	;# 
   109  008D                     	;# 
   110  008E                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0093                     	;# 
   114  0094                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0008                     	;# 
   134  0009                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000D                     	;# 
   139  000E                     	;# 
   140  000E                     	;# 
   141  000F                     	;# 
   142  0010                     	;# 
   143  0011                     	;# 
   144  0012                     	;# 
   145  0013                     	;# 
   146  0014                     	;# 
   147  0015                     	;# 
   148  0015                     	;# 
   149  0016                     	;# 
   150  0017                     	;# 
   151  0018                     	;# 
   152  0019                     	;# 
   153  001A                     	;# 
   154  001B                     	;# 
   155  001B                     	;# 
   156  001C                     	;# 
   157  001D                     	;# 
   158  001E                     	;# 
   159  001F                     	;# 
   160  0081                     	;# 
   161  0085                     	;# 
   162  0086                     	;# 
   163  0087                     	;# 
   164  0088                     	;# 
   165  0089                     	;# 
   166  008C                     	;# 
   167  008D                     	;# 
   168  008E                     	;# 
   169  0091                     	;# 
   170  0092                     	;# 
   171  0093                     	;# 
   172  0094                     	;# 
   173  0098                     	;# 
   174  0099                     	;# 
   175  009E                     	;# 
   176  009F                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  010F                     	;# 
   181  018C                     	;# 
   182  018D                     	;# 
   183  0000                     	;# 
   184  0001                     	;# 
   185  0002                     	;# 
   186  0003                     	;# 
   187  0004                     	;# 
   188  0005                     	;# 
   189  0006                     	;# 
   190  0007                     	;# 
   191  0008                     	;# 
   192  0009                     	;# 
   193  000A                     	;# 
   194  000B                     	;# 
   195  000C                     	;# 
   196  000D                     	;# 
   197  000E                     	;# 
   198  000E                     	;# 
   199  000F                     	;# 
   200  0010                     	;# 
   201  0011                     	;# 
   202  0012                     	;# 
   203  0013                     	;# 
   204  0014                     	;# 
   205  0015                     	;# 
   206  0015                     	;# 
   207  0016                     	;# 
   208  0017                     	;# 
   209  0018                     	;# 
   210  0019                     	;# 
   211  001A                     	;# 
   212  001B                     	;# 
   213  001B                     	;# 
   214  001C                     	;# 
   215  001D                     	;# 
   216  001E                     	;# 
   217  001F                     	;# 
   218  0081                     	;# 
   219  0085                     	;# 
   220  0086                     	;# 
   221  0087                     	;# 
   222  0088                     	;# 
   223  0089                     	;# 
   224  008C                     	;# 
   225  008D                     	;# 
   226  008E                     	;# 
   227  0091                     	;# 
   228  0092                     	;# 
   229  0093                     	;# 
   230  0094                     	;# 
   231  0098                     	;# 
   232  0099                     	;# 
   233  009E                     	;# 
   234  009F                     	;# 
   235  010C                     	;# 
   236  010D                     	;# 
   237  010E                     	;# 
   238  010F                     	;# 
   239  018C                     	;# 
   240  018D                     	;# 
   241  0000                     	;# 
   242  0001                     	;# 
   243  0002                     	;# 
   244  0003                     	;# 
   245  0004                     	;# 
   246  0005                     	;# 
   247  0006                     	;# 
   248  0007                     	;# 
   249  0008                     	;# 
   250  0009                     	;# 
   251  000A                     	;# 
   252  000B                     	;# 
   253  000C                     	;# 
   254  000D                     	;# 
   255  000E                     	;# 
   256  000E                     	;# 
   257  000F                     	;# 
   258  0010                     	;# 
   259  0011                     	;# 
   260  0012                     	;# 
   261  0013                     	;# 
   262  0014                     	;# 
   263  0015                     	;# 
   264  0015                     	;# 
   265  0016                     	;# 
   266  0017                     	;# 
   267  0018                     	;# 
   268  0019                     	;# 
   269  001A                     	;# 
   270  001B                     	;# 
   271  001B                     	;# 
   272  001C                     	;# 
   273  001D                     	;# 
   274  001E                     	;# 
   275  001F                     	;# 
   276  0081                     	;# 
   277  0085                     	;# 
   278  0086                     	;# 
   279  0087                     	;# 
   280  0088                     	;# 
   281  0089                     	;# 
   282  008C                     	;# 
   283  008D                     	;# 
   284  008E                     	;# 
   285  0091                     	;# 
   286  0092                     	;# 
   287  0093                     	;# 
   288  0094                     	;# 
   289  0098                     	;# 
   290  0099                     	;# 
   291  009E                     	;# 
   292  009F                     	;# 
   293  010C                     	;# 
   294  010D                     	;# 
   295  010E                     	;# 
   296  010F                     	;# 
   297  018C                     	;# 
   298  018D                     	;# 
   299                           
   300                           	psect	strings
   301  0003                     __pstrings:	
   302  0003                     stringtab:	
   303  0003                     __stringtab:	
   304                           
   305                           ;	String table - string pointers are 1 byte each
   306  0003  1BFF               	btfsc	btemp+1,7
   307  0004  280D               	ljmp	stringcode
   308  0005  1383               	bcf	3,7
   309  0006  187F               	btfsc	btemp+1,0
   310  0007  1783               	bsf	3,7
   311  0008  0800               	movf	0,w
   312  0009  0A84               	incf	4,f
   313  000A  1903               	skipnz
   314  000B  0AFF               	incf	btemp+1,f
   315  000C  0008               	return
   316  000D                     stringcode:	
   317  000D                     stringdir:	
   318  000D  3000               	movlw	high stringdir
   319  000E  008A               	movwf	10
   320  000F  0804               	movf	4,w
   321  0010  0A84               	incf	4,f
   322  0011  0782               	addwf	2,f
   323  0012                     __stringbase:	
   324  0012  3400               	retlw	0
   325  0013                     __end_of__stringtab:	
   326  0013                     _dpowers:	
   327  0013  3401               	retlw	1
   328  0014  3400               	retlw	0
   329  0015  340A               	retlw	10
   330  0016  3400               	retlw	0
   331  0017  3464               	retlw	100
   332  0018  3400               	retlw	0
   333  0019  34E8               	retlw	232
   334  001A  3403               	retlw	3
   335  001B  3410               	retlw	16
   336  001C  3427               	retlw	39
   337  001D                     __end_of_dpowers:	
   338  001A                     _RCREG	set	26
   339  0019                     _TXREG	set	25
   340  0013                     _SSPBUF	set	19
   341  0014                     _SSPCON	set	20
   342  0065                     _RCIF	set	101
   343  00C4                     _CREN	set	196
   344  00C7                     _SPEN	set	199
   345  0099                     _SPBRG	set	153
   346  0094                     _SSPSTAT	set	148
   347  0093                     _SSPADD	set	147
   348  0091                     _SSPCON2	set	145
   349  04C1                     _TRMT	set	1217
   350  04C5                     _TXEN	set	1221
   351  043E                     _TRISC6	set	1086
   352  043F                     _TRISC7	set	1087
   353  04C4                     _SYNC	set	1220
   354  04C2                     _BRGH	set	1218
   355  048C                     _ACKEN	set	1164
   356  048D                     _ACKDT	set	1165
   357  04A0                     _BF	set	1184
   358  04A2                     _R_W	set	1186
   359  048B                     _RCEN	set	1163
   360  048A                     _PEN	set	1162
   361  0489                     _RSEN	set	1161
   362  0488                     _SEN	set	1160
   363  043C                     _TRISC4	set	1084
   364  043B                     _TRISC3	set	1083
   365  001D                     STR_2:	
   366  001D  3454               	retlw	84	;'T'
   367  001E  3469               	retlw	105	;'i'
   368  001F  346D               	retlw	109	;'m'
   369  0020  3465               	retlw	101	;'e'
   370  0021  343D               	retlw	61	;'='
   371  0022  3420               	retlw	32	;' '
   372  0023  3425               	retlw	37	;'%'
   373  0024  3475               	retlw	117	;'u'
   374  0025  3420               	retlw	32	;' '
   375  0026  343A               	retlw	58	;':'
   376  0027  3420               	retlw	32	;' '
   377  0028  3425               	retlw	37	;'%'
   378  0029  3475               	retlw	117	;'u'
   379  002A  3420               	retlw	32	;' '
   380  002B  343A               	retlw	58	;':'
   381  002C  3425               	retlw	37	;'%'
   382  002D  3475               	retlw	117	;'u'
   383  002E  3420               	retlw	32	;' '
   384  002F  3400               	retlw	0
   385  0030                     STR_1:	
   386  0030  3448               	retlw	72	;'H'
   387  0031  3465               	retlw	101	;'e'
   388  0032  346C               	retlw	108	;'l'
   389  0033  346C               	retlw	108	;'l'
   390  0034  346F               	retlw	111	;'o'
   391  0035  340D               	retlw	13
   392  0036  340A               	retlw	10
   393  0037  3400               	retlw	0
   394                           
   395                           ; #config settings
   396  0000                     
   397                           	psect	cinit
   398  07F8                     start_initialization:	
   399  07F8                     __initialization:	
   400                           
   401                           ; Clear objects allocated to BANK1
   402  07F8  1683               	bsf	3,5	;RP0=1, select bank1
   403  07F9  1303               	bcf	3,6	;RP1=0, select bank1
   404  07FA  01A0               	clrf	__pbssBANK1& (0+127)
   405  07FB  01A1               	clrf	(__pbssBANK1+1)& (0+127)
   406  07FC                     end_of_initialization:	
   407                           ;End of C runtime variable initialization code
   408                           
   409  07FC                     __end_of__initialization:	
   410  07FC  0183               	clrf	3
   411  07FD  120A  118A  2E45   	ljmp	_main	;jump to C main() function
   412                           
   413                           	psect	bssBANK1
   414  00A0                     __pbssBANK1:	
   415  00A0                     _z:	
   416  00A0                     	ds	2
   417                           
   418                           	psect	cstackCOMMON
   419  0070                     __pcstackCOMMON:	
   420  0070                     ?_i2c_Ack:	
   421  0070                     ??_i2c_Ack:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_i2c_NoAck:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ??_i2c_NoAck:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_RTC_Init:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_RTC_SetDateTime:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     ?_RTC_GetDateTime:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ?_Transmit_char:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0070                     ??_Transmit_char:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0070                     ?_I2C_Master_Wait:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0070                     ??_I2C_Master_Wait:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0070                     ?_I2C_Master_Start:	
   452                           ; 1 bytes @ 0x0
   453                           
   454  0070                     ??_I2C_Master_Start:	
   455                           ; 1 bytes @ 0x0
   456                           
   457  0070                     ?_I2C_Master_Stop:	
   458                           ; 1 bytes @ 0x0
   459                           
   460  0070                     ??_I2C_Master_Stop:	
   461                           ; 1 bytes @ 0x0
   462                           
   463  0070                     ?_I2C_Write_Byte:	
   464                           ; 1 bytes @ 0x0
   465                           
   466  0070                     ??_I2C_Write_Byte:	
   467                           ; 1 bytes @ 0x0
   468                           
   469  0070                     ?_I2C_Master_Read:	
   470                           ; 1 bytes @ 0x0
   471                           
   472  0070                     ??_I2C_Master_Read:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  0070                     ?_RTC_ConvertFromDec:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  0070                     ?_main:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  0070                     ?___bmul:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0070                     ?___lwdiv:	
   485                           ; 1 bytes @ 0x0
   486                           
   487  0070                     ?___aldiv:	
   488                           ; 2 bytes @ 0x0
   489                           
   490  0070                     ?___lldiv:	
   491                           ; 4 bytes @ 0x0
   492                           
   493  0070                     I2C_Write_Byte@data:	
   494                           ; 4 bytes @ 0x0
   495                           
   496  0070                     Transmit_char@data:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0070                     ___bmul@multiplicand:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0070                     ___lwdiv@divisor:	
   503                           ; 1 bytes @ 0x0
   504                           
   505  0070                     ___aldiv@divisor:	
   506                           ; 2 bytes @ 0x0
   507                           
   508  0070                     ___lldiv@divisor:	
   509                           ; 4 bytes @ 0x0
   510                           
   511                           
   512                           ; 4 bytes @ 0x0
   513  0070                     	ds	1
   514  0071                     ??_RTC_Init:	
   515  0071                     ?_Usart_PrintString:	
   516                           ; 1 bytes @ 0x1
   517                           
   518  0071                     ??_RTC_SetDateTime:	
   519                           ; 1 bytes @ 0x1
   520                           
   521  0071                     ??___bmul:	
   522                           ; 1 bytes @ 0x1
   523                           
   524  0071                     I2C_Master_Read@a:	
   525                           ; 1 bytes @ 0x1
   526                           
   527  0071                     RTC_SetDateTime@rtc:	
   528                           ; 1 bytes @ 0x1
   529                           
   530  0071                     Usart_PrintString@Text:	
   531                           ; 1 bytes @ 0x1
   532                           
   533                           
   534                           ; 2 bytes @ 0x1
   535  0071                     	ds	1
   536  0072                     I2C_Master_Read@v_i2cData_u8:	
   537  0072                     ___bmul@product:	
   538                           ; 1 bytes @ 0x2
   539                           
   540  0072                     ___lwdiv@dividend:	
   541                           ; 1 bytes @ 0x2
   542                           
   543                           
   544                           ; 2 bytes @ 0x2
   545  0072                     	ds	1
   546  0073                     ??_Usart_PrintString:	
   547  0073                     ??_RTC_GetDateTime:	
   548                           ; 1 bytes @ 0x3
   549                           
   550  0073                     ___bmul@multiplier:	
   551                           ; 1 bytes @ 0x3
   552                           
   553                           
   554                           ; 1 bytes @ 0x3
   555  0073                     	ds	1
   556  0074                     ??_RTC_ConvertFromDec:	
   557  0074                     ??___lwdiv:	
   558                           ; 1 bytes @ 0x4
   559                           
   560  0074                     Usart_PrintString@i:	
   561                           ; 1 bytes @ 0x4
   562                           
   563  0074                     RTC_GetDateTime@rtc:	
   564                           ; 1 bytes @ 0x4
   565                           
   566  0074                     ___aldiv@dividend:	
   567                           ; 1 bytes @ 0x4
   568                           
   569  0074                     ___lldiv@dividend:	
   570                           ; 4 bytes @ 0x4
   571                           
   572                           
   573                           ; 4 bytes @ 0x4
   574  0074                     	ds	1
   575  0075                     ___lwdiv@quotient:	
   576                           
   577                           ; 2 bytes @ 0x5
   578  0075                     	ds	2
   579  0077                     ___lwdiv@counter:	
   580                           
   581                           ; 1 bytes @ 0x7
   582  0077                     	ds	1
   583  0078                     ??___aldiv:	
   584  0078                     ??___lldiv:	
   585                           ; 1 bytes @ 0x8
   586                           
   587  0078                     ?___lwmod:	
   588                           ; 1 bytes @ 0x8
   589                           
   590  0078                     RTC_ConvertFromDec@ch:	
   591                           ; 2 bytes @ 0x8
   592                           
   593  0078                     ___lwmod@divisor:	
   594                           ; 1 bytes @ 0x8
   595                           
   596                           
   597                           ; 2 bytes @ 0x8
   598  0078                     	ds	1
   599  0079                     RTC_ConvertFromDec@c:	
   600  0079                     USART_Init@x:	
   601                           ; 1 bytes @ 0x9
   602                           
   603  0079                     ___lldiv@quotient:	
   604                           ; 2 bytes @ 0x9
   605                           
   606                           
   607                           ; 4 bytes @ 0x9
   608  0079                     	ds	1
   609  007A                     ___lwmod@dividend:	
   610                           
   611                           ; 2 bytes @ 0xA
   612  007A                     	ds	2
   613  007C                     ??___lwmod:	
   614                           
   615                           ; 1 bytes @ 0xC
   616  007C                     	ds	1
   617  007D                     ___lldiv@counter:	
   618  007D                     ___lwmod@counter:	
   619                           ; 1 bytes @ 0xD
   620                           
   621                           
   622                           ; 1 bytes @ 0xD
   623  007D                     	ds	1
   624                           
   625                           	psect	cstackBANK0
   626  0020                     __pcstackBANK0:	
   627  0020                     ?_I2C_Master_Init:	
   628  0020                     ?_sprintf:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0020                     sprintf@f:	
   632                           ; 2 bytes @ 0x0
   633                           
   634  0020                     ___aldiv@counter:	
   635                           ; 1 bytes @ 0x0
   636                           
   637  0020                     I2C_Master_Init@c:	
   638                           ; 1 bytes @ 0x0
   639                           
   640                           
   641                           ; 4 bytes @ 0x0
   642  0020                     	ds	1
   643  0021                     ___aldiv@sign:	
   644                           
   645                           ; 1 bytes @ 0x1
   646  0021                     	ds	1
   647  0022                     ___aldiv@quotient:	
   648                           
   649                           ; 4 bytes @ 0x2
   650  0022                     	ds	2
   651  0024                     ??_I2C_Master_Init:	
   652                           
   653                           ; 1 bytes @ 0x4
   654  0024                     	ds	2
   655  0026                     ?_USART_Init:	
   656  0026                     USART_Init@baud:	
   657                           ; 1 bytes @ 0x6
   658                           
   659                           
   660                           ; 4 bytes @ 0x6
   661  0026                     	ds	1
   662  0027                     ??_sprintf:	
   663                           
   664                           ; 1 bytes @ 0x7
   665  0027                     	ds	3
   666  002A                     ??_USART_Init:	
   667  002A                     sprintf@flag:	
   668                           ; 1 bytes @ 0xA
   669                           
   670                           
   671                           ; 1 bytes @ 0xA
   672  002A                     	ds	1
   673  002B                     sprintf@ap:	
   674                           
   675                           ; 1 bytes @ 0xB
   676  002B                     	ds	1
   677  002C                     sprintf@val:	
   678                           
   679                           ; 2 bytes @ 0xC
   680  002C                     	ds	2
   681  002E                     sprintf@prec:	
   682                           
   683                           ; 1 bytes @ 0xE
   684  002E                     	ds	1
   685  002F                     sprintf@sp:	
   686                           
   687                           ; 1 bytes @ 0xF
   688  002F                     	ds	1
   689  0030                     sprintf@c:	
   690                           
   691                           ; 1 bytes @ 0x10
   692  0030                     	ds	6
   693  0036                     ??_main:	
   694                           
   695                           ; 1 bytes @ 0x16
   696  0036                     	ds	7
   697  003D                     main@buffer:	
   698                           
   699                           ; 40 bytes @ 0x1D
   700  003D                     	ds	40
   701  0065                     main@status:	
   702                           
   703                           ; 1 bytes @ 0x45
   704  0065                     	ds	1
   705  0066                     main@sec:	
   706                           
   707                           ; 1 bytes @ 0x46
   708  0066                     	ds	1
   709  0067                     main@min:	
   710                           
   711                           ; 1 bytes @ 0x47
   712  0067                     	ds	1
   713  0068                     main@hour:	
   714                           
   715                           ; 1 bytes @ 0x48
   716  0068                     	ds	1
   717  0069                     main@rtc:	
   718                           
   719                           ; 7 bytes @ 0x49
   720  0069                     	ds	7
   721                           
   722                           	psect	maintext
   723  0645                     __pmaintext:	
   724 ;;
   725 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
   726 ;;
   727 ;; *************** function _main *****************
   728 ;; Defined at:
   729 ;;		line 31 in file "main.c"
   730 ;; Parameters:    Size  Location     Type
   731 ;;		None
   732 ;; Auto vars:     Size  Location     Type
   733 ;;  buffer         40   29[BANK0 ] unsigned char [40]
   734 ;;  rtc             7   73[BANK0 ] struct .
   735 ;;  hour            1   72[BANK0 ] unsigned char 
   736 ;;  min             1   71[BANK0 ] unsigned char 
   737 ;;  sec             1   70[BANK0 ] unsigned char 
   738 ;;  status          1   69[BANK0 ] unsigned char 
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      void 
   741 ;; Registers used:
   742 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : B00/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   748 ;;      Params:         0       0       0       0       0
   749 ;;      Locals:         0      51       0       0       0
   750 ;;      Temps:          0       7       0       0       0
   751 ;;      Totals:         0      58       0       0       0
   752 ;;Total ram usage:       58 bytes
   753 ;; Hardware stack levels required when called:    3
   754 ;; This function calls:
   755 ;;		_I2C_Master_Init
   756 ;;		_RTC_ConvertFromDec
   757 ;;		_RTC_GetDateTime
   758 ;;		_RTC_Init
   759 ;;		_RTC_SetDateTime
   760 ;;		_Transmit_char
   761 ;;		_USART_Init
   762 ;;		_Usart_PrintString
   763 ;;		_sprintf
   764 ;; This function is called by:
   765 ;;		Startup code after reset
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           
   770                           ;psect for function _main
   771  0645                     _main:	
   772                           
   773                           ;main.c: 32: unsigned char sec;
   774                           ;main.c: 33: unsigned char min;
   775                           ;main.c: 34: unsigned char hour;
   776                           ;main.c: 35: char buffer[40];
   777                           ;main.c: 39: char status=USART_Init(9600);
   778                           
   779                           ;incstack = 0
   780                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   781  0645  3000               	movlw	0
   782  0646  1283               	bcf	3,5	;RP0=0, select bank0
   783  0647  1303               	bcf	3,6	;RP1=0, select bank0
   784  0648  00A9               	movwf	USART_Init@baud+3
   785  0649  3000               	movlw	0
   786  064A  00A8               	movwf	USART_Init@baud+2
   787  064B  3025               	movlw	37
   788  064C  00A7               	movwf	USART_Init@baud+1
   789  064D  3080               	movlw	128
   790  064E  00A6               	movwf	USART_Init@baud
   791  064F  120A  118A  270D  120A  118A  	fcall	_USART_Init
   792  0654  1283               	bcf	3,5	;RP0=0, select bank0
   793  0655  1303               	bcf	3,6	;RP1=0, select bank0
   794  0656  00B6               	movwf	??_main
   795  0657  0836               	movf	??_main,w
   796  0658  00E5               	movwf	main@status
   797                           
   798                           ;main.c: 43: I2C_Master_Init(100000);
   799  0659  3000               	movlw	0
   800  065A  00A3               	movwf	I2C_Master_Init@c+3
   801  065B  3001               	movlw	1
   802  065C  00A2               	movwf	I2C_Master_Init@c+2
   803  065D  3086               	movlw	134
   804  065E  00A1               	movwf	I2C_Master_Init@c+1
   805  065F  30A0               	movlw	160
   806  0660  00A0               	movwf	I2C_Master_Init@c
   807  0661  120A  118A  231A  120A  118A  	fcall	_I2C_Master_Init
   808                           
   809                           ;main.c: 44: RTC_Init();
   810  0666  120A  118A  22AD  120A  118A  	fcall	_RTC_Init
   811                           
   812                           ;main.c: 45: rtc_t rtc;
   813                           ;main.c: 46: rtc.hour = 0x10;
   814  066B  3010               	movlw	16
   815  066C  1283               	bcf	3,5	;RP0=0, select bank0
   816  066D  1303               	bcf	3,6	;RP1=0, select bank0
   817  066E  00B6               	movwf	??_main
   818  066F  0836               	movf	??_main,w
   819  0670  00EB               	movwf	main@rtc+2
   820                           
   821                           ;main.c: 47: rtc.min = 0x40;
   822  0671  3040               	movlw	64
   823  0672  00B6               	movwf	??_main
   824  0673  0836               	movf	??_main,w
   825  0674  00EA               	movwf	main@rtc+1
   826                           
   827                           ;main.c: 48: rtc.sec = 0x00;
   828  0675  01E9               	clrf	main@rtc
   829                           
   830                           ;main.c: 54: Usart_PrintString("Hello\r\n");
   831  0676  301E               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   832  0677  00F1               	movwf	Usart_PrintString@Text
   833  0678  3080               	movlw	128
   834  0679  00F2               	movwf	Usart_PrintString@Text+1
   835  067A  120A  118A  2350  120A  118A  	fcall	_Usart_PrintString
   836                           
   837                           ;main.c: 55: RTC_SetDateTime(&rtc);
   838  067F  3069               	movlw	(low (main@rtc| 0))& (0+255)
   839  0680  120A  118A  23C2  120A  118A  	fcall	_RTC_SetDateTime
   840  0685                     l1431:	
   841                           ;main.c: 56: while(1)
   842                           
   843                           
   844                           ;main.c: 57: {
   845                           ;main.c: 58: _delay((unsigned long)((300)*(8000000/4000.0)));
   846  0685  3004               	movlw	4
   847  0686  1283               	bcf	3,5	;RP0=0, select bank0
   848  0687  1303               	bcf	3,6	;RP1=0, select bank0
   849  0688  00B8               	movwf	??_main+2
   850  0689  300C               	movlw	12
   851  068A  00B7               	movwf	??_main+1
   852  068B  3033               	movlw	51
   853  068C  00B6               	movwf	??_main
   854  068D                     u1297:	
   855  068D  0BB6               	decfsz	??_main,f
   856  068E  2E8D               	goto	u1297
   857  068F  0BB7               	decfsz	??_main+1,f
   858  0690  2E8D               	goto	u1297
   859  0691  0BB8               	decfsz	??_main+2,f
   860  0692  2E8D               	goto	u1297
   861                           
   862                           ;main.c: 59: RTC_GetDateTime(&rtc);
   863  0693  3069               	movlw	(low (main@rtc| 0))& (0+255)
   864  0694  120A  118A  247A  120A  118A  	fcall	_RTC_GetDateTime
   865                           
   866                           ;main.c: 60: _delay((unsigned long)((300)*(8000000/4000.0)));
   867  0699  3004               	movlw	4
   868  069A  1283               	bcf	3,5	;RP0=0, select bank0
   869  069B  1303               	bcf	3,6	;RP1=0, select bank0
   870  069C  00B8               	movwf	??_main+2
   871  069D  300C               	movlw	12
   872  069E  00B7               	movwf	??_main+1
   873  069F  3033               	movlw	51
   874  06A0  00B6               	movwf	??_main
   875  06A1                     u1307:	
   876  06A1  0BB6               	decfsz	??_main,f
   877  06A2  2EA1               	goto	u1307
   878  06A3  0BB7               	decfsz	??_main+1,f
   879  06A4  2EA1               	goto	u1307
   880  06A5  0BB8               	decfsz	??_main+2,f
   881  06A6  2EA1               	goto	u1307
   882                           
   883                           ;main.c: 61: sec=(char)rtc.sec;
   884  06A7  1283               	bcf	3,5	;RP0=0, select bank0
   885  06A8  1303               	bcf	3,6	;RP1=0, select bank0
   886  06A9  0869               	movf	main@rtc,w
   887  06AA  00B6               	movwf	??_main
   888  06AB  0836               	movf	??_main,w
   889  06AC  00E6               	movwf	main@sec
   890                           
   891                           ;main.c: 62: min=(char)rtc.min;
   892  06AD  086A               	movf	main@rtc+1,w
   893  06AE  00B6               	movwf	??_main
   894  06AF  0836               	movf	??_main,w
   895  06B0  00E7               	movwf	main@min
   896                           
   897                           ;main.c: 63: hour=(char)rtc.hour;
   898  06B1  086B               	movf	main@rtc+2,w
   899  06B2  00B6               	movwf	??_main
   900  06B3  0836               	movf	??_main,w
   901  06B4  00E8               	movwf	main@hour
   902                           
   903                           ;main.c: 65: sprintf(buffer,"Time= %u : %u :%u ",RTC_ConvertFromDec(hour),RTC_ConvertFro
      +                          mDec(min),RTC_ConvertFromDec(sec));
   904  06B5  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   905  06B6  00B6               	movwf	??_main
   906  06B7  0836               	movf	??_main,w
   907  06B8  00A0               	movwf	sprintf@f
   908  06B9  0868               	movf	main@hour,w
   909  06BA  120A  118A  2293  120A  118A  	fcall	_RTC_ConvertFromDec
   910  06BF  1283               	bcf	3,5	;RP0=0, select bank0
   911  06C0  1303               	bcf	3,6	;RP1=0, select bank0
   912  06C1  00B7               	movwf	??_main+1
   913  06C2  01B8               	clrf	??_main+2
   914  06C3  0837               	movf	??_main+1,w
   915  06C4  00A1               	movwf	?_sprintf+1
   916  06C5  0838               	movf	??_main+2,w
   917  06C6  00A2               	movwf	?_sprintf+2
   918  06C7  0867               	movf	main@min,w
   919  06C8  120A  118A  2293  120A  118A  	fcall	_RTC_ConvertFromDec
   920  06CD  1283               	bcf	3,5	;RP0=0, select bank0
   921  06CE  1303               	bcf	3,6	;RP1=0, select bank0
   922  06CF  00B9               	movwf	??_main+3
   923  06D0  01BA               	clrf	??_main+4
   924  06D1  0839               	movf	??_main+3,w
   925  06D2  00A3               	movwf	?_sprintf+3
   926  06D3  083A               	movf	??_main+4,w
   927  06D4  00A4               	movwf	?_sprintf+4
   928  06D5  0866               	movf	main@sec,w
   929  06D6  120A  118A  2293  120A  118A  	fcall	_RTC_ConvertFromDec
   930  06DB  1283               	bcf	3,5	;RP0=0, select bank0
   931  06DC  1303               	bcf	3,6	;RP1=0, select bank0
   932  06DD  00BB               	movwf	??_main+5
   933  06DE  01BC               	clrf	??_main+6
   934  06DF  083B               	movf	??_main+5,w
   935  06E0  00A5               	movwf	?_sprintf+5
   936  06E1  083C               	movf	??_main+6,w
   937  06E2  00A6               	movwf	?_sprintf+6
   938  06E3  303D               	movlw	(low (main@buffer| 0))& (0+255)
   939  06E4  120A  118A  2588  120A  118A  	fcall	_sprintf
   940                           
   941                           ;main.c: 66: Usart_PrintString(buffer);
   942  06E9  303D               	movlw	(low (main@buffer| 0))& (0+255)
   943  06EA  00F1               	movwf	Usart_PrintString@Text
   944  06EB  3000               	movlw	0
   945  06EC  00F2               	movwf	Usart_PrintString@Text+1
   946  06ED  120A  118A  2350  120A  118A  	fcall	_Usart_PrintString
   947                           
   948                           ;main.c: 67: Transmit_char(0x0D);
   949  06F2  300D               	movlw	13
   950  06F3  120A  118A  2260  120A  118A  	fcall	_Transmit_char
   951                           
   952                           ;main.c: 68: Transmit_char(0x0A);
   953  06F8  300A               	movlw	10
   954  06F9  120A  118A  2260  120A  118A  	fcall	_Transmit_char
   955                           
   956                           ;main.c: 69: _delay((unsigned long)((500)*(8000000/4000.0)));
   957  06FE  3006               	movlw	6
   958  06FF  1283               	bcf	3,5	;RP0=0, select bank0
   959  0700  1303               	bcf	3,6	;RP1=0, select bank0
   960  0701  00B8               	movwf	??_main+2
   961  0702  3013               	movlw	19
   962  0703  00B7               	movwf	??_main+1
   963  0704  30AD               	movlw	173
   964  0705  00B6               	movwf	??_main
   965  0706                     u1317:	
   966  0706  0BB6               	decfsz	??_main,f
   967  0707  2F06               	goto	u1317
   968  0708  0BB7               	decfsz	??_main+1,f
   969  0709  2F06               	goto	u1317
   970  070A  0BB8               	decfsz	??_main+2,f
   971  070B  2F06               	goto	u1317
   972  070C  2E85               	goto	l1431
   973  070D                     __end_of_main:	
   974                           
   975                           	psect	text1
   976  0588                     __ptext1:	
   977 ;; *************** function _sprintf *****************
   978 ;; Defined at:
   979 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;  sp              1    wreg     PTR unsigned char 
   982 ;;		 -> main@buffer(40), 
   983 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   984 ;;		 -> STR_2(19), 
   985 ;; Auto vars:     Size  Location     Type
   986 ;;  sp              1   15[BANK0 ] PTR unsigned char 
   987 ;;		 -> main@buffer(40), 
   988 ;;  tmpval          4    0        struct .
   989 ;;  val             2   12[BANK0 ] unsigned int 
   990 ;;  cp              2    0        PTR const unsigned char 
   991 ;;  len             2    0        unsigned int 
   992 ;;  c               1   16[BANK0 ] char 
   993 ;;  prec            1   14[BANK0 ] char 
   994 ;;  ap              1   11[BANK0 ] PTR void [1]
   995 ;;		 -> ?_sprintf(2), 
   996 ;;  flag            1   10[BANK0 ] unsigned char 
   997 ;; Return value:  Size  Location     Type
   998 ;;                  2    0[BANK0 ] int 
   999 ;; Registers used:
  1000 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1006 ;;      Params:         0       7       0       0       0
  1007 ;;      Locals:         0       7       0       0       0
  1008 ;;      Temps:          0       3       0       0       0
  1009 ;;      Totals:         0      17       0       0       0
  1010 ;;Total ram usage:       17 bytes
  1011 ;; Hardware stack levels used:    1
  1012 ;; Hardware stack levels required when called:    1
  1013 ;; This function calls:
  1014 ;;		___lwdiv
  1015 ;;		___lwmod
  1016 ;; This function is called by:
  1017 ;;		_main
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021                           
  1022                           ;psect for function _sprintf
  1023  0588                     _sprintf:	
  1024                           
  1025                           ;incstack = 0
  1026                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1027                           ;sprintf@sp stored from wreg
  1028  0588  1283               	bcf	3,5	;RP0=0, select bank0
  1029  0589  1303               	bcf	3,6	;RP1=0, select bank0
  1030  058A  00AF               	movwf	sprintf@sp
  1031                           
  1032                           ;doprnt.c: 494: va_list ap;
  1033                           ;doprnt.c: 499: signed char c;
  1034                           ;doprnt.c: 506: signed char prec;
  1035                           ;doprnt.c: 508: unsigned char flag;
  1036                           ;doprnt.c: 523: union {
  1037                           ;doprnt.c: 524: unsigned long vd;
  1038                           ;doprnt.c: 525: double integ;
  1039                           ;doprnt.c: 526: } tmpval;
  1040                           ;doprnt.c: 528: unsigned int val;
  1041                           ;doprnt.c: 529: unsigned len;
  1042                           ;doprnt.c: 530: const char * cp;
  1043                           ;doprnt.c: 533: *ap = __va_start();
  1044  058B  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1045  058C  00A7               	movwf	??_sprintf
  1046  058D  0827               	movf	??_sprintf,w
  1047  058E  00AB               	movwf	sprintf@ap
  1048  058F                     l1407:	
  1049                           ;doprnt.c: 536: while(c = *f++) {
  1050                           
  1051  058F  3001               	movlw	1
  1052  0590  07A0               	addwf	sprintf@f,f
  1053  0591  30FF               	movlw	-1
  1054  0592  0720               	addwf	sprintf@f,w
  1055  0593  0084               	movwf	4
  1056  0594  120A  118A  200D  120A  118A  	fcall	stringdir
  1057  0599  00A7               	movwf	??_sprintf
  1058  059A  0827               	movf	??_sprintf,w
  1059  059B  00B0               	movwf	sprintf@c
  1060  059C  0830               	movf	sprintf@c,w
  1061  059D  1903               	btfsc	3,2
  1062  059E  2E40               	goto	l1409
  1063                           
  1064                           ;doprnt.c: 538: if(c != '%')
  1065  059F  3025               	movlw	37
  1066  05A0  0630               	xorwf	sprintf@c,w
  1067  05A1  1903               	btfsc	3,2
  1068  05A2  2DAF               	goto	l1373
  1069                           
  1070                           ;doprnt.c: 540: {
  1071                           ;doprnt.c: 541: ((*sp++ = (c)));
  1072  05A3  0830               	movf	sprintf@c,w
  1073  05A4  00A7               	movwf	??_sprintf
  1074  05A5  082F               	movf	sprintf@sp,w
  1075  05A6  0084               	movwf	4
  1076  05A7  0827               	movf	??_sprintf,w
  1077  05A8  1383               	bcf	3,7	;select IRP bank0
  1078  05A9  0080               	movwf	0
  1079  05AA  3001               	movlw	1
  1080  05AB  00A7               	movwf	??_sprintf
  1081  05AC  0827               	movf	??_sprintf,w
  1082  05AD  07AF               	addwf	sprintf@sp,f
  1083                           
  1084                           ;doprnt.c: 542: continue;
  1085  05AE  2D8F               	goto	l1407
  1086  05AF                     l1373:	
  1087                           
  1088                           ;doprnt.c: 543: }
  1089                           ;doprnt.c: 548: flag = 0;
  1090  05AF  01AA               	clrf	sprintf@flag
  1091                           
  1092                           ;doprnt.c: 635: switch(c = *f++) {
  1093  05B0  2DB6               	goto	l1379
  1094  05B1                     l1375:	
  1095                           ;doprnt.c: 817: case 'u':
  1096                           
  1097                           ;doprnt.c: 813: continue;
  1098                           
  1099                           ;doprnt.c: 802: default:
  1100                           
  1101                           ;doprnt.c: 638: goto alldone;
  1102                           
  1103                           ;doprnt.c: 637: case 0:
  1104                           
  1105                           
  1106                           ;doprnt.c: 818: flag |= 0xC0;
  1107  05B1  30C0               	movlw	192
  1108  05B2  00A7               	movwf	??_sprintf
  1109  05B3  0827               	movf	??_sprintf,w
  1110  05B4  04AA               	iorwf	sprintf@flag,f
  1111                           
  1112                           ;doprnt.c: 822: }
  1113                           
  1114                           ;doprnt.c: 819: break;
  1115  05B5  2DC8               	goto	l1381
  1116  05B6                     l1379:	
  1117  05B6  3001               	movlw	1
  1118  05B7  07A0               	addwf	sprintf@f,f
  1119  05B8  30FF               	movlw	-1
  1120  05B9  0720               	addwf	sprintf@f,w
  1121  05BA  0084               	movwf	4
  1122  05BB  120A  118A  200D  120A  118A  	fcall	stringdir
  1123  05C0  00B0               	movwf	sprintf@c
  1124                           
  1125                           ; Switch size 1, requested type "space"
  1126                           ; Number of cases is 2, Range of values is 0 to 117
  1127                           ; switch strategies available:
  1128                           ; Name         Instructions Cycles
  1129                           ; simple_byte            7     4 (average)
  1130                           ; jumptable            260     6 (fixed)
  1131                           ;	Chosen strategy is simple_byte
  1132  05C1  3A00               	xorlw	0	; case 0
  1133  05C2  1903               	skipnz
  1134  05C3  2E40               	goto	l1409
  1135  05C4  3A75               	xorlw	117	; case 117
  1136  05C5  1903               	skipnz
  1137  05C6  2DB1               	goto	l1375
  1138  05C7  2D8F               	goto	l1407
  1139  05C8                     l1381:	
  1140                           
  1141                           ;doprnt.c: 1273: {
  1142                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1143  05C8  082B               	movf	sprintf@ap,w
  1144  05C9  0084               	movwf	4
  1145  05CA  1383               	bcf	3,7	;select IRP bank0
  1146  05CB  0800               	movf	0,w
  1147  05CC  00AC               	movwf	sprintf@val
  1148  05CD  0A84               	incf	4,f
  1149  05CE  0800               	movf	0,w
  1150  05CF  00AD               	movwf	sprintf@val+1
  1151  05D0  3002               	movlw	2
  1152  05D1  00A7               	movwf	??_sprintf
  1153  05D2  0827               	movf	??_sprintf,w
  1154  05D3  07AB               	addwf	sprintf@ap,f
  1155                           
  1156                           ;doprnt.c: 1287: }
  1157                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1158  05D4  01B0               	clrf	sprintf@c
  1159  05D5  0AB0               	incf	sprintf@c,f
  1160  05D6  3005               	movlw	5
  1161  05D7  0630               	xorwf	sprintf@c,w
  1162  05D8  1903               	btfsc	3,2
  1163  05D9  2DFB               	goto	l1397
  1164  05DA                     l1391:	
  1165                           
  1166                           ;doprnt.c: 1306: if(val < dpowers[c])
  1167  05DA  0830               	movf	sprintf@c,w
  1168  05DB  00A7               	movwf	??_sprintf
  1169  05DC  0727               	addwf	??_sprintf,w
  1170  05DD  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1171  05DE  0084               	movwf	4
  1172  05DF  120A  118A  200D  120A  118A  	fcall	stringdir
  1173  05E4  00A8               	movwf	??_sprintf+1
  1174  05E5  120A  118A  200D  120A  118A  	fcall	stringdir
  1175  05EA  00A9               	movwf	??_sprintf+2
  1176  05EB  0829               	movf	??_sprintf+2,w
  1177  05EC  022D               	subwf	sprintf@val+1,w
  1178  05ED  1D03               	skipz
  1179  05EE  2DF1               	goto	u1255
  1180  05EF  0828               	movf	??_sprintf+1,w
  1181  05F0  022C               	subwf	sprintf@val,w
  1182  05F1                     u1255:	
  1183  05F1  1C03               	btfss	3,0
  1184  05F2  2DFB               	goto	l1397
  1185                           
  1186                           ;doprnt.c: 1307: break;
  1187  05F3  3001               	movlw	1
  1188  05F4  00A7               	movwf	??_sprintf
  1189  05F5  0827               	movf	??_sprintf,w
  1190  05F6  07B0               	addwf	sprintf@c,f
  1191  05F7  3005               	movlw	5
  1192  05F8  0630               	xorwf	sprintf@c,w
  1193  05F9  1D03               	btfss	3,2
  1194  05FA  2DDA               	goto	l1391
  1195  05FB                     l1397:	
  1196                           
  1197                           ;doprnt.c: 1422: {
  1198                           ;doprnt.c: 1469: }
  1199                           ;doprnt.c: 1472: prec = c;
  1200  05FB  0830               	movf	sprintf@c,w
  1201  05FC  00A7               	movwf	??_sprintf
  1202  05FD  0827               	movf	??_sprintf,w
  1203  05FE  00AE               	movwf	sprintf@prec
  1204  05FF                     l1405:	
  1205                           ;doprnt.c: 1474: while(prec--) {
  1206                           
  1207  05FF  30FF               	movlw	255
  1208  0600  00A7               	movwf	??_sprintf
  1209  0601  0827               	movf	??_sprintf,w
  1210  0602  07AE               	addwf	sprintf@prec,f
  1211  0603  0A2E               	incf	sprintf@prec,w
  1212  0604  1903               	btfsc	3,2
  1213  0605  2D8F               	goto	l1407
  1214                           
  1215                           ;doprnt.c: 1478: {
  1216                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1217  0606  300A               	movlw	10
  1218  0607  00F8               	movwf	___lwmod@divisor
  1219  0608  3000               	movlw	0
  1220  0609  00F9               	movwf	___lwmod@divisor+1
  1221  060A  082E               	movf	sprintf@prec,w
  1222  060B  00A7               	movwf	??_sprintf
  1223  060C  0727               	addwf	??_sprintf,w
  1224  060D  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1225  060E  0084               	movwf	4
  1226  060F  120A  118A  200D  120A  118A  	fcall	stringdir
  1227  0614  00F0               	movwf	___lwdiv@divisor
  1228  0615  120A  118A  200D  120A  118A  	fcall	stringdir
  1229  061A  00F1               	movwf	___lwdiv@divisor+1
  1230  061B  082D               	movf	sprintf@val+1,w
  1231  061C  00F3               	movwf	___lwdiv@dividend+1
  1232  061D  082C               	movf	sprintf@val,w
  1233  061E  00F2               	movwf	___lwdiv@dividend
  1234  061F  120A  118A  2386  120A  118A  	fcall	___lwdiv
  1235  0624  0871               	movf	?___lwdiv+1,w
  1236  0625  00FB               	movwf	___lwmod@dividend+1
  1237  0626  0870               	movf	?___lwdiv,w
  1238  0627  00FA               	movwf	___lwmod@dividend
  1239  0628  120A  118A  22E8  120A  118A  	fcall	___lwmod
  1240  062D  0878               	movf	?___lwmod,w
  1241  062E  3E30               	addlw	48
  1242  062F  1283               	bcf	3,5	;RP0=0, select bank0
  1243  0630  1303               	bcf	3,6	;RP1=0, select bank0
  1244  0631  00A8               	movwf	??_sprintf+1
  1245  0632  0828               	movf	??_sprintf+1,w
  1246  0633  00B0               	movwf	sprintf@c
  1247                           
  1248                           ;doprnt.c: 1523: }
  1249                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1250  0634  0830               	movf	sprintf@c,w
  1251  0635  00A7               	movwf	??_sprintf
  1252  0636  082F               	movf	sprintf@sp,w
  1253  0637  0084               	movwf	4
  1254  0638  0827               	movf	??_sprintf,w
  1255  0639  1383               	bcf	3,7	;select IRP bank0
  1256  063A  0080               	movwf	0
  1257  063B  3001               	movlw	1
  1258  063C  00A7               	movwf	??_sprintf
  1259  063D  0827               	movf	??_sprintf,w
  1260  063E  07AF               	addwf	sprintf@sp,f
  1261  063F  2DFF               	goto	l1405
  1262  0640                     l1409:	
  1263                           ;doprnt.c: 1525: }
  1264                           ;doprnt.c: 1533: }
  1265                           ;doprnt.c: 1535: alldone:
  1266                           
  1267                           
  1268                           ;doprnt.c: 1538: *sp = 0;
  1269  0640  082F               	movf	sprintf@sp,w
  1270  0641  0084               	movwf	4
  1271  0642  1383               	bcf	3,7	;select IRP bank0
  1272  0643  0180               	clrf	0
  1273  0644  0008               	return
  1274  0645                     __end_of_sprintf:	
  1275                           ;doprnt.c: 1540: return 0;
  1276                           ;	Return value of _sprintf is never used
  1277                           
  1278                           
  1279                           	psect	text2
  1280  02E8                     __ptext2:	
  1281 ;; *************** function ___lwmod *****************
  1282 ;; Defined at:
  1283 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;  divisor         2    8[COMMON] unsigned int 
  1286 ;;  dividend        2   10[COMMON] unsigned int 
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;  counter         1   13[COMMON] unsigned char 
  1289 ;; Return value:  Size  Location     Type
  1290 ;;                  2    8[COMMON] unsigned int 
  1291 ;; Registers used:
  1292 ;;		wreg, status,2, status,0
  1293 ;; Tracked objects:
  1294 ;;		On entry : 0/0
  1295 ;;		On exit  : 0/0
  1296 ;;		Unchanged: 0/0
  1297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1298 ;;      Params:         4       0       0       0       0
  1299 ;;      Locals:         1       0       0       0       0
  1300 ;;      Temps:          1       0       0       0       0
  1301 ;;      Totals:         6       0       0       0       0
  1302 ;;Total ram usage:        6 bytes
  1303 ;; Hardware stack levels used:    1
  1304 ;; This function calls:
  1305 ;;		Nothing
  1306 ;; This function is called by:
  1307 ;;		_sprintf
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           
  1312                           ;psect for function ___lwmod
  1313  02E8                     ___lwmod:	
  1314                           
  1315                           ;incstack = 0
  1316                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1317  02E8  0878               	movf	___lwmod@divisor,w
  1318  02E9  0479               	iorwf	___lwmod@divisor+1,w
  1319  02EA  1903               	btfsc	3,2
  1320  02EB  2B15               	goto	l1247
  1321  02EC  01FD               	clrf	___lwmod@counter
  1322  02ED  0AFD               	incf	___lwmod@counter,f
  1323  02EE                     l1237:	
  1324  02EE  1BF9               	btfsc	___lwmod@divisor+1,7
  1325  02EF  2AFC               	goto	l1239
  1326  02F0  3001               	movlw	1
  1327  02F1                     u1075:	
  1328  02F1  1003               	clrc
  1329  02F2  0DF8               	rlf	___lwmod@divisor,f
  1330  02F3  0DF9               	rlf	___lwmod@divisor+1,f
  1331  02F4  3EFF               	addlw	-1
  1332  02F5  1D03               	skipz
  1333  02F6  2AF1               	goto	u1075
  1334  02F7  3001               	movlw	1
  1335  02F8  00FC               	movwf	??___lwmod
  1336  02F9  087C               	movf	??___lwmod,w
  1337  02FA  07FD               	addwf	___lwmod@counter,f
  1338  02FB  2AEE               	goto	l1237
  1339  02FC                     l1239:	
  1340  02FC  0879               	movf	___lwmod@divisor+1,w
  1341  02FD  027B               	subwf	___lwmod@dividend+1,w
  1342  02FE  1D03               	skipz
  1343  02FF  2B02               	goto	u1095
  1344  0300  0878               	movf	___lwmod@divisor,w
  1345  0301  027A               	subwf	___lwmod@dividend,w
  1346  0302                     u1095:	
  1347  0302  1C03               	skipc
  1348  0303  2B0A               	goto	l1243
  1349  0304  0878               	movf	___lwmod@divisor,w
  1350  0305  02FA               	subwf	___lwmod@dividend,f
  1351  0306  0879               	movf	___lwmod@divisor+1,w
  1352  0307  1C03               	skipc
  1353  0308  03FB               	decf	___lwmod@dividend+1,f
  1354  0309  02FB               	subwf	___lwmod@dividend+1,f
  1355  030A                     l1243:	
  1356  030A  3001               	movlw	1
  1357  030B                     u1105:	
  1358  030B  1003               	clrc
  1359  030C  0CF9               	rrf	___lwmod@divisor+1,f
  1360  030D  0CF8               	rrf	___lwmod@divisor,f
  1361  030E  3EFF               	addlw	-1
  1362  030F  1D03               	skipz
  1363  0310  2B0B               	goto	u1105
  1364  0311  3001               	movlw	1
  1365  0312  02FD               	subwf	___lwmod@counter,f
  1366  0313  1D03               	btfss	3,2
  1367  0314  2AFC               	goto	l1239
  1368  0315                     l1247:	
  1369  0315  087B               	movf	___lwmod@dividend+1,w
  1370  0316  00F9               	movwf	?___lwmod+1
  1371  0317  087A               	movf	___lwmod@dividend,w
  1372  0318  00F8               	movwf	?___lwmod
  1373  0319  0008               	return
  1374  031A                     __end_of___lwmod:	
  1375                           
  1376                           	psect	text3
  1377  0386                     __ptext3:	
  1378 ;; *************** function ___lwdiv *****************
  1379 ;; Defined at:
  1380 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;  divisor         2    0[COMMON] unsigned int 
  1383 ;;  dividend        2    2[COMMON] unsigned int 
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;  quotient        2    5[COMMON] unsigned int 
  1386 ;;  counter         1    7[COMMON] unsigned char 
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  2    0[COMMON] unsigned int 
  1389 ;; Registers used:
  1390 ;;		wreg, status,2, status,0
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1396 ;;      Params:         4       0       0       0       0
  1397 ;;      Locals:         3       0       0       0       0
  1398 ;;      Temps:          1       0       0       0       0
  1399 ;;      Totals:         8       0       0       0       0
  1400 ;;Total ram usage:        8 bytes
  1401 ;; Hardware stack levels used:    1
  1402 ;; This function calls:
  1403 ;;		Nothing
  1404 ;; This function is called by:
  1405 ;;		_sprintf
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409                           
  1410                           ;psect for function ___lwdiv
  1411  0386                     ___lwdiv:	
  1412                           
  1413                           ;incstack = 0
  1414                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1415  0386  01F5               	clrf	___lwdiv@quotient
  1416  0387  01F6               	clrf	___lwdiv@quotient+1
  1417  0388  0870               	movf	___lwdiv@divisor,w
  1418  0389  0471               	iorwf	___lwdiv@divisor+1,w
  1419  038A  1903               	btfsc	3,2
  1420  038B  2BBD               	goto	l1225
  1421  038C  01F7               	clrf	___lwdiv@counter
  1422  038D  0AF7               	incf	___lwdiv@counter,f
  1423  038E                     l1213:	
  1424  038E  1BF1               	btfsc	___lwdiv@divisor+1,7
  1425  038F  2B9C               	goto	l1215
  1426  0390  3001               	movlw	1
  1427  0391                     u1005:	
  1428  0391  1003               	clrc
  1429  0392  0DF0               	rlf	___lwdiv@divisor,f
  1430  0393  0DF1               	rlf	___lwdiv@divisor+1,f
  1431  0394  3EFF               	addlw	-1
  1432  0395  1D03               	skipz
  1433  0396  2B91               	goto	u1005
  1434  0397  3001               	movlw	1
  1435  0398  00F4               	movwf	??___lwdiv
  1436  0399  0874               	movf	??___lwdiv,w
  1437  039A  07F7               	addwf	___lwdiv@counter,f
  1438  039B  2B8E               	goto	l1213
  1439  039C                     l1215:	
  1440  039C  3001               	movlw	1
  1441  039D                     u1025:	
  1442  039D  1003               	clrc
  1443  039E  0DF5               	rlf	___lwdiv@quotient,f
  1444  039F  0DF6               	rlf	___lwdiv@quotient+1,f
  1445  03A0  3EFF               	addlw	-1
  1446  03A1  1D03               	skipz
  1447  03A2  2B9D               	goto	u1025
  1448  03A3  0871               	movf	___lwdiv@divisor+1,w
  1449  03A4  0273               	subwf	___lwdiv@dividend+1,w
  1450  03A5  1D03               	skipz
  1451  03A6  2BA9               	goto	u1035
  1452  03A7  0870               	movf	___lwdiv@divisor,w
  1453  03A8  0272               	subwf	___lwdiv@dividend,w
  1454  03A9                     u1035:	
  1455  03A9  1C03               	skipc
  1456  03AA  2BB2               	goto	l1221
  1457  03AB  0870               	movf	___lwdiv@divisor,w
  1458  03AC  02F2               	subwf	___lwdiv@dividend,f
  1459  03AD  0871               	movf	___lwdiv@divisor+1,w
  1460  03AE  1C03               	skipc
  1461  03AF  03F3               	decf	___lwdiv@dividend+1,f
  1462  03B0  02F3               	subwf	___lwdiv@dividend+1,f
  1463  03B1  1475               	bsf	___lwdiv@quotient,0
  1464  03B2                     l1221:	
  1465  03B2  3001               	movlw	1
  1466  03B3                     u1045:	
  1467  03B3  1003               	clrc
  1468  03B4  0CF1               	rrf	___lwdiv@divisor+1,f
  1469  03B5  0CF0               	rrf	___lwdiv@divisor,f
  1470  03B6  3EFF               	addlw	-1
  1471  03B7  1D03               	skipz
  1472  03B8  2BB3               	goto	u1045
  1473  03B9  3001               	movlw	1
  1474  03BA  02F7               	subwf	___lwdiv@counter,f
  1475  03BB  1D03               	btfss	3,2
  1476  03BC  2B9C               	goto	l1215
  1477  03BD                     l1225:	
  1478  03BD  0876               	movf	___lwdiv@quotient+1,w
  1479  03BE  00F1               	movwf	?___lwdiv+1
  1480  03BF  0875               	movf	___lwdiv@quotient,w
  1481  03C0  00F0               	movwf	?___lwdiv
  1482  03C1  0008               	return
  1483  03C2                     __end_of___lwdiv:	
  1484                           
  1485                           	psect	text4
  1486  0350                     __ptext4:	
  1487 ;; *************** function _Usart_PrintString *****************
  1488 ;; Defined at:
  1489 ;;		line 58 in file "USART.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;  Text            2    1[COMMON] PTR unsigned char 
  1492 ;;		 -> main@buffer(40), STR_1(8), 
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;  i               1    4[COMMON] unsigned char 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1504 ;;      Params:         2       0       0       0       0
  1505 ;;      Locals:         1       0       0       0       0
  1506 ;;      Temps:          1       0       0       0       0
  1507 ;;      Totals:         4       0       0       0       0
  1508 ;;Total ram usage:        4 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    1
  1511 ;; This function calls:
  1512 ;;		_Transmit_char
  1513 ;; This function is called by:
  1514 ;;		_main
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           
  1519                           ;psect for function _Usart_PrintString
  1520  0350                     _Usart_PrintString:	
  1521                           
  1522                           ;USART.c: 60: char i=0;
  1523                           
  1524                           ;incstack = 0
  1525                           ; Regs used in _Usart_PrintString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1526  0350  01F4               	clrf	Usart_PrintString@i
  1527                           
  1528                           ;USART.c: 61: for(i=0;Text[i]!='\0';i++)
  1529  0351  01F4               	clrf	Usart_PrintString@i
  1530  0352                     l1315:	
  1531  0352  0874               	movf	Usart_PrintString@i,w
  1532  0353  0771               	addwf	Usart_PrintString@Text,w
  1533  0354  0084               	movwf	4
  1534  0355  0872               	movf	Usart_PrintString@Text+1,w
  1535  0356  1803               	skipnc
  1536  0357  0A72               	incf	Usart_PrintString@Text+1,w
  1537  0358  1283               	bcf	3,5	;RP0=0, select bank0
  1538  0359  1303               	bcf	3,6	;RP1=0, select bank0
  1539  035A  00FF               	movwf	127
  1540  035B  120A  118A  2003  120A  118A  	fcall	stringtab
  1541  0360  3A00               	xorlw	0
  1542  0361  1903               	btfsc	3,2
  1543  0362  2B7B               	goto	l1317
  1544                           
  1545                           ;USART.c: 62: {
  1546                           ;USART.c: 63: Transmit_char(Text[i]);
  1547  0363  0874               	movf	Usart_PrintString@i,w
  1548  0364  0771               	addwf	Usart_PrintString@Text,w
  1549  0365  0084               	movwf	4
  1550  0366  0872               	movf	Usart_PrintString@Text+1,w
  1551  0367  1803               	skipnc
  1552  0368  0A72               	incf	Usart_PrintString@Text+1,w
  1553  0369  1283               	bcf	3,5	;RP0=0, select bank0
  1554  036A  1303               	bcf	3,6	;RP1=0, select bank0
  1555  036B  00FF               	movwf	127
  1556  036C  120A  118A  2003  120A  118A  	fcall	stringtab
  1557  0371  120A  118A  2260  120A  118A  	fcall	_Transmit_char
  1558  0376  3001               	movlw	1
  1559  0377  00F3               	movwf	??_Usart_PrintString
  1560  0378  0873               	movf	??_Usart_PrintString,w
  1561  0379  07F4               	addwf	Usart_PrintString@i,f
  1562  037A  2B52               	goto	l1315
  1563  037B                     l1317:	
  1564                           
  1565                           ;USART.c: 64: }
  1566                           ;USART.c: 65: Transmit_char(0x0D);
  1567  037B  300D               	movlw	13
  1568  037C  120A  118A  2260  120A  118A  	fcall	_Transmit_char
  1569                           
  1570                           ;USART.c: 66: Transmit_char(0x0A);
  1571  0381  300A               	movlw	10
  1572  0382  120A  118A  2260   	fcall	_Transmit_char
  1573  0385  0008               	return
  1574  0386                     __end_of_Usart_PrintString:	
  1575                           
  1576                           	psect	text5
  1577  0260                     __ptext5:	
  1578 ;; *************** function _Transmit_char *****************
  1579 ;; Defined at:
  1580 ;;		line 37 in file "USART.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;  data            1    wreg     unsigned char 
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;  data            1    0[COMMON] unsigned char 
  1585 ;; Return value:  Size  Location     Type
  1586 ;;                  1    wreg      void 
  1587 ;; Registers used:
  1588 ;;		wreg
  1589 ;; Tracked objects:
  1590 ;;		On entry : 0/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1594 ;;      Params:         0       0       0       0       0
  1595 ;;      Locals:         1       0       0       0       0
  1596 ;;      Temps:          0       0       0       0       0
  1597 ;;      Totals:         1       0       0       0       0
  1598 ;;Total ram usage:        1 bytes
  1599 ;; Hardware stack levels used:    1
  1600 ;; This function calls:
  1601 ;;		Nothing
  1602 ;; This function is called by:
  1603 ;;		_main
  1604 ;;		_Usart_PrintString
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           
  1609                           ;psect for function _Transmit_char
  1610  0260                     _Transmit_char:	
  1611                           
  1612                           ;incstack = 0
  1613                           ; Regs used in _Transmit_char: [wreg]
  1614                           ;Transmit_char@data stored from wreg
  1615  0260  00F0               	movwf	Transmit_char@data
  1616  0261                     l156:	
  1617                           ;USART.c: 39: while(!TRMT);
  1618                           
  1619  0261  1683               	bsf	3,5	;RP0=1, select bank1
  1620  0262  1303               	bcf	3,6	;RP1=0, select bank1
  1621  0263  1C98               	btfss	24,1	;volatile
  1622  0264  2A61               	goto	l156
  1623                           
  1624                           ;USART.c: 40: TXREG=data;
  1625  0265  0870               	movf	Transmit_char@data,w
  1626  0266  1283               	bcf	3,5	;RP0=0, select bank0
  1627  0267  1303               	bcf	3,6	;RP1=0, select bank0
  1628  0268  0099               	movwf	25	;volatile
  1629  0269  0008               	return
  1630  026A                     __end_of_Transmit_char:	
  1631                           
  1632                           	psect	text6
  1633  070D                     __ptext6:	
  1634 ;; *************** function _USART_Init *****************
  1635 ;; Defined at:
  1636 ;;		line 8 in file "USART.c"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;  baud            4    6[BANK0 ] long 
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;  x               2    9[COMMON] unsigned int 
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  1    wreg      unsigned char 
  1643 ;; Registers used:
  1644 ;;		wreg, status,2, status,0, pclath, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1650 ;;      Params:         0       4       0       0       0
  1651 ;;      Locals:         2       0       0       0       0
  1652 ;;      Temps:          0      12       0       0       0
  1653 ;;      Totals:         2      16       0       0       0
  1654 ;;Total ram usage:       18 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    1
  1657 ;; This function calls:
  1658 ;;		___aldiv
  1659 ;; This function is called by:
  1660 ;;		_main
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           
  1665                           ;psect for function _USART_Init
  1666  070D                     _USART_Init:	
  1667                           
  1668                           ;USART.c: 10: unsigned int x;
  1669                           ;USART.c: 11: x=((8000000 - baud*64)/(baud*64));
  1670                           
  1671                           ;incstack = 0
  1672                           ; Regs used in _USART_Init: [wreg+status,2+status,0+pclath+cstack]
  1673  070D  1283               	bcf	3,5	;RP0=0, select bank0
  1674  070E  1303               	bcf	3,6	;RP1=0, select bank0
  1675  070F  0826               	movf	USART_Init@baud,w
  1676  0710  00AA               	movwf	??_USART_Init
  1677  0711  0827               	movf	USART_Init@baud+1,w
  1678  0712  00AB               	movwf	??_USART_Init+1
  1679  0713  0828               	movf	USART_Init@baud+2,w
  1680  0714  00AC               	movwf	??_USART_Init+2
  1681  0715  0829               	movf	USART_Init@baud+3,w
  1682  0716  00AD               	movwf	??_USART_Init+3
  1683  0717  3006               	movlw	6
  1684  0718                     u1145:	
  1685  0718  1003               	clrc
  1686  0719  0DAA               	rlf	??_USART_Init,f
  1687  071A  0DAB               	rlf	??_USART_Init+1,f
  1688  071B  0DAC               	rlf	??_USART_Init+2,f
  1689  071C  0DAD               	rlf	??_USART_Init+3,f
  1690  071D  3EFF               	addlw	-1
  1691  071E  1D03               	skipz
  1692  071F  2F18               	goto	u1145
  1693  0720  082D               	movf	??_USART_Init+3,w
  1694  0721  00F3               	movwf	___aldiv@divisor+3
  1695  0722  082C               	movf	??_USART_Init+2,w
  1696  0723  00F2               	movwf	___aldiv@divisor+2
  1697  0724  082B               	movf	??_USART_Init+1,w
  1698  0725  00F1               	movwf	___aldiv@divisor+1
  1699  0726  082A               	movf	??_USART_Init,w
  1700  0727  00F0               	movwf	___aldiv@divisor
  1701  0728  3000               	movlw	0
  1702  0729  00AE               	movwf	??_USART_Init+4
  1703  072A  3012               	movlw	18
  1704  072B  00AF               	movwf	??_USART_Init+5
  1705  072C  307A               	movlw	122
  1706  072D  00B0               	movwf	??_USART_Init+6
  1707  072E  3000               	movlw	0
  1708  072F  00B1               	movwf	??_USART_Init+7
  1709  0730  0826               	movf	USART_Init@baud,w
  1710  0731  00B2               	movwf	??_USART_Init+8
  1711  0732  0827               	movf	USART_Init@baud+1,w
  1712  0733  00B3               	movwf	??_USART_Init+9
  1713  0734  0828               	movf	USART_Init@baud+2,w
  1714  0735  00B4               	movwf	??_USART_Init+10
  1715  0736  0829               	movf	USART_Init@baud+3,w
  1716  0737  00B5               	movwf	??_USART_Init+11
  1717  0738  3006               	movlw	6
  1718  0739                     u1155:	
  1719  0739  1003               	clrc
  1720  073A  0DB2               	rlf	??_USART_Init+8,f
  1721  073B  0DB3               	rlf	??_USART_Init+9,f
  1722  073C  0DB4               	rlf	??_USART_Init+10,f
  1723  073D  0DB5               	rlf	??_USART_Init+11,f
  1724  073E  3EFF               	addlw	-1
  1725  073F  1D03               	skipz
  1726  0740  2F39               	goto	u1155
  1727  0741  09B2               	comf	??_USART_Init+8,f
  1728  0742  09B3               	comf	??_USART_Init+9,f
  1729  0743  09B4               	comf	??_USART_Init+10,f
  1730  0744  09B5               	comf	??_USART_Init+11,f
  1731  0745  0AB2               	incf	??_USART_Init+8,f
  1732  0746  1903               	skipnz
  1733  0747  0AB3               	incf	??_USART_Init+9,f
  1734  0748  1903               	skipnz
  1735  0749  0AB4               	incf	??_USART_Init+10,f
  1736  074A  1903               	skipnz
  1737  074B  0AB5               	incf	??_USART_Init+11,f
  1738  074C  0832               	movf	??_USART_Init+8,w
  1739  074D  07AE               	addwf	??_USART_Init+4,f
  1740  074E  0833               	movf	??_USART_Init+9,w
  1741  074F  1803               	skipnc
  1742  0750  0F33               	incfsz	??_USART_Init+9,w
  1743  0751  2F53               	goto	u1160
  1744  0752  2F54               	goto	u1161
  1745  0753                     u1160:	
  1746  0753  07AF               	addwf	??_USART_Init+5,f
  1747  0754                     u1161:	
  1748  0754  0834               	movf	??_USART_Init+10,w
  1749  0755  1803               	skipnc
  1750  0756  0F34               	incfsz	??_USART_Init+10,w
  1751  0757  2F59               	goto	u1162
  1752  0758  2F5A               	goto	u1163
  1753  0759                     u1162:	
  1754  0759  07B0               	addwf	??_USART_Init+6,f
  1755  075A                     u1163:	
  1756  075A  0835               	movf	??_USART_Init+11,w
  1757  075B  1803               	skipnc
  1758  075C  0A35               	incf	??_USART_Init+11,w
  1759  075D  07B1               	addwf	??_USART_Init+7,f
  1760  075E  0831               	movf	??_USART_Init+7,w
  1761  075F  00F7               	movwf	___aldiv@dividend+3
  1762  0760  0830               	movf	??_USART_Init+6,w
  1763  0761  00F6               	movwf	___aldiv@dividend+2
  1764  0762  082F               	movf	??_USART_Init+5,w
  1765  0763  00F5               	movwf	___aldiv@dividend+1
  1766  0764  082E               	movf	??_USART_Init+4,w
  1767  0765  00F4               	movwf	___aldiv@dividend
  1768  0766  120A  118A  24F9  120A  118A  	fcall	___aldiv
  1769  076B  0871               	movf	?___aldiv+1,w
  1770  076C  00FA               	movwf	USART_Init@x+1
  1771  076D  0870               	movf	?___aldiv,w
  1772  076E  00F9               	movwf	USART_Init@x
  1773                           
  1774                           ;USART.c: 12: if(x>255)
  1775  076F  3001               	movlw	1
  1776  0770  027A               	subwf	USART_Init@x+1,w
  1777  0771  3000               	movlw	0
  1778  0772  1903               	skipnz
  1779  0773  0279               	subwf	USART_Init@x,w
  1780  0774  1C03               	skipc
  1781  0775  2FDB               	goto	l1277
  1782                           
  1783                           ;USART.c: 13: {
  1784                           ;USART.c: 14: x = (8000000 - baud*16)/(baud*16);
  1785  0776  1283               	bcf	3,5	;RP0=0, select bank0
  1786  0777  1303               	bcf	3,6	;RP1=0, select bank0
  1787  0778  0826               	movf	USART_Init@baud,w
  1788  0779  00AA               	movwf	??_USART_Init
  1789  077A  0827               	movf	USART_Init@baud+1,w
  1790  077B  00AB               	movwf	??_USART_Init+1
  1791  077C  0828               	movf	USART_Init@baud+2,w
  1792  077D  00AC               	movwf	??_USART_Init+2
  1793  077E  0829               	movf	USART_Init@baud+3,w
  1794  077F  00AD               	movwf	??_USART_Init+3
  1795  0780  3004               	movlw	4
  1796  0781                     u1185:	
  1797  0781  1003               	clrc
  1798  0782  0DAA               	rlf	??_USART_Init,f
  1799  0783  0DAB               	rlf	??_USART_Init+1,f
  1800  0784  0DAC               	rlf	??_USART_Init+2,f
  1801  0785  0DAD               	rlf	??_USART_Init+3,f
  1802  0786  3EFF               	addlw	-1
  1803  0787  1D03               	skipz
  1804  0788  2F81               	goto	u1185
  1805  0789  082D               	movf	??_USART_Init+3,w
  1806  078A  00F3               	movwf	___aldiv@divisor+3
  1807  078B  082C               	movf	??_USART_Init+2,w
  1808  078C  00F2               	movwf	___aldiv@divisor+2
  1809  078D  082B               	movf	??_USART_Init+1,w
  1810  078E  00F1               	movwf	___aldiv@divisor+1
  1811  078F  082A               	movf	??_USART_Init,w
  1812  0790  00F0               	movwf	___aldiv@divisor
  1813  0791  3000               	movlw	0
  1814  0792  00AE               	movwf	??_USART_Init+4
  1815  0793  3012               	movlw	18
  1816  0794  00AF               	movwf	??_USART_Init+5
  1817  0795  307A               	movlw	122
  1818  0796  00B0               	movwf	??_USART_Init+6
  1819  0797  3000               	movlw	0
  1820  0798  00B1               	movwf	??_USART_Init+7
  1821  0799  0826               	movf	USART_Init@baud,w
  1822  079A  00B2               	movwf	??_USART_Init+8
  1823  079B  0827               	movf	USART_Init@baud+1,w
  1824  079C  00B3               	movwf	??_USART_Init+9
  1825  079D  0828               	movf	USART_Init@baud+2,w
  1826  079E  00B4               	movwf	??_USART_Init+10
  1827  079F  0829               	movf	USART_Init@baud+3,w
  1828  07A0  00B5               	movwf	??_USART_Init+11
  1829  07A1  3004               	movlw	4
  1830  07A2                     u1195:	
  1831  07A2  1003               	clrc
  1832  07A3  0DB2               	rlf	??_USART_Init+8,f
  1833  07A4  0DB3               	rlf	??_USART_Init+9,f
  1834  07A5  0DB4               	rlf	??_USART_Init+10,f
  1835  07A6  0DB5               	rlf	??_USART_Init+11,f
  1836  07A7  3EFF               	addlw	-1
  1837  07A8  1D03               	skipz
  1838  07A9  2FA2               	goto	u1195
  1839  07AA  09B2               	comf	??_USART_Init+8,f
  1840  07AB  09B3               	comf	??_USART_Init+9,f
  1841  07AC  09B4               	comf	??_USART_Init+10,f
  1842  07AD  09B5               	comf	??_USART_Init+11,f
  1843  07AE  0AB2               	incf	??_USART_Init+8,f
  1844  07AF  1903               	skipnz
  1845  07B0  0AB3               	incf	??_USART_Init+9,f
  1846  07B1  1903               	skipnz
  1847  07B2  0AB4               	incf	??_USART_Init+10,f
  1848  07B3  1903               	skipnz
  1849  07B4  0AB5               	incf	??_USART_Init+11,f
  1850  07B5  0832               	movf	??_USART_Init+8,w
  1851  07B6  07AE               	addwf	??_USART_Init+4,f
  1852  07B7  0833               	movf	??_USART_Init+9,w
  1853  07B8  1803               	skipnc
  1854  07B9  0F33               	incfsz	??_USART_Init+9,w
  1855  07BA  2FBC               	goto	u1200
  1856  07BB  2FBD               	goto	u1201
  1857  07BC                     u1200:	
  1858  07BC  07AF               	addwf	??_USART_Init+5,f
  1859  07BD                     u1201:	
  1860  07BD  0834               	movf	??_USART_Init+10,w
  1861  07BE  1803               	skipnc
  1862  07BF  0F34               	incfsz	??_USART_Init+10,w
  1863  07C0  2FC2               	goto	u1202
  1864  07C1  2FC3               	goto	u1203
  1865  07C2                     u1202:	
  1866  07C2  07B0               	addwf	??_USART_Init+6,f
  1867  07C3                     u1203:	
  1868  07C3  0835               	movf	??_USART_Init+11,w
  1869  07C4  1803               	skipnc
  1870  07C5  0A35               	incf	??_USART_Init+11,w
  1871  07C6  07B1               	addwf	??_USART_Init+7,f
  1872  07C7  0831               	movf	??_USART_Init+7,w
  1873  07C8  00F7               	movwf	___aldiv@dividend+3
  1874  07C9  0830               	movf	??_USART_Init+6,w
  1875  07CA  00F6               	movwf	___aldiv@dividend+2
  1876  07CB  082F               	movf	??_USART_Init+5,w
  1877  07CC  00F5               	movwf	___aldiv@dividend+1
  1878  07CD  082E               	movf	??_USART_Init+4,w
  1879  07CE  00F4               	movwf	___aldiv@dividend
  1880  07CF  120A  118A  24F9  120A  118A  	fcall	___aldiv
  1881  07D4  0871               	movf	?___aldiv+1,w
  1882  07D5  00FA               	movwf	USART_Init@x+1
  1883  07D6  0870               	movf	?___aldiv,w
  1884  07D7  00F9               	movwf	USART_Init@x
  1885                           
  1886                           ;USART.c: 15: BRGH = 1;
  1887  07D8  1683               	bsf	3,5	;RP0=1, select bank1
  1888  07D9  1303               	bcf	3,6	;RP1=0, select bank1
  1889  07DA  1518               	bsf	24,2	;volatile
  1890  07DB                     l1277:	
  1891                           
  1892                           ;USART.c: 16: }
  1893                           ;USART.c: 17: if(x<256)
  1894  07DB  3001               	movlw	1
  1895  07DC  027A               	subwf	USART_Init@x+1,w
  1896  07DD  3000               	movlw	0
  1897  07DE  1903               	skipnz
  1898  07DF  0279               	subwf	USART_Init@x,w
  1899  07E0  1803               	skipnc
  1900  07E1  2FF6               	goto	l1295
  1901                           
  1902                           ;USART.c: 18: {
  1903                           ;USART.c: 19: SPBRG = x;
  1904  07E2  0879               	movf	USART_Init@x,w
  1905  07E3  1683               	bsf	3,5	;RP0=1, select bank1
  1906  07E4  1303               	bcf	3,6	;RP1=0, select bank1
  1907  07E5  0099               	movwf	25	;volatile
  1908                           
  1909                           ;USART.c: 20: SYNC=0;
  1910  07E6  1218               	bcf	24,4	;volatile
  1911                           
  1912                           ;USART.c: 21: SPEN=1;
  1913  07E7  1283               	bcf	3,5	;RP0=0, select bank0
  1914  07E8  1303               	bcf	3,6	;RP1=0, select bank0
  1915  07E9  1798               	bsf	24,7	;volatile
  1916                           
  1917                           ;USART.c: 22: TRISC7=1;
  1918  07EA  1683               	bsf	3,5	;RP0=1, select bank1
  1919  07EB  1303               	bcf	3,6	;RP1=0, select bank1
  1920  07EC  1787               	bsf	7,7	;volatile
  1921                           
  1922                           ;USART.c: 23: TRISC6=0;
  1923  07ED  1307               	bcf	7,6	;volatile
  1924                           
  1925                           ;USART.c: 24: CREN=1;
  1926  07EE  1283               	bcf	3,5	;RP0=0, select bank0
  1927  07EF  1303               	bcf	3,6	;RP1=0, select bank0
  1928  07F0  1618               	bsf	24,4	;volatile
  1929                           
  1930                           ;USART.c: 25: TXEN = 1;
  1931  07F1  1683               	bsf	3,5	;RP0=1, select bank1
  1932  07F2  1303               	bcf	3,6	;RP1=0, select bank1
  1933  07F3  1698               	bsf	24,5	;volatile
  1934                           
  1935                           ;USART.c: 26: return 1;
  1936  07F4  3001               	movlw	1
  1937  07F5  0008               	return
  1938  07F6                     l1295:	
  1939                           
  1940                           ;USART.c: 27: }
  1941                           ;USART.c: 28: return 0;
  1942  07F6  3000               	movlw	0
  1943  07F7  0008               	return
  1944  07F8                     __end_of_USART_Init:	
  1945                           
  1946                           	psect	text7
  1947  04F9                     __ptext7:	
  1948 ;; *************** function ___aldiv *****************
  1949 ;; Defined at:
  1950 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;  divisor         4    0[COMMON] long 
  1953 ;;  dividend        4    4[COMMON] long 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;  quotient        4    2[BANK0 ] long 
  1956 ;;  sign            1    1[BANK0 ] unsigned char 
  1957 ;;  counter         1    0[BANK0 ] unsigned char 
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  4    0[COMMON] long 
  1960 ;; Registers used:
  1961 ;;		wreg, status,2, status,0
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1967 ;;      Params:         8       0       0       0       0
  1968 ;;      Locals:         0       6       0       0       0
  1969 ;;      Temps:          1       0       0       0       0
  1970 ;;      Totals:         9       6       0       0       0
  1971 ;;Total ram usage:       15 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; This function calls:
  1974 ;;		Nothing
  1975 ;; This function is called by:
  1976 ;;		_USART_Init
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           
  1981                           ;psect for function ___aldiv
  1982  04F9                     ___aldiv:	
  1983                           
  1984                           ;incstack = 0
  1985                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1986  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  1987  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  1988  04FB  01A1               	clrf	___aldiv@sign
  1989  04FC  1FF3               	btfss	___aldiv@divisor+3,7
  1990  04FD  2D0B               	goto	l364
  1991  04FE  09F0               	comf	___aldiv@divisor,f
  1992  04FF  09F1               	comf	___aldiv@divisor+1,f
  1993  0500  09F2               	comf	___aldiv@divisor+2,f
  1994  0501  09F3               	comf	___aldiv@divisor+3,f
  1995  0502  0AF0               	incf	___aldiv@divisor,f
  1996  0503  1903               	skipnz
  1997  0504  0AF1               	incf	___aldiv@divisor+1,f
  1998  0505  1903               	skipnz
  1999  0506  0AF2               	incf	___aldiv@divisor+2,f
  2000  0507  1903               	skipnz
  2001  0508  0AF3               	incf	___aldiv@divisor+3,f
  2002  0509  01A1               	clrf	___aldiv@sign
  2003  050A  0AA1               	incf	___aldiv@sign,f
  2004  050B                     l364:	
  2005  050B  1FF7               	btfss	___aldiv@dividend+3,7
  2006  050C  2D1C               	goto	l1149
  2007  050D  09F4               	comf	___aldiv@dividend,f
  2008  050E  09F5               	comf	___aldiv@dividend+1,f
  2009  050F  09F6               	comf	___aldiv@dividend+2,f
  2010  0510  09F7               	comf	___aldiv@dividend+3,f
  2011  0511  0AF4               	incf	___aldiv@dividend,f
  2012  0512  1903               	skipnz
  2013  0513  0AF5               	incf	___aldiv@dividend+1,f
  2014  0514  1903               	skipnz
  2015  0515  0AF6               	incf	___aldiv@dividend+2,f
  2016  0516  1903               	skipnz
  2017  0517  0AF7               	incf	___aldiv@dividend+3,f
  2018  0518  3001               	movlw	1
  2019  0519  00F8               	movwf	??___aldiv
  2020  051A  0878               	movf	??___aldiv,w
  2021  051B  06A1               	xorwf	___aldiv@sign,f
  2022  051C                     l1149:	
  2023  051C  3000               	movlw	0
  2024  051D  00A5               	movwf	___aldiv@quotient+3
  2025  051E  3000               	movlw	0
  2026  051F  00A4               	movwf	___aldiv@quotient+2
  2027  0520  3000               	movlw	0
  2028  0521  00A3               	movwf	___aldiv@quotient+1
  2029  0522  3000               	movlw	0
  2030  0523  00A2               	movwf	___aldiv@quotient
  2031  0524  0873               	movf	___aldiv@divisor+3,w
  2032  0525  0472               	iorwf	___aldiv@divisor+2,w
  2033  0526  0471               	iorwf	___aldiv@divisor+1,w
  2034  0527  0470               	iorwf	___aldiv@divisor,w
  2035  0528  1903               	skipnz
  2036  0529  2D71               	goto	l1171
  2037  052A  01A0               	clrf	___aldiv@counter
  2038  052B  0AA0               	incf	___aldiv@counter,f
  2039  052C                     l1157:	
  2040  052C  1BF3               	btfsc	___aldiv@divisor+3,7
  2041  052D  2D3C               	goto	l1159
  2042  052E  3001               	movlw	1
  2043  052F  00F8               	movwf	??___aldiv
  2044  0530                     u855:	
  2045  0530  1003               	clrc
  2046  0531  0DF0               	rlf	___aldiv@divisor,f
  2047  0532  0DF1               	rlf	___aldiv@divisor+1,f
  2048  0533  0DF2               	rlf	___aldiv@divisor+2,f
  2049  0534  0DF3               	rlf	___aldiv@divisor+3,f
  2050  0535  0BF8               	decfsz	??___aldiv,f
  2051  0536  2D30               	goto	u855
  2052  0537  3001               	movlw	1
  2053  0538  00F8               	movwf	??___aldiv
  2054  0539  0878               	movf	??___aldiv,w
  2055  053A  07A0               	addwf	___aldiv@counter,f
  2056  053B  2D2C               	goto	l1157
  2057  053C                     l1159:	
  2058  053C  3001               	movlw	1
  2059  053D  00F8               	movwf	??___aldiv
  2060  053E                     u875:	
  2061  053E  1003               	clrc
  2062  053F  0DA2               	rlf	___aldiv@quotient,f
  2063  0540  0DA3               	rlf	___aldiv@quotient+1,f
  2064  0541  0DA4               	rlf	___aldiv@quotient+2,f
  2065  0542  0DA5               	rlf	___aldiv@quotient+3,f
  2066  0543  0BF8               	decfsz	??___aldiv,f
  2067  0544  2D3E               	goto	u875
  2068  0545  0873               	movf	___aldiv@divisor+3,w
  2069  0546  0277               	subwf	___aldiv@dividend+3,w
  2070  0547  1D03               	skipz
  2071  0548  2D53               	goto	u885
  2072  0549  0872               	movf	___aldiv@divisor+2,w
  2073  054A  0276               	subwf	___aldiv@dividend+2,w
  2074  054B  1D03               	skipz
  2075  054C  2D53               	goto	u885
  2076  054D  0871               	movf	___aldiv@divisor+1,w
  2077  054E  0275               	subwf	___aldiv@dividend+1,w
  2078  054F  1D03               	skipz
  2079  0550  2D53               	goto	u885
  2080  0551  0870               	movf	___aldiv@divisor,w
  2081  0552  0274               	subwf	___aldiv@dividend,w
  2082  0553                     u885:	
  2083  0553  1C03               	skipc
  2084  0554  2D64               	goto	l1167
  2085  0555  0870               	movf	___aldiv@divisor,w
  2086  0556  02F4               	subwf	___aldiv@dividend,f
  2087  0557  0871               	movf	___aldiv@divisor+1,w
  2088  0558  1C03               	skipc
  2089  0559  0F71               	incfsz	___aldiv@divisor+1,w
  2090  055A  02F5               	subwf	___aldiv@dividend+1,f
  2091  055B  0872               	movf	___aldiv@divisor+2,w
  2092  055C  1C03               	skipc
  2093  055D  0F72               	incfsz	___aldiv@divisor+2,w
  2094  055E  02F6               	subwf	___aldiv@dividend+2,f
  2095  055F  0873               	movf	___aldiv@divisor+3,w
  2096  0560  1C03               	skipc
  2097  0561  0F73               	incfsz	___aldiv@divisor+3,w
  2098  0562  02F7               	subwf	___aldiv@dividend+3,f
  2099  0563  1422               	bsf	___aldiv@quotient,0
  2100  0564                     l1167:	
  2101  0564  3001               	movlw	1
  2102  0565                     u895:	
  2103  0565  1003               	clrc
  2104  0566  0CF3               	rrf	___aldiv@divisor+3,f
  2105  0567  0CF2               	rrf	___aldiv@divisor+2,f
  2106  0568  0CF1               	rrf	___aldiv@divisor+1,f
  2107  0569  0CF0               	rrf	___aldiv@divisor,f
  2108  056A  3EFF               	addlw	-1
  2109  056B  1D03               	skipz
  2110  056C  2D65               	goto	u895
  2111  056D  3001               	movlw	1
  2112  056E  02A0               	subwf	___aldiv@counter,f
  2113  056F  1D03               	btfss	3,2
  2114  0570  2D3C               	goto	l1159
  2115  0571                     l1171:	
  2116  0571  0821               	movf	___aldiv@sign,w
  2117  0572  1903               	btfsc	3,2
  2118  0573  2D7F               	goto	l1175
  2119  0574  09A2               	comf	___aldiv@quotient,f
  2120  0575  09A3               	comf	___aldiv@quotient+1,f
  2121  0576  09A4               	comf	___aldiv@quotient+2,f
  2122  0577  09A5               	comf	___aldiv@quotient+3,f
  2123  0578  0AA2               	incf	___aldiv@quotient,f
  2124  0579  1903               	skipnz
  2125  057A  0AA3               	incf	___aldiv@quotient+1,f
  2126  057B  1903               	skipnz
  2127  057C  0AA4               	incf	___aldiv@quotient+2,f
  2128  057D  1903               	skipnz
  2129  057E  0AA5               	incf	___aldiv@quotient+3,f
  2130  057F                     l1175:	
  2131  057F  0825               	movf	___aldiv@quotient+3,w
  2132  0580  00F3               	movwf	?___aldiv+3
  2133  0581  0824               	movf	___aldiv@quotient+2,w
  2134  0582  00F2               	movwf	?___aldiv+2
  2135  0583  0823               	movf	___aldiv@quotient+1,w
  2136  0584  00F1               	movwf	?___aldiv+1
  2137  0585  0822               	movf	___aldiv@quotient,w
  2138  0586  00F0               	movwf	?___aldiv
  2139  0587  0008               	return
  2140  0588                     __end_of___aldiv:	
  2141                           
  2142                           	psect	text8
  2143  03C2                     __ptext8:	
  2144 ;; *************** function _RTC_SetDateTime *****************
  2145 ;; Defined at:
  2146 ;;		line 51 in file "ds1307.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;  rtc             1    wreg     PTR struct .
  2149 ;;		 -> main@rtc(7), 
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;  rtc             1    1[COMMON] PTR struct .
  2152 ;;		 -> main@rtc(7), 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  1    wreg      void 
  2155 ;; Registers used:
  2156 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2162 ;;      Params:         0       0       0       0       0
  2163 ;;      Locals:         1       0       0       0       0
  2164 ;;      Temps:          0       0       0       0       0
  2165 ;;      Totals:         1       0       0       0       0
  2166 ;;Total ram usage:        1 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    2
  2169 ;; This function calls:
  2170 ;;		_I2C_Master_Start
  2171 ;;		_I2C_Master_Stop
  2172 ;;		_I2C_Write_Byte
  2173 ;; This function is called by:
  2174 ;;		_main
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178                           
  2179                           ;psect for function _RTC_SetDateTime
  2180  03C2                     _RTC_SetDateTime:	
  2181                           
  2182                           ;incstack = 0
  2183                           ; Regs used in _RTC_SetDateTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2184                           ;RTC_SetDateTime@rtc stored from wreg
  2185  03C2  00F1               	movwf	RTC_SetDateTime@rtc
  2186                           
  2187                           ;ds1307.c: 53: I2C_Master_Start();
  2188  03C3  120A  118A  2246  120A  118A  	fcall	_I2C_Master_Start
  2189                           
  2190                           ;ds1307.c: 55: I2C_Write_Byte(0xD0u);
  2191  03C8  30D0               	movlw	208
  2192  03C9  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2193                           
  2194                           ;ds1307.c: 56: I2C_Write_Byte(0x00u);
  2195  03CE  3000               	movlw	0
  2196  03CF  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2197                           
  2198                           ;ds1307.c: 58: I2C_Write_Byte(rtc->sec);
  2199  03D4  0871               	movf	RTC_SetDateTime@rtc,w
  2200  03D5  0084               	movwf	4
  2201  03D6  1383               	bcf	3,7	;select IRP bank0
  2202  03D7  0800               	movf	0,w
  2203  03D8  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2204                           
  2205                           ;ds1307.c: 59: I2C_Write_Byte(rtc->min);
  2206  03DD  0A71               	incf	RTC_SetDateTime@rtc,w
  2207  03DE  0084               	movwf	4
  2208  03DF  1383               	bcf	3,7	;select IRP bank0
  2209  03E0  0800               	movf	0,w
  2210  03E1  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2211                           
  2212                           ;ds1307.c: 60: I2C_Write_Byte(rtc->hour);
  2213  03E6  0871               	movf	RTC_SetDateTime@rtc,w
  2214  03E7  3E02               	addlw	2
  2215  03E8  0084               	movwf	4
  2216  03E9  1383               	bcf	3,7	;select IRP bank0
  2217  03EA  0800               	movf	0,w
  2218  03EB  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2219                           
  2220                           ;ds1307.c: 61: I2C_Write_Byte(rtc->weekDay);
  2221  03F0  0871               	movf	RTC_SetDateTime@rtc,w
  2222  03F1  3E03               	addlw	3
  2223  03F2  0084               	movwf	4
  2224  03F3  1383               	bcf	3,7	;select IRP bank0
  2225  03F4  0800               	movf	0,w
  2226  03F5  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2227                           
  2228                           ;ds1307.c: 62: I2C_Write_Byte(rtc->date);
  2229  03FA  0871               	movf	RTC_SetDateTime@rtc,w
  2230  03FB  3E04               	addlw	4
  2231  03FC  0084               	movwf	4
  2232  03FD  1383               	bcf	3,7	;select IRP bank0
  2233  03FE  0800               	movf	0,w
  2234  03FF  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2235                           
  2236                           ;ds1307.c: 63: I2C_Write_Byte(rtc->month);
  2237  0404  0871               	movf	RTC_SetDateTime@rtc,w
  2238  0405  3E05               	addlw	5
  2239  0406  0084               	movwf	4
  2240  0407  1383               	bcf	3,7	;select IRP bank0
  2241  0408  0800               	movf	0,w
  2242  0409  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2243                           
  2244                           ;ds1307.c: 64: I2C_Write_Byte(rtc->year);
  2245  040E  0871               	movf	RTC_SetDateTime@rtc,w
  2246  040F  3E06               	addlw	6
  2247  0410  0084               	movwf	4
  2248  0411  1383               	bcf	3,7	;select IRP bank0
  2249  0412  0800               	movf	0,w
  2250  0413  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2251                           
  2252                           ;ds1307.c: 66: I2C_Master_Stop();
  2253  0418  120A  118A  224C   	fcall	_I2C_Master_Stop
  2254  041B  0008               	return
  2255  041C                     __end_of_RTC_SetDateTime:	
  2256                           
  2257                           	psect	text9
  2258  02AD                     __ptext9:	
  2259 ;; *************** function _RTC_Init *****************
  2260 ;; Defined at:
  2261 ;;		line 13 in file "ds1307.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;		None
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  1    wreg      void 
  2268 ;; Registers used:
  2269 ;;		wreg, status,2, status,0, pclath, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2275 ;;      Params:         0       0       0       0       0
  2276 ;;      Locals:         0       0       0       0       0
  2277 ;;      Temps:          0       0       0       0       0
  2278 ;;      Totals:         0       0       0       0       0
  2279 ;;Total ram usage:        0 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    2
  2282 ;; This function calls:
  2283 ;;		_I2C_Master_Start
  2284 ;;		_I2C_Master_Stop
  2285 ;;		_I2C_Write_Byte
  2286 ;; This function is called by:
  2287 ;;		_main
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           
  2292                           ;psect for function _RTC_Init
  2293  02AD                     _RTC_Init:	
  2294                           
  2295                           ;ds1307.c: 16: I2C_Master_Start();
  2296                           
  2297                           ;incstack = 0
  2298                           ; Regs used in _RTC_Init: [wreg+status,2+status,0+pclath+cstack]
  2299  02AD  120A  118A  2246  120A  118A  	fcall	_I2C_Master_Start
  2300                           
  2301                           ;ds1307.c: 18: I2C_Write_Byte(0xD0u);
  2302  02B2  30D0               	movlw	208
  2303  02B3  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2304                           
  2305                           ;ds1307.c: 19: I2C_Write_Byte(0x07u);
  2306  02B8  3007               	movlw	7
  2307  02B9  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2308                           
  2309                           ;ds1307.c: 21: I2C_Write_Byte(0x00);
  2310  02BE  3000               	movlw	0
  2311  02BF  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2312                           
  2313                           ;ds1307.c: 23: I2C_Master_Stop();
  2314  02C4  120A  118A  224C   	fcall	_I2C_Master_Stop
  2315  02C7  0008               	return
  2316  02C8                     __end_of_RTC_Init:	
  2317                           
  2318                           	psect	text10
  2319  047A                     __ptext10:	
  2320 ;; *************** function _RTC_GetDateTime *****************
  2321 ;; Defined at:
  2322 ;;		line 87 in file "ds1307.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  rtc             1    wreg     PTR struct .
  2325 ;;		 -> main@rtc(7), 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  rtc             1    4[COMMON] PTR struct .
  2328 ;;		 -> main@rtc(7), 
  2329 ;; Return value:  Size  Location     Type
  2330 ;;                  1    wreg      void 
  2331 ;; Registers used:
  2332 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2338 ;;      Params:         0       0       0       0       0
  2339 ;;      Locals:         1       0       0       0       0
  2340 ;;      Temps:          1       0       0       0       0
  2341 ;;      Totals:         2       0       0       0       0
  2342 ;;Total ram usage:        2 bytes
  2343 ;; Hardware stack levels used:    1
  2344 ;; Hardware stack levels required when called:    2
  2345 ;; This function calls:
  2346 ;;		_I2C_Master_Read
  2347 ;;		_I2C_Master_Start
  2348 ;;		_I2C_Master_Stop
  2349 ;;		_I2C_Write_Byte
  2350 ;; This function is called by:
  2351 ;;		_main
  2352 ;; This function uses a non-reentrant model
  2353 ;;
  2354                           
  2355                           
  2356                           ;psect for function _RTC_GetDateTime
  2357  047A                     _RTC_GetDateTime:	
  2358                           
  2359                           ;incstack = 0
  2360                           ; Regs used in _RTC_GetDateTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2361                           ;RTC_GetDateTime@rtc stored from wreg
  2362  047A  00F4               	movwf	RTC_GetDateTime@rtc
  2363                           
  2364                           ;ds1307.c: 89: I2C_Master_Start();
  2365  047B  120A  118A  2246  120A  118A  	fcall	_I2C_Master_Start
  2366                           
  2367                           ;ds1307.c: 91: I2C_Write_Byte(0xD0u);
  2368  0480  30D0               	movlw	208
  2369  0481  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2370                           
  2371                           ;ds1307.c: 92: I2C_Write_Byte(0x00u);
  2372  0486  3000               	movlw	0
  2373  0487  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2374                           
  2375                           ;ds1307.c: 94: I2C_Master_Stop();
  2376  048C  120A  118A  224C  120A  118A  	fcall	_I2C_Master_Stop
  2377                           
  2378                           ;ds1307.c: 96: I2C_Master_Start();
  2379  0491  120A  118A  2246  120A  118A  	fcall	_I2C_Master_Start
  2380                           
  2381                           ;ds1307.c: 97: I2C_Write_Byte(0xD1u);
  2382  0496  30D1               	movlw	209
  2383  0497  120A  118A  2275  120A  118A  	fcall	_I2C_Write_Byte
  2384                           
  2385                           ;ds1307.c: 99: rtc->sec = I2C_Master_Read(1);
  2386  049C  3001               	movlw	1
  2387  049D  120A  118A  22C8  120A  118A  	fcall	_I2C_Master_Read
  2388  04A2  00F3               	movwf	??_RTC_GetDateTime
  2389  04A3  0874               	movf	RTC_GetDateTime@rtc,w
  2390  04A4  0084               	movwf	4
  2391  04A5  0873               	movf	??_RTC_GetDateTime,w
  2392  04A6  1383               	bcf	3,7	;select IRP bank0
  2393  04A7  0080               	movwf	0
  2394                           
  2395                           ;ds1307.c: 100: rtc->min = I2C_Master_Read(1);
  2396  04A8  3001               	movlw	1
  2397  04A9  120A  118A  22C8  120A  118A  	fcall	_I2C_Master_Read
  2398  04AE  00F3               	movwf	??_RTC_GetDateTime
  2399  04AF  0A74               	incf	RTC_GetDateTime@rtc,w
  2400  04B0  0084               	movwf	4
  2401  04B1  0873               	movf	??_RTC_GetDateTime,w
  2402  04B2  1383               	bcf	3,7	;select IRP bank0
  2403  04B3  0080               	movwf	0
  2404                           
  2405                           ;ds1307.c: 101: rtc->hour= I2C_Master_Read(1);
  2406  04B4  3001               	movlw	1
  2407  04B5  120A  118A  22C8  120A  118A  	fcall	_I2C_Master_Read
  2408  04BA  00F3               	movwf	??_RTC_GetDateTime
  2409  04BB  0874               	movf	RTC_GetDateTime@rtc,w
  2410  04BC  3E02               	addlw	2
  2411  04BD  0084               	movwf	4
  2412  04BE  0873               	movf	??_RTC_GetDateTime,w
  2413  04BF  1383               	bcf	3,7	;select IRP bank0
  2414  04C0  0080               	movwf	0
  2415                           
  2416                           ;ds1307.c: 102: rtc->weekDay = I2C_Master_Read(1);
  2417  04C1  3001               	movlw	1
  2418  04C2  120A  118A  22C8  120A  118A  	fcall	_I2C_Master_Read
  2419  04C7  00F3               	movwf	??_RTC_GetDateTime
  2420  04C8  0874               	movf	RTC_GetDateTime@rtc,w
  2421  04C9  3E03               	addlw	3
  2422  04CA  0084               	movwf	4
  2423  04CB  0873               	movf	??_RTC_GetDateTime,w
  2424  04CC  1383               	bcf	3,7	;select IRP bank0
  2425  04CD  0080               	movwf	0
  2426                           
  2427                           ;ds1307.c: 103: rtc->date= I2C_Master_Read(1);
  2428  04CE  3001               	movlw	1
  2429  04CF  120A  118A  22C8  120A  118A  	fcall	_I2C_Master_Read
  2430  04D4  00F3               	movwf	??_RTC_GetDateTime
  2431  04D5  0874               	movf	RTC_GetDateTime@rtc,w
  2432  04D6  3E04               	addlw	4
  2433  04D7  0084               	movwf	4
  2434  04D8  0873               	movf	??_RTC_GetDateTime,w
  2435  04D9  1383               	bcf	3,7	;select IRP bank0
  2436  04DA  0080               	movwf	0
  2437                           
  2438                           ;ds1307.c: 104: rtc->month=I2C_Master_Read(1);
  2439  04DB  3001               	movlw	1
  2440  04DC  120A  118A  22C8  120A  118A  	fcall	_I2C_Master_Read
  2441  04E1  00F3               	movwf	??_RTC_GetDateTime
  2442  04E2  0874               	movf	RTC_GetDateTime@rtc,w
  2443  04E3  3E05               	addlw	5
  2444  04E4  0084               	movwf	4
  2445  04E5  0873               	movf	??_RTC_GetDateTime,w
  2446  04E6  1383               	bcf	3,7	;select IRP bank0
  2447  04E7  0080               	movwf	0
  2448                           
  2449                           ;ds1307.c: 105: rtc->year =I2C_Master_Read(0);
  2450  04E8  3000               	movlw	0
  2451  04E9  120A  118A  22C8  120A  118A  	fcall	_I2C_Master_Read
  2452  04EE  00F3               	movwf	??_RTC_GetDateTime
  2453  04EF  0874               	movf	RTC_GetDateTime@rtc,w
  2454  04F0  3E06               	addlw	6
  2455  04F1  0084               	movwf	4
  2456  04F2  0873               	movf	??_RTC_GetDateTime,w
  2457  04F3  1383               	bcf	3,7	;select IRP bank0
  2458  04F4  0080               	movwf	0
  2459                           
  2460                           ;ds1307.c: 107: I2C_Master_Stop();
  2461  04F5  120A  118A  224C   	fcall	_I2C_Master_Stop
  2462  04F8  0008               	return
  2463  04F9                     __end_of_RTC_GetDateTime:	
  2464                           
  2465                           	psect	text11
  2466  0275                     __ptext11:	
  2467 ;; *************** function _I2C_Write_Byte *****************
  2468 ;; Defined at:
  2469 ;;		line 86 in file "I2C.c"
  2470 ;; Parameters:    Size  Location     Type
  2471 ;;  data            1    wreg     unsigned char 
  2472 ;; Auto vars:     Size  Location     Type
  2473 ;;  data            1    0[COMMON] unsigned char 
  2474 ;; Return value:  Size  Location     Type
  2475 ;;                  1    wreg      void 
  2476 ;; Registers used:
  2477 ;;		wreg, status,2, status,0, pclath, cstack
  2478 ;; Tracked objects:
  2479 ;;		On entry : 0/0
  2480 ;;		On exit  : 0/0
  2481 ;;		Unchanged: 0/0
  2482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2483 ;;      Params:         0       0       0       0       0
  2484 ;;      Locals:         1       0       0       0       0
  2485 ;;      Temps:          0       0       0       0       0
  2486 ;;      Totals:         1       0       0       0       0
  2487 ;;Total ram usage:        1 bytes
  2488 ;; Hardware stack levels used:    1
  2489 ;; Hardware stack levels required when called:    1
  2490 ;; This function calls:
  2491 ;;		_I2C_Master_Wait
  2492 ;; This function is called by:
  2493 ;;		_RTC_Init
  2494 ;;		_RTC_SetDateTime
  2495 ;;		_RTC_GetDateTime
  2496 ;;		_I2C_SendByteByADDR
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           
  2501                           ;psect for function _I2C_Write_Byte
  2502  0275                     _I2C_Write_Byte:	
  2503                           
  2504                           ;incstack = 0
  2505                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
  2506                           ;I2C_Write_Byte@data stored from wreg
  2507  0275  00F0               	movwf	I2C_Write_Byte@data
  2508                           
  2509                           ;I2C.c: 88: SSPBUF = data;
  2510  0276  0870               	movf	I2C_Write_Byte@data,w
  2511  0277  1283               	bcf	3,5	;RP0=0, select bank0
  2512  0278  1303               	bcf	3,6	;RP1=0, select bank0
  2513  0279  0093               	movwf	19	;volatile
  2514  027A                     l66:	
  2515                           ;I2C.c: 89: while(BF==1);
  2516                           
  2517  027A  1683               	bsf	3,5	;RP0=1, select bank1
  2518  027B  1303               	bcf	3,6	;RP1=0, select bank1
  2519  027C  1814               	btfsc	20,0	;volatile
  2520  027D  2A7A               	goto	l66
  2521                           
  2522                           ;I2C.c: 90: I2C_Master_Wait();
  2523  027E  120A  118A  226A   	fcall	_I2C_Master_Wait
  2524  0281  0008               	return
  2525  0282                     __end_of_I2C_Write_Byte:	
  2526                           
  2527                           	psect	text12
  2528  024C                     __ptext12:	
  2529 ;; *************** function _I2C_Master_Stop *****************
  2530 ;; Defined at:
  2531 ;;		line 72 in file "I2C.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;		None
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;		None
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		None
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2545 ;;      Params:         0       0       0       0       0
  2546 ;;      Locals:         0       0       0       0       0
  2547 ;;      Temps:          0       0       0       0       0
  2548 ;;      Totals:         0       0       0       0       0
  2549 ;;Total ram usage:        0 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; This function calls:
  2552 ;;		Nothing
  2553 ;; This function is called by:
  2554 ;;		_RTC_Init
  2555 ;;		_RTC_SetDateTime
  2556 ;;		_RTC_GetDateTime
  2557 ;;		_I2C_SendByteByADDR
  2558 ;; This function uses a non-reentrant model
  2559 ;;
  2560                           
  2561                           
  2562                           ;psect for function _I2C_Master_Stop
  2563  024C                     _I2C_Master_Stop:	
  2564                           
  2565                           ;I2C.c: 75: PEN=1;
  2566                           
  2567                           ;incstack = 0
  2568                           ; Regs used in _I2C_Master_Stop: []
  2569  024C  1683               	bsf	3,5	;RP0=1, select bank1
  2570  024D  1303               	bcf	3,6	;RP1=0, select bank1
  2571  024E  1511               	bsf	17,2	;volatile
  2572  024F                     l60:	
  2573                           ;I2C.c: 76: while(PEN == 1);
  2574                           
  2575  024F  1D11               	btfss	17,2	;volatile
  2576  0250  0008               	return
  2577  0251  2A4F               	goto	l60
  2578  0252                     __end_of_I2C_Master_Stop:	
  2579                           
  2580                           	psect	text13
  2581  0246                     __ptext13:	
  2582 ;; *************** function _I2C_Master_Start *****************
  2583 ;; Defined at:
  2584 ;;		line 48 in file "I2C.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;		None
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;		None
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		None
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2598 ;;      Params:         0       0       0       0       0
  2599 ;;      Locals:         0       0       0       0       0
  2600 ;;      Temps:          0       0       0       0       0
  2601 ;;      Totals:         0       0       0       0       0
  2602 ;;Total ram usage:        0 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; This function calls:
  2605 ;;		Nothing
  2606 ;; This function is called by:
  2607 ;;		_RTC_Init
  2608 ;;		_RTC_SetDateTime
  2609 ;;		_RTC_GetDateTime
  2610 ;;		_I2C_SendByteByADDR
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           
  2615                           ;psect for function _I2C_Master_Start
  2616  0246                     _I2C_Master_Start:	
  2617                           
  2618                           ;I2C.c: 50: SEN=1;
  2619                           
  2620                           ;incstack = 0
  2621                           ; Regs used in _I2C_Master_Start: []
  2622  0246  1683               	bsf	3,5	;RP0=1, select bank1
  2623  0247  1303               	bcf	3,6	;RP1=0, select bank1
  2624  0248  1411               	bsf	17,0	;volatile
  2625  0249                     l48:	
  2626                           ;I2C.c: 51: while(SEN == 1);
  2627                           
  2628  0249  1C11               	btfss	17,0	;volatile
  2629  024A  0008               	return
  2630  024B  2A49               	goto	l48
  2631  024C                     __end_of_I2C_Master_Start:	
  2632                           
  2633                           	psect	text14
  2634  02C8                     __ptext14:	
  2635 ;; *************** function _I2C_Master_Read *****************
  2636 ;; Defined at:
  2637 ;;		line 107 in file "I2C.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  a               1    wreg     unsigned char 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  a               1    1[COMMON] unsigned char 
  2642 ;;  v_i2cData_u8    1    2[COMMON] unsigned char 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      unsigned char 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0, pclath, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2652 ;;      Params:         0       0       0       0       0
  2653 ;;      Locals:         2       0       0       0       0
  2654 ;;      Temps:          1       0       0       0       0
  2655 ;;      Totals:         3       0       0       0       0
  2656 ;;Total ram usage:        3 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    1
  2659 ;; This function calls:
  2660 ;;		_I2C_Master_Wait
  2661 ;;		_i2c_Ack
  2662 ;;		_i2c_NoAck
  2663 ;; This function is called by:
  2664 ;;		_RTC_GetDateTime
  2665 ;; This function uses a non-reentrant model
  2666 ;;
  2667                           
  2668                           
  2669                           ;psect for function _I2C_Master_Read
  2670  02C8                     _I2C_Master_Read:	
  2671                           
  2672                           ;incstack = 0
  2673                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  2674                           ;I2C_Master_Read@a stored from wreg
  2675  02C8  00F1               	movwf	I2C_Master_Read@a
  2676                           
  2677                           ;I2C.c: 109: char v_i2cData_u8=0x00;
  2678  02C9  01F2               	clrf	I2C_Master_Read@v_i2cData_u8
  2679                           
  2680                           ;I2C.c: 111: RCEN = 1;
  2681  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  2682  02CB  1303               	bcf	3,6	;RP1=0, select bank1
  2683  02CC  1591               	bsf	17,3	;volatile
  2684  02CD                     l75:	
  2685                           ;I2C.c: 112: while(BF==0);
  2686                           
  2687  02CD  1C14               	btfss	20,0	;volatile
  2688  02CE  2ACD               	goto	l75
  2689                           
  2690                           ;I2C.c: 113: v_i2cData_u8 = SSPBUF;
  2691  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  2692  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  2693  02D1  0813               	movf	19,w	;volatile
  2694  02D2  00F0               	movwf	??_I2C_Master_Read
  2695  02D3  0870               	movf	??_I2C_Master_Read,w
  2696  02D4  00F2               	movwf	I2C_Master_Read@v_i2cData_u8
  2697                           
  2698                           ;I2C.c: 114: I2C_Master_Wait();
  2699  02D5  120A  118A  226A  120A  118A  	fcall	_I2C_Master_Wait
  2700                           
  2701                           ;I2C.c: 116: if(a==1)
  2702  02DA  0371               	decf	I2C_Master_Read@a,w
  2703  02DB  1D03               	btfss	3,2
  2704  02DC  2AE3               	goto	l1115
  2705                           
  2706                           ;I2C.c: 117: {
  2707                           ;I2C.c: 118: i2c_Ack();
  2708  02DD  120A  118A  2252  120A  118A  	fcall	_i2c_Ack
  2709                           
  2710                           ;I2C.c: 119: }
  2711  02E2  2AE6               	goto	l1117
  2712  02E3                     l1115:	
  2713                           
  2714                           ;I2C.c: 120: else
  2715                           ;I2C.c: 121: {
  2716                           ;I2C.c: 122: i2c_NoAck();
  2717  02E3  120A  118A  2259   	fcall	_i2c_NoAck
  2718  02E6                     l1117:	
  2719                           
  2720                           ;I2C.c: 123: }
  2721                           ;I2C.c: 125: return v_i2cData_u8;
  2722  02E6  0872               	movf	I2C_Master_Read@v_i2cData_u8,w
  2723  02E7  0008               	return
  2724  02E8                     __end_of_I2C_Master_Read:	
  2725                           
  2726                           	psect	text15
  2727  0259                     __ptext15:	
  2728 ;; *************** function _i2c_NoAck *****************
  2729 ;; Defined at:
  2730 ;;		line 159 in file "I2C.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;		None
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;		None
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  1    wreg      void 
  2737 ;; Registers used:
  2738 ;;		None
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2744 ;;      Params:         0       0       0       0       0
  2745 ;;      Locals:         0       0       0       0       0
  2746 ;;      Temps:          0       0       0       0       0
  2747 ;;      Totals:         0       0       0       0       0
  2748 ;;Total ram usage:        0 bytes
  2749 ;; Hardware stack levels used:    1
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_I2C_Master_Read
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           
  2758                           ;psect for function _i2c_NoAck
  2759  0259                     _i2c_NoAck:	
  2760                           
  2761                           ;I2C.c: 161: ACKDT = 1;
  2762                           
  2763                           ;incstack = 0
  2764                           ; Regs used in _i2c_NoAck: []
  2765  0259  1683               	bsf	3,5	;RP0=1, select bank1
  2766  025A  1303               	bcf	3,6	;RP1=0, select bank1
  2767  025B  1691               	bsf	17,5	;volatile
  2768                           
  2769                           ;I2C.c: 162: ACKEN = 1;
  2770  025C  1611               	bsf	17,4	;volatile
  2771  025D                     l89:	
  2772                           ;I2C.c: 163: while(ACKEN == 1);
  2773                           
  2774  025D  1E11               	btfss	17,4	;volatile
  2775  025E  0008               	return
  2776  025F  2A5D               	goto	l89
  2777  0260                     __end_of_i2c_NoAck:	
  2778                           
  2779                           	psect	text16
  2780  0252                     __ptext16:	
  2781 ;; *************** function _i2c_Ack *****************
  2782 ;; Defined at:
  2783 ;;		line 139 in file "I2C.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;		None
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;		None
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  1    wreg      void 
  2790 ;; Registers used:
  2791 ;;		None
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2797 ;;      Params:         0       0       0       0       0
  2798 ;;      Locals:         0       0       0       0       0
  2799 ;;      Temps:          0       0       0       0       0
  2800 ;;      Totals:         0       0       0       0       0
  2801 ;;Total ram usage:        0 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; This function calls:
  2804 ;;		Nothing
  2805 ;; This function is called by:
  2806 ;;		_I2C_Master_Read
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           
  2811                           ;psect for function _i2c_Ack
  2812  0252                     _i2c_Ack:	
  2813                           
  2814                           ;I2C.c: 141: ACKDT = 0;
  2815                           
  2816                           ;incstack = 0
  2817                           ; Regs used in _i2c_Ack: []
  2818  0252  1683               	bsf	3,5	;RP0=1, select bank1
  2819  0253  1303               	bcf	3,6	;RP1=0, select bank1
  2820  0254  1291               	bcf	17,5	;volatile
  2821                           
  2822                           ;I2C.c: 142: ACKEN = 1;
  2823  0255  1611               	bsf	17,4	;volatile
  2824  0256                     l83:	
  2825                           ;I2C.c: 143: while(ACKEN == 1);
  2826                           
  2827  0256  1E11               	btfss	17,4	;volatile
  2828  0257  0008               	return
  2829  0258  2A56               	goto	l83
  2830  0259                     __end_of_i2c_Ack:	
  2831                           
  2832                           	psect	text17
  2833  026A                     __ptext17:	
  2834 ;; *************** function _I2C_Master_Wait *****************
  2835 ;; Defined at:
  2836 ;;		line 37 in file "I2C.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;		None
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      void 
  2843 ;; Registers used:
  2844 ;;		None
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2850 ;;      Params:         0       0       0       0       0
  2851 ;;      Locals:         0       0       0       0       0
  2852 ;;      Temps:          0       0       0       0       0
  2853 ;;      Totals:         0       0       0       0       0
  2854 ;;Total ram usage:        0 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; This function calls:
  2857 ;;		Nothing
  2858 ;; This function is called by:
  2859 ;;		_I2C_Write_Byte
  2860 ;;		_I2C_Master_Read
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           
  2865                           ;psect for function _I2C_Master_Wait
  2866  026A                     _I2C_Master_Wait:	
  2867  026A                     l42:	
  2868                           ;I2C.c: 39: while ( (SEN == 1) || (RSEN == 1) || (PEN == 1) || (RCEN == 1) || (R_W == 1)
      +                           );
  2869                           
  2870                           ;incstack = 0
  2871                           ; Regs used in _I2C_Master_Wait: []
  2872                           
  2873  026A  1683               	bsf	3,5	;RP0=1, select bank1
  2874  026B  1303               	bcf	3,6	;RP1=0, select bank1
  2875  026C  1C11               	btfss	17,0	;volatile
  2876  026D  1891               	btfsc	17,1	;volatile
  2877  026E  2A6A               	goto	l42
  2878  026F  1D11               	btfss	17,2	;volatile
  2879  0270  1991               	btfsc	17,3	;volatile
  2880  0271  2A6A               	goto	l42
  2881  0272  1D14               	btfss	20,2	;volatile
  2882  0273  0008               	return
  2883  0274  2A6A               	goto	l42
  2884  0275                     __end_of_I2C_Master_Wait:	
  2885                           
  2886                           	psect	text18
  2887  0293                     __ptext18:	
  2888 ;; *************** function _RTC_ConvertFromDec *****************
  2889 ;; Defined at:
  2890 ;;		line 22 in file "main.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  c               1    wreg     unsigned char 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  c               1    9[COMMON] unsigned char 
  2895 ;;  ch              1    8[COMMON] unsigned char 
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  1    wreg      unsigned char 
  2898 ;; Registers used:
  2899 ;;		wreg, status,2, status,0, pclath, cstack
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2905 ;;      Params:         0       0       0       0       0
  2906 ;;      Locals:         2       0       0       0       0
  2907 ;;      Temps:          4       0       0       0       0
  2908 ;;      Totals:         6       0       0       0       0
  2909 ;;Total ram usage:        6 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    1
  2912 ;; This function calls:
  2913 ;;		___bmul
  2914 ;; This function is called by:
  2915 ;;		_main
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           
  2920                           ;psect for function _RTC_ConvertFromDec
  2921  0293                     _RTC_ConvertFromDec:	
  2922                           
  2923                           ;incstack = 0
  2924                           ; Regs used in _RTC_ConvertFromDec: [wreg+status,2+status,0+pclath+cstack]
  2925                           ;RTC_ConvertFromDec@c stored from wreg
  2926  0293  00F9               	movwf	RTC_ConvertFromDec@c
  2927                           
  2928                           ;main.c: 24: unsigned char ch = ((c>>4)*10+(0b00001111&c));
  2929  0294  300F               	movlw	15
  2930  0295  0579               	andwf	RTC_ConvertFromDec@c,w
  2931  0296  00F4               	movwf	??_RTC_ConvertFromDec
  2932  0297  300A               	movlw	10
  2933  0298  00F5               	movwf	??_RTC_ConvertFromDec+1
  2934  0299  0875               	movf	??_RTC_ConvertFromDec+1,w
  2935  029A  00F0               	movwf	___bmul@multiplicand
  2936  029B  0879               	movf	RTC_ConvertFromDec@c,w
  2937  029C  00F6               	movwf	??_RTC_ConvertFromDec+2
  2938  029D  3004               	movlw	4
  2939  029E                     u1135:	
  2940  029E  1003               	clrc
  2941  029F  0CF6               	rrf	??_RTC_ConvertFromDec+2,f
  2942  02A0  3EFF               	addlw	-1
  2943  02A1  1D03               	skipz
  2944  02A2  2A9E               	goto	u1135
  2945  02A3  0876               	movf	??_RTC_ConvertFromDec+2,w
  2946  02A4  120A  118A  2282   	fcall	___bmul
  2947  02A7  0774               	addwf	??_RTC_ConvertFromDec,w
  2948  02A8  00F7               	movwf	??_RTC_ConvertFromDec+3
  2949  02A9  0877               	movf	??_RTC_ConvertFromDec+3,w
  2950  02AA  00F8               	movwf	RTC_ConvertFromDec@ch
  2951                           
  2952                           ;main.c: 25: return ch;
  2953  02AB  0878               	movf	RTC_ConvertFromDec@ch,w
  2954  02AC  0008               	return
  2955  02AD                     __end_of_RTC_ConvertFromDec:	
  2956                           
  2957                           	psect	text19
  2958  0282                     __ptext19:	
  2959 ;; *************** function ___bmul *****************
  2960 ;; Defined at:
  2961 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul8.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  multiplier      1    wreg     unsigned char 
  2964 ;;  multiplicand    1    0[COMMON] unsigned char 
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;  multiplier      1    3[COMMON] unsigned char 
  2967 ;;  product         1    2[COMMON] unsigned char 
  2968 ;; Return value:  Size  Location     Type
  2969 ;;                  1    wreg      unsigned char 
  2970 ;; Registers used:
  2971 ;;		wreg, status,2, status,0
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2977 ;;      Params:         1       0       0       0       0
  2978 ;;      Locals:         2       0       0       0       0
  2979 ;;      Temps:          1       0       0       0       0
  2980 ;;      Totals:         4       0       0       0       0
  2981 ;;Total ram usage:        4 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; This function calls:
  2984 ;;		Nothing
  2985 ;; This function is called by:
  2986 ;;		_RTC_ConvertFromDec
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           
  2991                           ;psect for function ___bmul
  2992  0282                     ___bmul:	
  2993                           
  2994                           ;incstack = 0
  2995                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2996                           ;___bmul@multiplier stored from wreg
  2997  0282  00F3               	movwf	___bmul@multiplier
  2998  0283  01F2               	clrf	___bmul@product
  2999  0284                     l1127:	
  3000  0284  1C73               	btfss	___bmul@multiplier,0
  3001  0285  2A8A               	goto	l1131
  3002  0286  0870               	movf	___bmul@multiplicand,w
  3003  0287  00F1               	movwf	??___bmul
  3004  0288  0871               	movf	??___bmul,w
  3005  0289  07F2               	addwf	___bmul@product,f
  3006  028A                     l1131:	
  3007  028A  1003               	clrc
  3008  028B  0DF0               	rlf	___bmul@multiplicand,f
  3009  028C  1003               	clrc
  3010  028D  0CF3               	rrf	___bmul@multiplier,f
  3011  028E  0873               	movf	___bmul@multiplier,w
  3012  028F  1D03               	btfss	3,2
  3013  0290  2A84               	goto	l1127
  3014  0291  0872               	movf	___bmul@product,w
  3015  0292  0008               	return
  3016  0293                     __end_of___bmul:	
  3017                           
  3018                           	psect	text20
  3019  031A                     __ptext20:	
  3020 ;; *************** function _I2C_Master_Init *****************
  3021 ;; Defined at:
  3022 ;;		line 21 in file "I2C.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  c               4    0[BANK0 ] unsigned long 
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;		None
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      void 
  3029 ;; Registers used:
  3030 ;;		wreg, status,2, status,0, pclath, cstack
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3036 ;;      Params:         0       4       0       0       0
  3037 ;;      Locals:         0       0       0       0       0
  3038 ;;      Temps:          0       4       0       0       0
  3039 ;;      Totals:         0       8       0       0       0
  3040 ;;Total ram usage:        8 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; Hardware stack levels required when called:    1
  3043 ;; This function calls:
  3044 ;;		___lldiv
  3045 ;; This function is called by:
  3046 ;;		_main
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           
  3051                           ;psect for function _I2C_Master_Init
  3052  031A                     _I2C_Master_Init:	
  3053                           
  3054                           ;I2C.c: 23: SSPCON = 0x28;
  3055                           
  3056                           ;incstack = 0
  3057                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  3058  031A  3028               	movlw	40
  3059  031B  1283               	bcf	3,5	;RP0=0, select bank0
  3060  031C  1303               	bcf	3,6	;RP1=0, select bank0
  3061  031D  0094               	movwf	20	;volatile
  3062                           
  3063                           ;I2C.c: 24: SSPCON2 = 0;
  3064  031E  1683               	bsf	3,5	;RP0=1, select bank1
  3065  031F  1303               	bcf	3,6	;RP1=0, select bank1
  3066  0320  0191               	clrf	17	;volatile
  3067                           
  3068                           ;I2C.c: 25: SSPADD = (8000000/(4*c))-1;
  3069  0321  1283               	bcf	3,5	;RP0=0, select bank0
  3070  0322  1303               	bcf	3,6	;RP1=0, select bank0
  3071  0323  0820               	movf	I2C_Master_Init@c,w
  3072  0324  00A4               	movwf	??_I2C_Master_Init
  3073  0325  0821               	movf	I2C_Master_Init@c+1,w
  3074  0326  00A5               	movwf	??_I2C_Master_Init+1
  3075  0327  0822               	movf	I2C_Master_Init@c+2,w
  3076  0328  00A6               	movwf	??_I2C_Master_Init+2
  3077  0329  0823               	movf	I2C_Master_Init@c+3,w
  3078  032A  00A7               	movwf	??_I2C_Master_Init+3
  3079  032B  3002               	movlw	2
  3080  032C                     u1125:	
  3081  032C  1003               	clrc
  3082  032D  0DA4               	rlf	??_I2C_Master_Init,f
  3083  032E  0DA5               	rlf	??_I2C_Master_Init+1,f
  3084  032F  0DA6               	rlf	??_I2C_Master_Init+2,f
  3085  0330  0DA7               	rlf	??_I2C_Master_Init+3,f
  3086  0331  3EFF               	addlw	-1
  3087  0332  1D03               	skipz
  3088  0333  2B2C               	goto	u1125
  3089  0334  0827               	movf	??_I2C_Master_Init+3,w
  3090  0335  00F3               	movwf	___lldiv@divisor+3
  3091  0336  0826               	movf	??_I2C_Master_Init+2,w
  3092  0337  00F2               	movwf	___lldiv@divisor+2
  3093  0338  0825               	movf	??_I2C_Master_Init+1,w
  3094  0339  00F1               	movwf	___lldiv@divisor+1
  3095  033A  0824               	movf	??_I2C_Master_Init,w
  3096  033B  00F0               	movwf	___lldiv@divisor
  3097  033C  3000               	movlw	0
  3098  033D  00F7               	movwf	___lldiv@dividend+3
  3099  033E  307A               	movlw	122
  3100  033F  00F6               	movwf	___lldiv@dividend+2
  3101  0340  3012               	movlw	18
  3102  0341  00F5               	movwf	___lldiv@dividend+1
  3103  0342  3000               	movlw	0
  3104  0343  00F4               	movwf	___lldiv@dividend
  3105  0344  120A  118A  241C   	fcall	___lldiv
  3106  0347  0870               	movf	?___lldiv,w
  3107  0348  3EFF               	addlw	255
  3108  0349  1683               	bsf	3,5	;RP0=1, select bank1
  3109  034A  1303               	bcf	3,6	;RP1=0, select bank1
  3110  034B  0093               	movwf	19	;volatile
  3111                           
  3112                           ;I2C.c: 26: SSPSTAT |= 0x80;
  3113  034C  1794               	bsf	20,7	;volatile
  3114                           
  3115                           ;I2C.c: 27: TRISC3=1;
  3116  034D  1587               	bsf	7,3	;volatile
  3117                           
  3118                           ;I2C.c: 28: TRISC4=1;
  3119  034E  1607               	bsf	7,4	;volatile
  3120  034F  0008               	return
  3121  0350                     __end_of_I2C_Master_Init:	
  3122                           
  3123                           	psect	text21
  3124  041C                     __ptext21:	
  3125 ;; *************** function ___lldiv *****************
  3126 ;; Defined at:
  3127 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;  divisor         4    0[COMMON] unsigned long 
  3130 ;;  dividend        4    4[COMMON] unsigned long 
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;  quotient        4    9[COMMON] unsigned long 
  3133 ;;  counter         1   13[COMMON] unsigned char 
  3134 ;; Return value:  Size  Location     Type
  3135 ;;                  4    0[COMMON] unsigned long 
  3136 ;; Registers used:
  3137 ;;		wreg, status,2, status,0
  3138 ;; Tracked objects:
  3139 ;;		On entry : 0/0
  3140 ;;		On exit  : 0/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3143 ;;      Params:         8       0       0       0       0
  3144 ;;      Locals:         5       0       0       0       0
  3145 ;;      Temps:          1       0       0       0       0
  3146 ;;      Totals:        14       0       0       0       0
  3147 ;;Total ram usage:       14 bytes
  3148 ;; Hardware stack levels used:    1
  3149 ;; This function calls:
  3150 ;;		Nothing
  3151 ;; This function is called by:
  3152 ;;		_I2C_Master_Init
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           
  3157                           ;psect for function ___lldiv
  3158  041C                     ___lldiv:	
  3159                           
  3160                           ;incstack = 0
  3161                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3162  041C  3000               	movlw	0
  3163  041D  00FC               	movwf	___lldiv@quotient+3
  3164  041E  3000               	movlw	0
  3165  041F  00FB               	movwf	___lldiv@quotient+2
  3166  0420  3000               	movlw	0
  3167  0421  00FA               	movwf	___lldiv@quotient+1
  3168  0422  3000               	movlw	0
  3169  0423  00F9               	movwf	___lldiv@quotient
  3170  0424  0873               	movf	___lldiv@divisor+3,w
  3171  0425  0472               	iorwf	___lldiv@divisor+2,w
  3172  0426  0471               	iorwf	___lldiv@divisor+1,w
  3173  0427  0470               	iorwf	___lldiv@divisor,w
  3174  0428  1903               	skipnz
  3175  0429  2C71               	goto	l1199
  3176  042A  01FD               	clrf	___lldiv@counter
  3177  042B  0AFD               	incf	___lldiv@counter,f
  3178  042C                     l1185:	
  3179  042C  1BF3               	btfsc	___lldiv@divisor+3,7
  3180  042D  2C3C               	goto	l1187
  3181  042E  3001               	movlw	1
  3182  042F  00F8               	movwf	??___lldiv
  3183  0430                     u935:	
  3184  0430  1003               	clrc
  3185  0431  0DF0               	rlf	___lldiv@divisor,f
  3186  0432  0DF1               	rlf	___lldiv@divisor+1,f
  3187  0433  0DF2               	rlf	___lldiv@divisor+2,f
  3188  0434  0DF3               	rlf	___lldiv@divisor+3,f
  3189  0435  0BF8               	decfsz	??___lldiv,f
  3190  0436  2C30               	goto	u935
  3191  0437  3001               	movlw	1
  3192  0438  00F8               	movwf	??___lldiv
  3193  0439  0878               	movf	??___lldiv,w
  3194  043A  07FD               	addwf	___lldiv@counter,f
  3195  043B  2C2C               	goto	l1185
  3196  043C                     l1187:	
  3197  043C  3001               	movlw	1
  3198  043D  00F8               	movwf	??___lldiv
  3199  043E                     u955:	
  3200  043E  1003               	clrc
  3201  043F  0DF9               	rlf	___lldiv@quotient,f
  3202  0440  0DFA               	rlf	___lldiv@quotient+1,f
  3203  0441  0DFB               	rlf	___lldiv@quotient+2,f
  3204  0442  0DFC               	rlf	___lldiv@quotient+3,f
  3205  0443  0BF8               	decfsz	??___lldiv,f
  3206  0444  2C3E               	goto	u955
  3207  0445  0873               	movf	___lldiv@divisor+3,w
  3208  0446  0277               	subwf	___lldiv@dividend+3,w
  3209  0447  1D03               	skipz
  3210  0448  2C53               	goto	u965
  3211  0449  0872               	movf	___lldiv@divisor+2,w
  3212  044A  0276               	subwf	___lldiv@dividend+2,w
  3213  044B  1D03               	skipz
  3214  044C  2C53               	goto	u965
  3215  044D  0871               	movf	___lldiv@divisor+1,w
  3216  044E  0275               	subwf	___lldiv@dividend+1,w
  3217  044F  1D03               	skipz
  3218  0450  2C53               	goto	u965
  3219  0451  0870               	movf	___lldiv@divisor,w
  3220  0452  0274               	subwf	___lldiv@dividend,w
  3221  0453                     u965:	
  3222  0453  1C03               	skipc
  3223  0454  2C64               	goto	l1195
  3224  0455  0870               	movf	___lldiv@divisor,w
  3225  0456  02F4               	subwf	___lldiv@dividend,f
  3226  0457  0871               	movf	___lldiv@divisor+1,w
  3227  0458  1C03               	skipc
  3228  0459  0F71               	incfsz	___lldiv@divisor+1,w
  3229  045A  02F5               	subwf	___lldiv@dividend+1,f
  3230  045B  0872               	movf	___lldiv@divisor+2,w
  3231  045C  1C03               	skipc
  3232  045D  0F72               	incfsz	___lldiv@divisor+2,w
  3233  045E  02F6               	subwf	___lldiv@dividend+2,f
  3234  045F  0873               	movf	___lldiv@divisor+3,w
  3235  0460  1C03               	skipc
  3236  0461  0F73               	incfsz	___lldiv@divisor+3,w
  3237  0462  02F7               	subwf	___lldiv@dividend+3,f
  3238  0463  1479               	bsf	___lldiv@quotient,0
  3239  0464                     l1195:	
  3240  0464  3001               	movlw	1
  3241  0465                     u975:	
  3242  0465  1003               	clrc
  3243  0466  0CF3               	rrf	___lldiv@divisor+3,f
  3244  0467  0CF2               	rrf	___lldiv@divisor+2,f
  3245  0468  0CF1               	rrf	___lldiv@divisor+1,f
  3246  0469  0CF0               	rrf	___lldiv@divisor,f
  3247  046A  3EFF               	addlw	-1
  3248  046B  1D03               	skipz
  3249  046C  2C65               	goto	u975
  3250  046D  3001               	movlw	1
  3251  046E  02FD               	subwf	___lldiv@counter,f
  3252  046F  1D03               	btfss	3,2
  3253  0470  2C3C               	goto	l1187
  3254  0471                     l1199:	
  3255  0471  087C               	movf	___lldiv@quotient+3,w
  3256  0472  00F3               	movwf	?___lldiv+3
  3257  0473  087B               	movf	___lldiv@quotient+2,w
  3258  0474  00F2               	movwf	?___lldiv+2
  3259  0475  087A               	movf	___lldiv@quotient+1,w
  3260  0476  00F1               	movwf	?___lldiv+1
  3261  0477  0879               	movf	___lldiv@quotient,w
  3262  0478  00F0               	movwf	?___lldiv
  3263  0479  0008               	return
  3264  047A                     __end_of___lldiv:	
  3265  007E                     btemp	set	126	;btemp
  3266  007E                     wtemp0	set	126


Data Sizes:
    Strings     27
    Constant    10
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80      0       2
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 19
		 -> STR_2(CODE[19]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 40
		 -> main@buffer(BANK0[40]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    RTC_GetDateTime@rtc	PTR struct . size(1) Largest target is 7
		 -> main@rtc(BANK0[7]), 

    RTC_SetDateTime@rtc	PTR struct . size(1) Largest target is 7
		 -> main@rtc(BANK0[7]), 

    Usart_PrintString@Text	PTR unsigned char  size(2) Largest target is 40
		 -> main@buffer(BANK0[40]), STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Usart_PrintString->_Transmit_char
    _USART_Init->___aldiv
    _RTC_SetDateTime->_I2C_Write_Byte
    _RTC_Init->_I2C_Write_Byte
    _RTC_GetDateTime->_I2C_Master_Read
    _RTC_ConvertFromDec->___bmul
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    _main->_USART_Init
    _USART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                58    58      0    3295
                                             22 BANK0     58    58      0
                    _I2C_Master_Init
                 _RTC_ConvertFromDec
                    _RTC_GetDateTime
                           _RTC_Init
                    _RTC_SetDateTime
                      _Transmit_char
                         _USART_Init
                  _Usart_PrintString
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    18      7    1000
                                              0 BANK0     17    10      7
                 _RTC_ConvertFromDec (ARG)
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Usart_PrintString                                    4     2      2     219
                                              1 COMMON     4     2      2
                      _Transmit_char
 ---------------------------------------------------------------------------------
 (2) _Transmit_char                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                          18    14      4     721
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _RTC_SetDateTime                                      1     1      0     203
                                              1 COMMON     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0      22
                   _I2C_Master_Start
                    _I2C_Master_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (1) _RTC_GetDateTime                                      2     2      0     249
                                              3 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Byte                                       1     1      0      22
                                              0 COMMON     1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      3     3      0      46
                                              0 COMMON     3     3      0
                    _I2C_Master_Wait
                            _i2c_Ack
                          _i2c_NoAck
 ---------------------------------------------------------------------------------
 (3) _i2c_NoAck                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_ConvertFromDec                                   6     6      0     212
                                              4 COMMON     6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     145
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _RTC_ConvertFromDec
     ___bmul
   _RTC_GetDateTime
     _I2C_Master_Read
       _I2C_Master_Wait
       _i2c_Ack
       _i2c_NoAck
     _I2C_Master_Start
     _I2C_Master_Stop
     _I2C_Write_Byte
       _I2C_Master_Wait
   _RTC_Init
     _I2C_Master_Start
     _I2C_Master_Stop
     _I2C_Write_Byte
       _I2C_Master_Wait
   _RTC_SetDateTime
     _I2C_Master_Start
     _I2C_Master_Stop
     _I2C_Write_Byte
       _I2C_Master_Wait
   _Transmit_char
   _USART_Init
     ___aldiv
   _Usart_PrintString
     _Transmit_char
   _sprintf
     _RTC_ConvertFromDec (ARG)
       ___bmul
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      60       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       2       7        2.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      60      12        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Feb 16 20:54:04 2018

                          _z 00A0                            pc 0002               ___bmul@product 0072  
                __CFG_CP$OFF 0000                           _BF 04A0                           l42 026A  
                         l60 024F                           l48 0249                           l66 027A  
                         l83 0256                           l75 02CD                           l89 025D  
                         fsr 0004                          l156 0261                          l364 050B  
                        _PEN 048A                 __CFG_CPD$OFF 0000                          _SEN 0488  
                        u935 0430                          u855 0530                          u955 043E  
                        u875 053E                          u965 0453                          u885 0553  
                        u975 0465                          u895 0565                          _R_W 04A2  
    __end_of_RTC_SetDateTime 041C                          fsr0 0004                          indf 0000  
         I2C_Write_Byte@data 0070                 __CFG_FOSC$XT 0000                 __CFG_LVP$OFF 0000  
                       l1131 028A                         l1115 02E3                         l1117 02E6  
                       l1221 03B2                         l1213 038E                         l1127 0284  
                       l1215 039C                         l1225 03BD                         l1171 0571  
                       l1315 0352                         l1243 030A                         l1157 052C  
                       l1149 051C                         l1317 037B                         l1237 02EE  
                       l1405 05FF                         l1175 057F                         l1167 0564  
                       l1159 053C                         l1239 02FC                         l1247 0315  
                       l1407 058F                         l1431 0685                         l1185 042C  
                       l1409 0640                         l1195 0464                         l1187 043C  
                       l1277 07DB                         l1381 05C8                         l1373 05AF  
                       l1199 0471                         l1295 07F6                         l1391 05DA  
                       l1375 05B1                         l1379 05B6                         l1397 05FB  
                       STR_1 0030                         STR_2 001D                         _BRGH 04C2  
                       _CREN 00C4                         u1005 0391                         u1200 07BC  
                       u1201 07BD                         u1025 039D                         u1105 030B  
                       u1202 07C2                         u1203 07C3                         u1035 03A9  
                       u1125 032C                         u1045 03B3                         u1135 029E  
                       u1160 0753                         u1161 0754                         u1145 0718  
                       u1162 0759                         u1163 075A                         u1155 0739  
                       u1075 02F1                         u1307 06A1                         u1317 0706  
                       u1095 0302                         u1255 05F1                         u1185 0781  
                       u1195 07A2                         u1297 068D                         _RCEN 048B  
                       _RCIF 0065                         _SPEN 00C7                         _RSEN 0489  
                       _TRMT 04C1                         _TXEN 04C5                         _SYNC 04C4  
               __CFG_WRT$OFF 0000                         _main 0645                         btemp 007E  
                       start 0000            ___bmul@multiplier 0073              __end_of_i2c_Ack 0259  
           ?_I2C_Master_Init 0020             ?_I2C_Master_Read 0070             ?_I2C_Master_Wait 0070  
           ?_I2C_Master_Stop 0070              __end_of___aldiv 0588                        ?_main 0070  
                      _ACKEN 048C                        _ACKDT 048D                __CFG_WDTE$OFF 0000  
            __end_of___lldiv 047A              __end_of___lwdiv 03C2              __end_of___lwmod 031A  
                      _RCREG 001A                        _SPBRG 0099                        _TXREG 0019  
            __end_of_dpowers 001D             __end_of_RTC_Init 02C8               __CFG_BOREN$OFF 0000  
                      pclath 000A              ??_Transmit_char 0070          RTC_ConvertFromDec@c 0079  
                      status 0003                        wtemp0 007E              __end_of_sprintf 0645  
                ?_USART_Init 0026              __initialization 07F8                 __end_of_main 070D  
                     ??_main 0036           RTC_SetDateTime@rtc 0071             ?_RTC_SetDateTime 0070  
          ?_I2C_Master_Start 0070   __end_of_RTC_ConvertFromDec 02AD           ??_I2C_Master_Start 0070  
         __size_of_i2c_NoAck 0007                       _SSPADD 0093                       _TRISC3 043B  
                     _TRISC4 043C                       _TRISC6 043E                       _TRISC7 043F  
                     _SSPCON 0014                       _SSPBUF 0013                    ??_i2c_Ack 0070  
             __CFG_PWRTE$OFF 0000                       ___bmul 0282                    ??___aldiv 0078  
                  ??___lldiv 0078                    ??___lwdiv 0074                    ??___lwmod 007C  
      Usart_PrintString@Text 0071            _Usart_PrintString 0350           ?_Usart_PrintString 0071  
        __size_of_USART_Init 00EB         RTC_ConvertFromDec@ch 0078                    ??_sprintf 0027  
        ??_Usart_PrintString 0073      __end_of__initialization 07FC          ___bmul@multiplicand 0070  
             __pcstackCOMMON 0070            __end_of_i2c_NoAck 0260    __end_of_Usart_PrintString 0386  
                  ?_RTC_Init 0070     __size_of_RTC_GetDateTime 007F                   __pbssBANK1 00A0  
                 __pmaintext 0645                      ?___bmul 0070      __size_of_I2C_Write_Byte 000D  
                 ??_RTC_Init 0071                      _SSPCON2 0091                      _SSPSTAT 0094  
                 __stringtab 0003                      _i2c_Ack 0252                 ??_USART_Init 002A  
                    ___aldiv 04F9              __size_of___bmul 0011                      ___lldiv 041C  
                    ___lwdiv 0386                      ___lwmod 02E8   __size_of_Usart_PrintString 0036  
                    __ptext1 0588                      __ptext2 02E8                      __ptext3 0386  
                    __ptext4 0350                      __ptext5 0260                      __ptext6 070D  
                    __ptext7 04F9                      __ptext8 03C2                      __ptext9 02AD  
             USART_Init@baud 0026                      _dpowers 0013             ___aldiv@dividend 0074  
   __size_of_I2C_Master_Init 0036     __size_of_I2C_Master_Read 0020     __size_of_I2C_Master_Wait 000B  
   __size_of_I2C_Master_Stop 0006           __end_of_USART_Init 07F8                      _sprintf 0588  
                    main@min 0067                      main@sec 0066                      main@rtc 0069  
       end_of_initialization 07FC        __end_of_Transmit_char 026A           _RTC_ConvertFromDec 0293  
  __size_of_I2C_Master_Start 0006            ??_RTC_GetDateTime 0073              ___lldiv@divisor 0070  
            ___lldiv@counter 007D             ___aldiv@quotient 0022             I2C_Master_Init@c 0020  
           I2C_Master_Read@a 0071          ?_RTC_ConvertFromDec 0070         ??_RTC_ConvertFromDec 0074  
   __size_of_RTC_SetDateTime 005A                   main@buffer 003D           Usart_PrintString@i 0074  
                 main@status 0065               __end_of___bmul 0293               _I2C_Write_Byte 0275  
                USART_Init@x 0079                    _i2c_NoAck 0259            __size_of_RTC_Init 001B  
        start_initialization 07F8            ??_I2C_Master_Init 0024            ??_I2C_Master_Read 0070  
          ??_I2C_Master_Wait 0070            ??_I2C_Master_Stop 0070       __end_of_I2C_Write_Byte 0282  
                   ??___bmul 0071                   ?_i2c_NoAck 0070                    ___latbits 0002  
              __pcstackBANK0 0020                  sprintf@flag 002A                  sprintf@prec 002E  
                   ?_i2c_Ack 0070             _I2C_Master_Start 0246            ??_RTC_SetDateTime 0071  
           ___lwdiv@dividend 0072              ?_I2C_Write_Byte 0070                     ?___aldiv 0070  
                   ?___lldiv 0070                     ?___lwdiv 0070                     ?___lwmod 0078  
                  __pstrings 0003              _RTC_GetDateTime 047A             ___lwdiv@quotient 0075  
                   ?_sprintf 0020              ___aldiv@divisor 0070              ___aldiv@counter 0020  
                   _RTC_Init 02AD                  __stringbase 0012                  ??_i2c_NoAck 0070  
           __size_of_i2c_Ack 0007             __size_of___aldiv 008F             __size_of___lldiv 005E  
           __size_of___lwdiv 003C             __size_of___lwmod 0032           __end_of__stringtab 0013  
    __end_of_RTC_GetDateTime 04F9                   sprintf@val 002C              _I2C_Master_Init 031A  
            _I2C_Master_Read 02C8       __size_of_Transmit_char 000A              _I2C_Master_Wait 026A  
            _I2C_Master_Stop 024C              ___lwdiv@divisor 0070              ___lwdiv@counter 0077  
                   __ptext10 047A                     __ptext11 0275                     __ptext20 031A  
                   __ptext12 024C                     __ptext21 041C                     __ptext13 0246  
                   __ptext14 02C8                     __ptext15 0259                     __ptext16 0252  
                   __ptext17 026A                     __ptext18 0293                     __ptext19 0282  
__size_of_RTC_ConvertFromDec 001A             __size_of_sprintf 00BD                __size_of_main 00C8  
                   main@hour 0068     __end_of_I2C_Master_Start 024C           RTC_GetDateTime@rtc 0074  
            _RTC_SetDateTime 03C2                    sprintf@ap 002B                    sprintf@sp 002F  
           ___lwmod@dividend 007A             ___lldiv@dividend 0074             ??_I2C_Write_Byte 0070  
I2C_Master_Read@v_i2cData_u8 0072                _Transmit_char 0260                    stringcode 000D  
    __end_of_I2C_Master_Init 0350      __end_of_I2C_Master_Read 02E8      __end_of_I2C_Master_Wait 0275  
    __end_of_I2C_Master_Stop 0252             ?_RTC_GetDateTime 0070                     sprintf@c 0030  
                   sprintf@f 0020             ___lldiv@quotient 0079              ___lwmod@divisor 0078  
            ___lwmod@counter 007D                     stringdir 000D                     stringtab 0003  
               ___aldiv@sign 0021            Transmit_char@data 0070               ?_Transmit_char 0070  
                 _USART_Init 070D  
