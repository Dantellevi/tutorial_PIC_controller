

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Jan 14 19:51:07 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	swtext1,local,class=CONST,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	dabs	1,0x4E,2
    22  0000                     
    23                           ; Version 1.44
    24                           ; Generated 14/09/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F84A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0086                     	;# 
    71  0088                     	;# 
    72  0089                     	;# 
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  0006                     _PORTB	set	6
    90  0005                     _PORTA	set	5
    91  0037                     _RB7	set	55
    92  0086                     _TRISB	set	134
    93  0085                     _TRISA	set	133
    94                           
    95                           	psect	strings
    96  0001                     __pstrings:	
    97  0001                     stringtab:	
    98  0001                     __stringtab:	
    99                           
   100                           ;	String table - string pointers are 1 byte each
   101  0001  1BCF               	btfsc	btemp+1,7
   102  0002  280B               	ljmp	stringcode
   103  0003  1383               	bcf	3,7
   104  0004  184F               	btfsc	btemp+1,0
   105  0005  1783               	bsf	3,7
   106  0006  0800               	movf	0,w
   107  0007  0A84               	incf	4,f
   108  0008  1903               	skipnz
   109  0009  0ACF               	incf	btemp+1,f
   110  000A  0008               	return
   111  000B                     stringcode:	
   112  000B                     stringdir:	
   113  000B  3000               	movlw	high stringdir
   114  000C  008A               	movwf	10
   115  000D  0804               	movf	4,w
   116  000E  0A84               	incf	4,f
   117  000F  0782               	addwf	2,f
   118  0010                     __stringbase:	
   119  0010  3400               	retlw	0
   120  0011                     __end_of__stringtab:	
   121  0011                     STR_1:	
   122  0011  3448               	retlw	72	;'H'
   123  0012  3465               	retlw	101	;'e'
   124  0013  346C               	retlw	108	;'l'
   125  0014  346C               	retlw	108	;'l'
   126  0015  346F               	retlw	111	;'o'
   127  0016  3420               	retlw	32	;' '
   128  0017  3457               	retlw	87	;'W'
   129  0018  346F               	retlw	111	;'o'
   130  0019  3472               	retlw	114	;'r'
   131  001A  346C               	retlw	108	;'l'
   132  001B  3464               	retlw	100	;'d'
   133  001C  3421               	retlw	33	;'!'
   134  001D  3421               	retlw	33	;'!'
   135  001E  3400               	retlw	0
   136                           
   137                           ; #config settings
   138  0000                     
   139                           	psect	cinit
   140  03FE                     start_initialization:	
   141  03FE                     __initialization:	
   142  03FE                     end_of_initialization:	
   143                           ;End of C runtime variable initialization code
   144                           
   145  03FE                     __end_of__initialization:	
   146  03FE  0183               	clrf	3
   147  03FF  2ABB               	ljmp	_main	;jump to C main() function
   148                           
   149                           	psect	cstackCOMMON
   150  0000                     __pcstackCOMMON:	
   151  0000                     ??_Port_Init:	
   152  0000                     ??_main:	
   153                           ; 1 bytes @ 0x0
   154                           
   155  0000                     ??_LCDcommand:	
   156                           ; 1 bytes @ 0x0
   157                           
   158                           
   159                           	psect	cstackBANK0
   160  000C                     __pcstackBANK0:	
   161                           ; 1 bytes @ 0x0
   162                           
   163  000C                     ?_LCDinit:	
   164  000C                     ?_Send_byte:	
   165                           ; 1 bytes @ 0x0
   166                           
   167  000C                     ?_Port_Init:	
   168                           ; 1 bytes @ 0x0
   169                           
   170  000C                     ?_main:	
   171                           ; 1 bytes @ 0x0
   172                           
   173  000C                     ?_OutPin:	
   174                           ; 1 bytes @ 0x0
   175                           
   176  000C                     ??_OutPin:	
   177                           ; 1 bytes @ 0x0
   178                           
   179  000C                     ?_strob:	
   180                           ; 1 bytes @ 0x0
   181                           
   182  000C                     ??_strob:	
   183                           ; 1 bytes @ 0x0
   184                           
   185  000C                     ?_check_Button:	
   186                           ; 1 bytes @ 0x0
   187                           
   188  000C                     ??_check_Button:	
   189                           ; 1 bytes @ 0x0
   190                           
   191  000C                     ?_Busy_flag:	
   192                           ; 1 bytes @ 0x0
   193                           
   194  000C                     ?_LCDcommand:	
   195                           ; 1 bytes @ 0x0
   196                           
   197  000C                     ?_LCDdata:	
   198                           ; 1 bytes @ 0x0
   199                           
   200                           
   201                           ; 1 bytes @ 0x0
   202  000C                     	ds	1
   203  000D                     ??_Send_byte:	
   204  000D                     check_Button@butcount:	
   205                           ; 1 bytes @ 0x1
   206                           
   207                           
   208                           ; 2 bytes @ 0x1
   209  000D                     	ds	2
   210  000F                     check_Button@result:	
   211  000F                     Send_byte@i:	
   212                           ; 1 bytes @ 0x3
   213                           
   214                           
   215                           ; 1 bytes @ 0x3
   216  000F                     	ds	1
   217  0010                     ??_Busy_flag:	
   218  0010                     Send_byte@higb:	
   219                           ; 1 bytes @ 0x4
   220                           
   221                           
   222                           ; 1 bytes @ 0x4
   223  0010                     	ds	1
   224  0011                     Busy_flag@i:	
   225  0011                     Send_byte@lowb:	
   226                           ; 1 bytes @ 0x5
   227                           
   228                           
   229                           ; 1 bytes @ 0x5
   230  0011                     	ds	1
   231  0012                     ??_LCDdata:	
   232  0012                     LCDcommand@i:	
   233                           ; 1 bytes @ 0x6
   234                           
   235                           
   236                           ; 1 bytes @ 0x6
   237  0012                     	ds	1
   238  0013                     ??_LCDinit:	
   239  0013                     ?_LCDGotoXY:	
   240                           ; 1 bytes @ 0x7
   241                           
   242  0013                     LCDdata@i:	
   243                           ; 1 bytes @ 0x7
   244                           
   245  0013                     LCDGotoXY@y:	
   246                           ; 1 bytes @ 0x7
   247                           
   248                           
   249                           ; 1 bytes @ 0x7
   250  0013                     	ds	1
   251  0014                     ??_LCDGotoXY:	
   252                           
   253                           ; 1 bytes @ 0x8
   254  0014                     	ds	1
   255  0015                     LCDinit@i:	
   256  0015                     LCDGotoXY@Address:	
   257                           ; 1 bytes @ 0x9
   258                           
   259                           
   260                           ; 1 bytes @ 0x9
   261  0015                     	ds	1
   262  0016                     LCDGotoXY@x:	
   263                           
   264                           ; 1 bytes @ 0xA
   265  0016                     	ds	1
   266  0017                     ?_LCDstringXY:	
   267  0017                     LCDstringXY@i:	
   268                           ; 1 bytes @ 0xB
   269                           
   270                           
   271                           ; 2 bytes @ 0xB
   272  0017                     	ds	2
   273  0019                     LCDstringXY@x:	
   274                           
   275                           ; 1 bytes @ 0xD
   276  0019                     	ds	1
   277  001A                     LCDstringXY@y:	
   278                           
   279                           ; 1 bytes @ 0xE
   280  001A                     	ds	1
   281  001B                     ??_LCDstringXY:	
   282                           
   283                           ; 1 bytes @ 0xF
   284  001B                     	ds	1
   285                           
   286                           	psect	maintext
   287  02BB                     __pmaintext:	
   288 ;;
   289 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   290 ;;
   291 ;; *************** function _main *****************
   292 ;; Defined at:
   293 ;;		line 34 in file "main.c"
   294 ;; Parameters:    Size  Location     Type
   295 ;;		None
   296 ;; Auto vars:     Size  Location     Type
   297 ;;		None
   298 ;; Return value:  Size  Location     Type
   299 ;;                  1    wreg      void 
   300 ;; Registers used:
   301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   302 ;; Tracked objects:
   303 ;;		On entry : B00/0
   304 ;;		On exit  : 0/0
   305 ;;		Unchanged: 0/0
   306 ;; Data sizes:     COMMON   BANK0
   307 ;;      Params:         0       0
   308 ;;      Locals:         0       0
   309 ;;      Temps:          0       0
   310 ;;      Totals:         0       0
   311 ;;Total ram usage:        0 bytes
   312 ;; Hardware stack levels required when called:    5
   313 ;; This function calls:
   314 ;;		_LCDinit
   315 ;;		_LCDstringXY
   316 ;;		_Port_Init
   317 ;; This function is called by:
   318 ;;		Startup code after reset
   319 ;; This function uses a non-reentrant model
   320 ;;
   321                           
   322                           
   323                           ;psect for function _main
   324  02BB                     _main:	
   325                           
   326                           ;main.c: 36: Port_Init();
   327                           
   328                           ;incstack = 0
   329                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   330  02BB  22B2               	fcall	_Port_Init
   331                           
   332                           ;main.c: 37: LCDinit();
   333  02BC  2373               	fcall	_LCDinit
   334                           
   335                           ;main.c: 38: LCDstringXY("Hello World!!",0,0);
   336  02BD  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   337  02BE  1283               	bcf	3,5	;RP0=0, select bank0
   338  02BF  0097               	movwf	LCDstringXY@i
   339  02C0  3080               	movlw	128
   340  02C1  0098               	movwf	LCDstringXY@i+1
   341  02C2  0199               	clrf	LCDstringXY@x
   342  02C3  019A               	clrf	LCDstringXY@y
   343  02C4  22EE               	fcall	_LCDstringXY
   344  02C5                     l20:	
   345                           ;main.c: 39: while(1)
   346                           
   347                           
   348                           ;main.c: 40: {
   349  02C5  2AC5               	goto	l20
   350  02C6                     __end_of_main:	
   351                           
   352                           	psect	text1
   353  02B2                     __ptext1:	
   354 ;; *************** function _Port_Init *****************
   355 ;; Defined at:
   356 ;;		line 22 in file "main.c"
   357 ;; Parameters:    Size  Location     Type
   358 ;;		None
   359 ;; Auto vars:     Size  Location     Type
   360 ;;		None
   361 ;; Return value:  Size  Location     Type
   362 ;;                  1    wreg      void 
   363 ;; Registers used:
   364 ;;		status,2
   365 ;; Tracked objects:
   366 ;;		On entry : 0/0
   367 ;;		On exit  : 0/0
   368 ;;		Unchanged: 0/0
   369 ;; Data sizes:     COMMON   BANK0
   370 ;;      Params:         0       0
   371 ;;      Locals:         0       0
   372 ;;      Temps:          0       0
   373 ;;      Totals:         0       0
   374 ;;Total ram usage:        0 bytes
   375 ;; Hardware stack levels used:    1
   376 ;; This function calls:
   377 ;;		Nothing
   378 ;; This function is called by:
   379 ;;		_main
   380 ;; This function uses a non-reentrant model
   381 ;;
   382                           
   383                           
   384                           ;psect for function _Port_Init
   385  02B2                     _Port_Init:	
   386                           
   387                           ;main.c: 24: TRISA=0x00;
   388                           
   389                           ;incstack = 0
   390                           ; Regs used in _Port_Init: [status,2]
   391  02B2  1683               	bsf	3,5	;RP0=1, select bank1
   392  02B3  0185               	clrf	5	;volatile
   393                           
   394                           ;main.c: 25: PORTA=0x00;
   395  02B4  1283               	bcf	3,5	;RP0=0, select bank0
   396  02B5  0185               	clrf	5	;volatile
   397                           
   398                           ;main.c: 27: TRISB=0x00;
   399  02B6  1683               	bsf	3,5	;RP0=1, select bank1
   400  02B7  0186               	clrf	6	;volatile
   401                           
   402                           ;main.c: 28: PORTB=0x00;
   403  02B8  1283               	bcf	3,5	;RP0=0, select bank0
   404  02B9  0186               	clrf	6	;volatile
   405  02BA  0008               	return
   406  02BB                     __end_of_Port_Init:	
   407                           
   408                           	psect	text2
   409  02EE                     __ptext2:	
   410 ;; *************** function _LCDstringXY *****************
   411 ;; Defined at:
   412 ;;		line 214 in file "lcd.c"
   413 ;; Parameters:    Size  Location     Type
   414 ;;  i               2   11[BANK0 ] PTR unsigned char 
   415 ;;		 -> LCDputsIntGotoXY@str(40), STR_1(14), 
   416 ;;  x               1   13[BANK0 ] unsigned char 
   417 ;;  y               1   14[BANK0 ] unsigned char 
   418 ;; Auto vars:     Size  Location     Type
   419 ;;		None
   420 ;; Return value:  Size  Location     Type
   421 ;;                  1    wreg      void 
   422 ;; Registers used:
   423 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   424 ;; Tracked objects:
   425 ;;		On entry : 0/0
   426 ;;		On exit  : 0/0
   427 ;;		Unchanged: 0/0
   428 ;; Data sizes:     COMMON   BANK0
   429 ;;      Params:         0       4
   430 ;;      Locals:         0       0
   431 ;;      Temps:          0       1
   432 ;;      Totals:         0       5
   433 ;;Total ram usage:        5 bytes
   434 ;; Hardware stack levels used:    1
   435 ;; Hardware stack levels required when called:    4
   436 ;; This function calls:
   437 ;;		_LCDGotoXY
   438 ;;		_LCDdata
   439 ;; This function is called by:
   440 ;;		_main
   441 ;;		_LCDputsIntGotoXY
   442 ;; This function uses a non-reentrant model
   443 ;;
   444                           
   445                           
   446                           ;psect for function _LCDstringXY
   447  02EE                     _LCDstringXY:	
   448                           
   449                           ;lcd.c: 216: LCDGotoXY(x,y);
   450                           
   451                           ;incstack = 0
   452                           ; Regs used in _LCDstringXY: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   453  02EE  1283               	bcf	3,5	;RP0=0, select bank0
   454  02EF  081A               	movf	LCDstringXY@y,w
   455  02F0  009B               	movwf	??_LCDstringXY
   456  02F1  081B               	movf	??_LCDstringXY,w
   457  02F2  0093               	movwf	LCDGotoXY@y
   458  02F3  0819               	movf	LCDstringXY@x,w
   459  02F4  232A               	fcall	_LCDGotoXY
   460  02F5                     l948:	
   461                           ;lcd.c: 217: while( *i )
   462                           
   463  02F5  1283               	bcf	3,5	;RP0=0, select bank0
   464  02F6  0818               	movf	LCDstringXY@i+1,w
   465  02F7  00CF               	movwf	79
   466  02F8  0817               	movf	LCDstringXY@i,w
   467  02F9  0084               	movwf	4
   468  02FA  2001               	fcall	stringtab
   469  02FB  3A00               	xorlw	0
   470  02FC  1903               	btfsc	3,2
   471  02FD  0008               	return
   472                           
   473                           ;lcd.c: 218: {
   474                           ;lcd.c: 219: LCDdata(*i++ );
   475  02FE  1283               	bcf	3,5	;RP0=0, select bank0
   476  02FF  0818               	movf	LCDstringXY@i+1,w
   477  0300  00CF               	movwf	79
   478  0301  0817               	movf	LCDstringXY@i,w
   479  0302  0084               	movwf	4
   480  0303  2001               	fcall	stringtab
   481  0304  22D2               	fcall	_LCDdata
   482  0305  3001               	movlw	1
   483  0306  1283               	bcf	3,5	;RP0=0, select bank0
   484  0307  0797               	addwf	LCDstringXY@i,f
   485  0308  1803               	skipnc
   486  0309  0A98               	incf	LCDstringXY@i+1,f
   487  030A  2AF5               	goto	l948
   488  030B                     __end_of_LCDstringXY:	
   489                           
   490                           	psect	text3
   491  02D2                     __ptext3:	
   492 ;; *************** function _LCDdata *****************
   493 ;; Defined at:
   494 ;;		line 180 in file "lcd.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;  i               1    wreg     unsigned char 
   497 ;; Auto vars:     Size  Location     Type
   498 ;;  i               1    7[BANK0 ] unsigned char 
   499 ;; Return value:  Size  Location     Type
   500 ;;                  1    wreg      void 
   501 ;; Registers used:
   502 ;;		wreg, status,2, status,0, pclath, cstack
   503 ;; Tracked objects:
   504 ;;		On entry : 0/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMMON   BANK0
   508 ;;      Params:         0       0
   509 ;;      Locals:         0       1
   510 ;;      Temps:          0       1
   511 ;;      Totals:         0       2
   512 ;;Total ram usage:        2 bytes
   513 ;; Hardware stack levels used:    1
   514 ;; Hardware stack levels required when called:    2
   515 ;; This function calls:
   516 ;;		_Busy_flag
   517 ;;		_Send_byte
   518 ;; This function is called by:
   519 ;;		_LCDstringXY
   520 ;;		_LCDdataXY
   521 ;;		_LCDsendString
   522 ;; This function uses a non-reentrant model
   523 ;;
   524                           
   525                           
   526                           ;psect for function _LCDdata
   527  02D2                     _LCDdata:	
   528                           
   529                           ;incstack = 0
   530                           ; Regs used in _LCDdata: [wreg+status,2+status,0+pclath+cstack]
   531                           ;LCDdata@i stored from wreg
   532  02D2  1283               	bcf	3,5	;RP0=0, select bank0
   533  02D3  0093               	movwf	LCDdata@i
   534                           
   535                           ;lcd.c: 182: Busy_flag();
   536  02D4  230B               	fcall	_Busy_flag
   537                           
   538                           ;lcd.c: 183: PORTA|=(1<<0);
   539  02D5  1283               	bcf	3,5	;RP0=0, select bank0
   540  02D6  1405               	bsf	5,0	;volatile
   541                           
   542                           ;lcd.c: 184: Send_byte(i);
   543  02D7  0813               	movf	LCDdata@i,w
   544  02D8  23A9               	fcall	_Send_byte
   545                           
   546                           ;lcd.c: 185: PORTA&=~(1<<0);
   547  02D9  30FE               	movlw	254
   548  02DA  1283               	bcf	3,5	;RP0=0, select bank0
   549  02DB  0092               	movwf	??_LCDdata
   550  02DC  0812               	movf	??_LCDdata,w
   551  02DD  0585               	andwf	5,f	;volatile
   552  02DE  0008               	return
   553  02DF                     __end_of_LCDdata:	
   554                           
   555                           	psect	text4
   556  032A                     __ptext4:	
   557 ;; *************** function _LCDGotoXY *****************
   558 ;; Defined at:
   559 ;;		line 192 in file "lcd.c"
   560 ;; Parameters:    Size  Location     Type
   561 ;;  x               1    wreg     unsigned char 
   562 ;;  y               1    7[BANK0 ] unsigned char 
   563 ;; Auto vars:     Size  Location     Type
   564 ;;  x               1   10[BANK0 ] unsigned char 
   565 ;;  Address         1    9[BANK0 ] unsigned char 
   566 ;; Return value:  Size  Location     Type
   567 ;;                  1    wreg      void 
   568 ;; Registers used:
   569 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   570 ;; Tracked objects:
   571 ;;		On entry : 0/0
   572 ;;		On exit  : 0/0
   573 ;;		Unchanged: 0/0
   574 ;; Data sizes:     COMMON   BANK0
   575 ;;      Params:         0       1
   576 ;;      Locals:         0       2
   577 ;;      Temps:          0       1
   578 ;;      Totals:         0       4
   579 ;;Total ram usage:        4 bytes
   580 ;; Hardware stack levels used:    1
   581 ;; Hardware stack levels required when called:    3
   582 ;; This function calls:
   583 ;;		_LCDcommand
   584 ;; This function is called by:
   585 ;;		_LCDstringXY
   586 ;;		_LCDdataXY
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590                           
   591                           ;psect for function _LCDGotoXY
   592  032A                     _LCDGotoXY:	
   593                           
   594                           ;incstack = 0
   595                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   596                           ;LCDGotoXY@x stored from wreg
   597  032A  1283               	bcf	3,5	;RP0=0, select bank0
   598  032B  0096               	movwf	LCDGotoXY@x
   599                           
   600                           ;lcd.c: 194: char Address;
   601                           ;lcd.c: 196: switch(y)
   602  032C  2B3C               	goto	l910
   603  032D                     l900:	
   604                           ;lcd.c: 197: {
   605                           ;lcd.c: 198: case 0: Address = 0x00+x;
   606                           
   607  032D  2B37               	goto	l908
   608  032E                     l902:	
   609                           ;lcd.c: 200: case 1: Address = 0x40+x;
   610                           
   611                           ;lcd.c: 199: break;
   612                           
   613  032E  0816               	movf	LCDGotoXY@x,w
   614  032F  3E40               	addlw	64
   615  0330  2B38               	goto	L4
   616  0331                     l904:	
   617                           ;lcd.c: 202: case 2: Address = 0x14+x;
   618                           
   619                           ;lcd.c: 201: break;
   620                           
   621  0331  0816               	movf	LCDGotoXY@x,w
   622  0332  3E14               	addlw	20
   623  0333  2B38               	goto	L4
   624  0334                     l906:	
   625                           ;lcd.c: 204: case 3: Address = 0x54+x;
   626                           
   627                           ;lcd.c: 203: break;
   628                           
   629  0334  0816               	movf	LCDGotoXY@x,w
   630  0335  3E54               	addlw	84
   631  0336  2B38               	goto	L4
   632  0337                     l908:	
   633                           ;lcd.c: 206: default: Address = 0x00+x;
   634                           
   635                           ;lcd.c: 205: break;
   636                           
   637  0337  0816               	movf	LCDGotoXY@x,w
   638  0338                     L4:	
   639  0338  0094               	movwf	??_LCDGotoXY
   640  0339  0814               	movf	??_LCDGotoXY,w
   641  033A  0095               	movwf	LCDGotoXY@Address
   642                           
   643                           ;lcd.c: 207: }
   644  033B  2B47               	goto	l912
   645  033C                     l910:	
   646  033C  0813               	movf	LCDGotoXY@y,w
   647                           
   648                           ; Switch size 1, requested type "space"
   649                           ; Number of cases is 4, Range of values is 0 to 3
   650                           ; switch strategies available:
   651                           ; Name         Instructions Cycles
   652                           ; direct_byte           10     6 (fixed)
   653                           ; simple_byte           13     7 (average)
   654                           ; jumptable            260     6 (fixed)
   655                           ;	Chosen strategy is direct_byte
   656  033D  0084               	movwf	4
   657  033E  3004               	movlw	4
   658  033F  0204               	subwf	4,w
   659  0340  1803               	skipnc
   660  0341  2B37               	goto	l908
   661  0342  3000               	movlw	high S1004
   662  0343  008A               	movwf	10
   663  0344  301F               	movlw	low S1004
   664  0345  0704               	addwf	4,w
   665  0346  0082               	movwf	2
   666  0347                     l912:	
   667                           
   668                           ;lcd.c: 209: LCDcommand(1<<7 | Address);
   669  0347  0815               	movf	LCDGotoXY@Address,w
   670  0348  3880               	iorlw	128
   671  0349  22AB               	fcall	_LCDcommand
   672  034A  0008               	return
   673  034B                     __end_of_LCDGotoXY:	
   674                           
   675                           	psect	swtext1
   676  001F                     __pswtext1:	
   677  001F                     S1004:	
   678  001F  2B2D               	ljmp	l900
   679  0020  2B2E               	ljmp	l902
   680  0021  2B31               	ljmp	l904
   681  0022  2B34               	ljmp	l906
   682                           
   683                           	psect	text5
   684  0373                     __ptext5:	
   685 ;; *************** function _LCDinit *****************
   686 ;; Defined at:
   687 ;;		line 150 in file "lcd.c"
   688 ;; Parameters:    Size  Location     Type
   689 ;;		None
   690 ;; Auto vars:     Size  Location     Type
   691 ;;  i               1    9[BANK0 ] unsigned char 
   692 ;; Return value:  Size  Location     Type
   693 ;;                  1    wreg      void 
   694 ;; Registers used:
   695 ;;		wreg, status,2, status,0, pclath, cstack
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMMON   BANK0
   701 ;;      Params:         0       0
   702 ;;      Locals:         0       1
   703 ;;      Temps:          0       2
   704 ;;      Totals:         0       3
   705 ;;Total ram usage:        3 bytes
   706 ;; Hardware stack levels used:    1
   707 ;; Hardware stack levels required when called:    3
   708 ;; This function calls:
   709 ;;		_Busy_flag
   710 ;;		_LCDcommand
   711 ;;		_OutPin
   712 ;;		_strob
   713 ;; This function is called by:
   714 ;;		_main
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           
   719                           ;psect for function _LCDinit
   720  0373                     _LCDinit:	
   721                           
   722                           ;lcd.c: 152: TRISA &=~((1<<0)|(1<<2)|(1<<1));
   723                           
   724                           ;incstack = 0
   725                           ; Regs used in _LCDinit: [wreg+status,2+status,0+pclath+cstack]
   726  0373  30F8               	movlw	248
   727  0374  1283               	bcf	3,5	;RP0=0, select bank0
   728  0375  0093               	movwf	??_LCDinit
   729  0376  0813               	movf	??_LCDinit,w
   730  0377  1683               	bsf	3,5	;RP0=1, select bank1
   731  0378  0585               	andwf	5,f	;volatile
   732                           
   733                           ;lcd.c: 153: PORTA&=~((1<<0)|(1<<2)|(1<<1));
   734  0379  30F8               	movlw	248
   735  037A  1283               	bcf	3,5	;RP0=0, select bank0
   736  037B  0093               	movwf	??_LCDinit
   737  037C  0813               	movf	??_LCDinit,w
   738  037D  0585               	andwf	5,f	;volatile
   739                           
   740                           ;lcd.c: 154: OutPin();
   741  037E  22C6               	fcall	_OutPin
   742                           
   743                           ;lcd.c: 156: char i=0;
   744  037F  1283               	bcf	3,5	;RP0=0, select bank0
   745  0380  0195               	clrf	LCDinit@i
   746  0381                     l936:	
   747                           ;lcd.c: 157: while (i!=3)
   748                           
   749  0381  3003               	movlw	3
   750  0382  0615               	xorwf	LCDinit@i,w
   751  0383  1903               	btfsc	3,2
   752  0384  2B99               	goto	l938
   753                           
   754                           ;lcd.c: 158: {
   755                           ;lcd.c: 159: PORTB|=(0<<7)|(0<<6)|(1<<5)|(1<<4);
   756  0385  3030               	movlw	48
   757  0386  0093               	movwf	??_LCDinit
   758  0387  0813               	movf	??_LCDinit,w
   759  0388  0486               	iorwf	6,f	;volatile
   760                           
   761                           ;lcd.c: 160: strob();
   762  0389  22DF               	fcall	_strob
   763                           
   764                           ;lcd.c: 161: _delay((unsigned long)((5)*(4000000/4000.0)));
   765  038A  3007               	movlw	7
   766  038B  1283               	bcf	3,5	;RP0=0, select bank0
   767  038C  0094               	movwf	??_LCDinit+1
   768  038D  307D               	movlw	125
   769  038E  0093               	movwf	??_LCDinit
   770  038F                     u357:	
   771  038F  0B93               	decfsz	??_LCDinit,f
   772  0390  2B8F               	goto	u357
   773  0391  0B94               	decfsz	??_LCDinit+1,f
   774  0392  2B8F               	goto	u357
   775                           
   776                           ;lcd.c: 162: i++;
   777  0393  3001               	movlw	1
   778  0394  1283               	bcf	3,5	;RP0=0, select bank0
   779  0395  0093               	movwf	??_LCDinit
   780  0396  0813               	movf	??_LCDinit,w
   781  0397  0795               	addwf	LCDinit@i,f
   782  0398  2B81               	goto	l936
   783  0399                     l938:	
   784                           
   785                           ;lcd.c: 163: }
   786                           ;lcd.c: 166: Busy_flag();
   787  0399  230B               	fcall	_Busy_flag
   788                           
   789                           ;lcd.c: 167: OutPin();
   790  039A  22C6               	fcall	_OutPin
   791                           
   792                           ;lcd.c: 168: PORTB|=(0<<7)|(0<<6)|(1<<5)|(0<<4);
   793  039B  1283               	bcf	3,5	;RP0=0, select bank0
   794  039C  1686               	bsf	6,5	;volatile
   795                           
   796                           ;lcd.c: 169: strob();
   797  039D  22DF               	fcall	_strob
   798                           
   799                           ;lcd.c: 170: LCDcommand(0b00101000);
   800  039E  3028               	movlw	40
   801  039F  22AB               	fcall	_LCDcommand
   802                           
   803                           ;lcd.c: 171: LCDcommand(0b1100);
   804  03A0  300C               	movlw	12
   805  03A1  22AB               	fcall	_LCDcommand
   806                           
   807                           ;lcd.c: 172: LCDcommand(0b110);
   808  03A2  3006               	movlw	6
   809  03A3  22AB               	fcall	_LCDcommand
   810                           
   811                           ;lcd.c: 173: LCDcommand(0b10);
   812  03A4  3002               	movlw	2
   813  03A5  22AB               	fcall	_LCDcommand
   814                           
   815                           ;lcd.c: 174: LCDcommand(0b1);
   816  03A6  3001               	movlw	1
   817  03A7  22AB               	fcall	_LCDcommand
   818  03A8  0008               	return
   819  03A9                     __end_of_LCDinit:	
   820                           
   821                           	psect	text6
   822  02AB                     __ptext6:	
   823 ;; *************** function _LCDcommand *****************
   824 ;; Defined at:
   825 ;;		line 86 in file "lcd.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;  i               1    wreg     unsigned char 
   828 ;; Auto vars:     Size  Location     Type
   829 ;;  i               1    6[BANK0 ] unsigned char 
   830 ;; Return value:  Size  Location     Type
   831 ;;                  1    wreg      void 
   832 ;; Registers used:
   833 ;;		wreg, status,2, status,0, pclath, cstack
   834 ;; Tracked objects:
   835 ;;		On entry : 0/0
   836 ;;		On exit  : 0/0
   837 ;;		Unchanged: 0/0
   838 ;; Data sizes:     COMMON   BANK0
   839 ;;      Params:         0       0
   840 ;;      Locals:         0       1
   841 ;;      Temps:          0       0
   842 ;;      Totals:         0       1
   843 ;;Total ram usage:        1 bytes
   844 ;; Hardware stack levels used:    1
   845 ;; Hardware stack levels required when called:    2
   846 ;; This function calls:
   847 ;;		_Busy_flag
   848 ;;		_Send_byte
   849 ;; This function is called by:
   850 ;;		_LCDinit
   851 ;;		_LCDGotoXY
   852 ;;		_LCDclear
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856                           
   857                           ;psect for function _LCDcommand
   858  02AB                     _LCDcommand:	
   859                           
   860                           ;incstack = 0
   861                           ; Regs used in _LCDcommand: [wreg+status,2+status,0+pclath+cstack]
   862                           ;LCDcommand@i stored from wreg
   863  02AB  1283               	bcf	3,5	;RP0=0, select bank0
   864  02AC  0092               	movwf	LCDcommand@i
   865                           
   866                           ;lcd.c: 88: Busy_flag();
   867  02AD  230B               	fcall	_Busy_flag
   868                           
   869                           ;lcd.c: 89: Send_byte(i);
   870  02AE  1283               	bcf	3,5	;RP0=0, select bank0
   871  02AF  0812               	movf	LCDcommand@i,w
   872  02B0  23A9               	fcall	_Send_byte
   873  02B1  0008               	return
   874  02B2                     __end_of_LCDcommand:	
   875                           
   876                           	psect	text7
   877  03A9                     __ptext7:	
   878 ;; *************** function _Send_byte *****************
   879 ;; Defined at:
   880 ;;		line 92 in file "lcd.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;  i               1    wreg     unsigned char 
   883 ;; Auto vars:     Size  Location     Type
   884 ;;  i               1    3[BANK0 ] unsigned char 
   885 ;;  lowb            1    5[BANK0 ] unsigned char 
   886 ;;  higb            1    4[BANK0 ] unsigned char 
   887 ;; Return value:  Size  Location     Type
   888 ;;                  1    wreg      void 
   889 ;; Registers used:
   890 ;;		wreg, status,2, status,0, pclath, cstack
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMMON   BANK0
   896 ;;      Params:         0       0
   897 ;;      Locals:         0       3
   898 ;;      Temps:          0       2
   899 ;;      Totals:         0       5
   900 ;;Total ram usage:        5 bytes
   901 ;; Hardware stack levels used:    1
   902 ;; Hardware stack levels required when called:    1
   903 ;; This function calls:
   904 ;;		_OutPin
   905 ;;		_strob
   906 ;; This function is called by:
   907 ;;		_LCDcommand
   908 ;;		_LCDdata
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912                           
   913                           ;psect for function _Send_byte
   914  03A9                     _Send_byte:	
   915                           
   916                           ;incstack = 0
   917                           ; Regs used in _Send_byte: [wreg+status,2+status,0+pclath+cstack]
   918                           ;Send_byte@i stored from wreg
   919  03A9  1283               	bcf	3,5	;RP0=0, select bank0
   920  03AA  008F               	movwf	Send_byte@i
   921                           
   922                           ;lcd.c: 94: OutPin();
   923  03AB  22C6               	fcall	_OutPin
   924                           
   925                           ;lcd.c: 95: char higb=((i&0b11110000)>>4);
   926  03AC  1283               	bcf	3,5	;RP0=0, select bank0
   927  03AD  080F               	movf	Send_byte@i,w
   928  03AE  008D               	movwf	??_Send_byte
   929  03AF  3004               	movlw	4
   930  03B0                     u235:	
   931  03B0  1003               	clrc
   932  03B1  0C8D               	rrf	??_Send_byte,f
   933  03B2  3EFF               	addlw	-1
   934  03B3  1D03               	skipz
   935  03B4  2BB0               	goto	u235
   936  03B5  080D               	movf	??_Send_byte,w
   937  03B6  390F               	andlw	15
   938  03B7  008E               	movwf	??_Send_byte+1
   939  03B8  080E               	movf	??_Send_byte+1,w
   940  03B9  0090               	movwf	Send_byte@higb
   941                           
   942                           ;lcd.c: 96: char lowb = (i&0b00001111);
   943  03BA  080F               	movf	Send_byte@i,w
   944  03BB  390F               	andlw	15
   945  03BC  008D               	movwf	??_Send_byte
   946  03BD  080D               	movf	??_Send_byte,w
   947  03BE  0091               	movwf	Send_byte@lowb
   948                           
   949                           ;lcd.c: 97: if ((higb&1)==1)
   950  03BF  1810               	btfsc	Send_byte@higb,0
   951                           
   952                           ;lcd.c: 98: {
   953                           ;lcd.c: 99: PORTB|=(1<<4);
   954  03C0  1606               	bsf	6,4	;volatile
   955                           
   956                           ;lcd.c: 100: }
   957                           ;lcd.c: 101: higb=higb>>1;
   958  03C1  0810               	movf	Send_byte@higb,w
   959  03C2  008D               	movwf	??_Send_byte
   960  03C3  1003               	clrc
   961  03C4  0C0D               	rrf	??_Send_byte,w
   962  03C5  008E               	movwf	??_Send_byte+1
   963  03C6  080E               	movf	??_Send_byte+1,w
   964  03C7  0090               	movwf	Send_byte@higb
   965                           
   966                           ;lcd.c: 102: if ((higb&1)==1)
   967  03C8  1810               	btfsc	Send_byte@higb,0
   968                           
   969                           ;lcd.c: 103: {
   970                           ;lcd.c: 104: PORTB|=(1<<5);
   971  03C9  1686               	bsf	6,5	;volatile
   972                           
   973                           ;lcd.c: 105: }
   974                           ;lcd.c: 106: higb=higb>>1;
   975  03CA  0810               	movf	Send_byte@higb,w
   976  03CB  008D               	movwf	??_Send_byte
   977  03CC  1003               	clrc
   978  03CD  0C0D               	rrf	??_Send_byte,w
   979  03CE  008E               	movwf	??_Send_byte+1
   980  03CF  080E               	movf	??_Send_byte+1,w
   981  03D0  0090               	movwf	Send_byte@higb
   982                           
   983                           ;lcd.c: 107: if ((higb&1)==1)
   984  03D1  1810               	btfsc	Send_byte@higb,0
   985                           
   986                           ;lcd.c: 108: {
   987                           ;lcd.c: 109: PORTB|=(1<<6);
   988  03D2  1706               	bsf	6,6	;volatile
   989                           
   990                           ;lcd.c: 110: }
   991                           ;lcd.c: 111: higb=higb>>1;
   992  03D3  0810               	movf	Send_byte@higb,w
   993  03D4  008D               	movwf	??_Send_byte
   994  03D5  1003               	clrc
   995  03D6  0C0D               	rrf	??_Send_byte,w
   996  03D7  008E               	movwf	??_Send_byte+1
   997  03D8  080E               	movf	??_Send_byte+1,w
   998  03D9  0090               	movwf	Send_byte@higb
   999                           
  1000                           ;lcd.c: 112: if ((higb&1)==1)
  1001  03DA  1810               	btfsc	Send_byte@higb,0
  1002                           
  1003                           ;lcd.c: 113: {
  1004                           ;lcd.c: 114: PORTB|=(1<<7);
  1005  03DB  1786               	bsf	6,7	;volatile
  1006                           
  1007                           ;lcd.c: 115: }
  1008                           ;lcd.c: 117: strob();
  1009  03DC  22DF               	fcall	_strob
  1010                           
  1011                           ;lcd.c: 118: OutPin();
  1012  03DD  22C6               	fcall	_OutPin
  1013                           
  1014                           ;lcd.c: 120: if ((lowb&1)==1)
  1015  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  1016  03DF  1811               	btfsc	Send_byte@lowb,0
  1017                           
  1018                           ;lcd.c: 121: {
  1019                           ;lcd.c: 122: PORTB|=(1<<4);
  1020  03E0  1606               	bsf	6,4	;volatile
  1021                           
  1022                           ;lcd.c: 123: }
  1023                           ;lcd.c: 124: lowb=lowb>>1;
  1024  03E1  0811               	movf	Send_byte@lowb,w
  1025  03E2  008D               	movwf	??_Send_byte
  1026  03E3  1003               	clrc
  1027  03E4  0C0D               	rrf	??_Send_byte,w
  1028  03E5  008E               	movwf	??_Send_byte+1
  1029  03E6  080E               	movf	??_Send_byte+1,w
  1030  03E7  0091               	movwf	Send_byte@lowb
  1031                           
  1032                           ;lcd.c: 125: if ((lowb&1)==1)
  1033  03E8  1811               	btfsc	Send_byte@lowb,0
  1034                           
  1035                           ;lcd.c: 126: {
  1036                           ;lcd.c: 127: PORTB|=(1<<5);
  1037  03E9  1686               	bsf	6,5	;volatile
  1038                           
  1039                           ;lcd.c: 128: }
  1040                           ;lcd.c: 129: lowb=lowb>>1;
  1041  03EA  0811               	movf	Send_byte@lowb,w
  1042  03EB  008D               	movwf	??_Send_byte
  1043  03EC  1003               	clrc
  1044  03ED  0C0D               	rrf	??_Send_byte,w
  1045  03EE  008E               	movwf	??_Send_byte+1
  1046  03EF  080E               	movf	??_Send_byte+1,w
  1047  03F0  0091               	movwf	Send_byte@lowb
  1048                           
  1049                           ;lcd.c: 130: if ((lowb&1)==1)
  1050  03F1  1811               	btfsc	Send_byte@lowb,0
  1051                           
  1052                           ;lcd.c: 131: {
  1053                           ;lcd.c: 132: PORTB|=(1<<6);
  1054  03F2  1706               	bsf	6,6	;volatile
  1055                           
  1056                           ;lcd.c: 133: }
  1057                           ;lcd.c: 134: lowb=lowb>>1;
  1058  03F3  0811               	movf	Send_byte@lowb,w
  1059  03F4  008D               	movwf	??_Send_byte
  1060  03F5  1003               	clrc
  1061  03F6  0C0D               	rrf	??_Send_byte,w
  1062  03F7  008E               	movwf	??_Send_byte+1
  1063  03F8  080E               	movf	??_Send_byte+1,w
  1064  03F9  0091               	movwf	Send_byte@lowb
  1065                           
  1066                           ;lcd.c: 135: if ((lowb&1)==1)
  1067  03FA  1811               	btfsc	Send_byte@lowb,0
  1068                           
  1069                           ;lcd.c: 136: {
  1070                           ;lcd.c: 137: PORTB|=(1<<7);
  1071  03FB  1786               	bsf	6,7	;volatile
  1072                           
  1073                           ;lcd.c: 138: }
  1074                           ;lcd.c: 140: strob();
  1075  03FC  22DF               	fcall	_strob
  1076  03FD  0008               	return
  1077  03FE                     __end_of_Send_byte:	
  1078                           
  1079                           	psect	text8
  1080  02C6                     __ptext8:	
  1081 ;; *************** function _OutPin *****************
  1082 ;; Defined at:
  1083 ;;		line 17 in file "lcd.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;		None
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;		None
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  1    wreg      void 
  1090 ;; Registers used:
  1091 ;;		wreg, status,2, status,0
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMMON   BANK0
  1097 ;;      Params:         0       0
  1098 ;;      Locals:         0       0
  1099 ;;      Temps:          0       1
  1100 ;;      Totals:         0       1
  1101 ;;Total ram usage:        1 bytes
  1102 ;; Hardware stack levels used:    1
  1103 ;; This function calls:
  1104 ;;		Nothing
  1105 ;; This function is called by:
  1106 ;;		_Send_byte
  1107 ;;		_LCDinit
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           
  1112                           ;psect for function _OutPin
  1113  02C6                     _OutPin:	
  1114                           
  1115                           ;lcd.c: 19: TRISB &=~((1<<7)|(1<<6)|(1<<5)|(1<<4));
  1116                           
  1117                           ;incstack = 0
  1118                           ; Regs used in _OutPin: [wreg+status,2+status,0]
  1119  02C6  300F               	movlw	15
  1120  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  1121  02C8  008C               	movwf	??_OutPin
  1122  02C9  080C               	movf	??_OutPin,w
  1123  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  1124  02CB  0586               	andwf	6,f	;volatile
  1125                           
  1126                           ;lcd.c: 20: PORTB&=~((1<<7)|(1<<6)|(1<<5)|(1<<4));
  1127  02CC  300F               	movlw	15
  1128  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  1129  02CE  008C               	movwf	??_OutPin
  1130  02CF  080C               	movf	??_OutPin,w
  1131  02D0  0586               	andwf	6,f	;volatile
  1132  02D1  0008               	return
  1133  02D2                     __end_of_OutPin:	
  1134                           
  1135                           	psect	text9
  1136  030B                     __ptext9:	
  1137 ;; *************** function _Busy_flag *****************
  1138 ;; Defined at:
  1139 ;;		line 60 in file "lcd.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;		None
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  i               1    5[BANK0 ] unsigned char 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  1    wreg      void 
  1146 ;; Registers used:
  1147 ;;		wreg, status,2, status,0, pclath, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMMON   BANK0
  1153 ;;      Params:         0       0
  1154 ;;      Locals:         0       1
  1155 ;;      Temps:          0       1
  1156 ;;      Totals:         0       2
  1157 ;;Total ram usage:        2 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; Hardware stack levels required when called:    1
  1160 ;; This function calls:
  1161 ;;		_check_Button
  1162 ;;		_strob
  1163 ;; This function is called by:
  1164 ;;		_LCDcommand
  1165 ;;		_LCDinit
  1166 ;;		_LCDdata
  1167 ;; This function uses a non-reentrant model
  1168 ;;
  1169                           
  1170                           
  1171                           ;psect for function _Busy_flag
  1172  030B                     _Busy_flag:	
  1173                           
  1174                           ;lcd.c: 62: char i=1;
  1175                           
  1176                           ;incstack = 0
  1177                           ; Regs used in _Busy_flag: [wreg+status,2+status,0+pclath+cstack]
  1178  030B  1283               	bcf	3,5	;RP0=0, select bank0
  1179  030C  0191               	clrf	Busy_flag@i
  1180  030D  0A91               	incf	Busy_flag@i,f
  1181  030E                     l832:	
  1182                           ;lcd.c: 64: while(i==1)
  1183                           
  1184  030E  1283               	bcf	3,5	;RP0=0, select bank0
  1185  030F  0311               	decf	Busy_flag@i,w
  1186  0310  1D03               	btfss	3,2
  1187  0311  2B25               	goto	l834
  1188                           
  1189                           ;lcd.c: 65: {
  1190                           ;lcd.c: 66: PORTA|=(1<<2);
  1191  0312  1505               	bsf	5,2	;volatile
  1192  0313  0000               	nop	;# 
  1193  0314  0000               	nop	;# 
  1194                           
  1195                           ;lcd.c: 69: if(check_Button()==1)
  1196  0315  234B               	fcall	_check_Button
  1197  0316  3A01               	xorlw	1
  1198                           
  1199                           ;lcd.c: 70: {
  1200                           ;lcd.c: 71: i=0;
  1201  0317  1283               	bcf	3,5	;RP0=0, select bank0
  1202  0318  1903               	btfsc	3,2
  1203  0319  0191               	clrf	Busy_flag@i
  1204                           
  1205                           ;lcd.c: 72: }
  1206                           ;lcd.c: 73: PORTA&=~(1<<2);
  1207  031A  30FB               	movlw	251
  1208  031B  1283               	bcf	3,5	;RP0=0, select bank0
  1209  031C  0090               	movwf	??_Busy_flag
  1210  031D  0810               	movf	??_Busy_flag,w
  1211  031E  0585               	andwf	5,f	;volatile
  1212  031F  0000               	nop	;# 
  1213  0320  0000               	nop	;# 
  1214                           
  1215                           ;lcd.c: 76: strob();
  1216  0321  22DF               	fcall	_strob
  1217  0322  0000               	nop	;# 
  1218  0323  0000               	nop	;# 
  1219  0324  2B0E               	goto	l832
  1220  0325                     l834:	
  1221                           
  1222                           ;lcd.c: 80: }
  1223                           ;lcd.c: 81: PORTA&=~(1<<1);
  1224  0325  30FD               	movlw	253
  1225  0326  0090               	movwf	??_Busy_flag
  1226  0327  0810               	movf	??_Busy_flag,w
  1227  0328  0585               	andwf	5,f	;volatile
  1228  0329  0008               	return
  1229  032A                     __end_of_Busy_flag:	
  1230                           
  1231                           	psect	text10
  1232  02DF                     __ptext10:	
  1233 ;; *************** function _strob *****************
  1234 ;; Defined at:
  1235 ;;		line 30 in file "lcd.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;		None
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;		None
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  1    wreg      void 
  1242 ;; Registers used:
  1243 ;;		wreg, status,2, status,0
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMMON   BANK0
  1249 ;;      Params:         0       0
  1250 ;;      Locals:         0       0
  1251 ;;      Temps:          0       1
  1252 ;;      Totals:         0       1
  1253 ;;Total ram usage:        1 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; This function calls:
  1256 ;;		Nothing
  1257 ;; This function is called by:
  1258 ;;		_Busy_flag
  1259 ;;		_Send_byte
  1260 ;;		_LCDinit
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264                           
  1265                           ;psect for function _strob
  1266  02DF                     _strob:	
  1267                           
  1268                           ;lcd.c: 32: PORTA|=(1<<2);
  1269                           
  1270                           ;incstack = 0
  1271                           ; Regs used in _strob: [wreg+status,2+status,0]
  1272  02DF  1283               	bcf	3,5	;RP0=0, select bank0
  1273  02E0  1505               	bsf	5,2	;volatile
  1274                           
  1275                           ;lcd.c: 33: _delay((unsigned long)((1)*(4000000/4000.0)));
  1276  02E1  30C7               	movlw	199
  1277  02E2  008C               	movwf	??_strob
  1278  02E3                     u367:	
  1279  02E3  2AE4               	nop2
  1280  02E4  0B8C               	decfsz	??_strob,f
  1281  02E5  2AE3               	goto	u367
  1282  02E6  2AE7               	nop2
  1283  02E7  2AE8               	nop2
  1284                           
  1285                           ;lcd.c: 34: PORTA&=~(1<<2);
  1286  02E8  30FB               	movlw	251
  1287  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  1288  02EA  008C               	movwf	??_strob
  1289  02EB  080C               	movf	??_strob,w
  1290  02EC  0585               	andwf	5,f	;volatile
  1291  02ED  0008               	return
  1292  02EE                     __end_of_strob:	
  1293                           
  1294                           	psect	text11
  1295  034B                     __ptext11:	
  1296 ;; *************** function _check_Button *****************
  1297 ;; Defined at:
  1298 ;;		line 37 in file "lcd.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;		None
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;  butcount        2    1[BANK0 ] unsigned int 
  1303 ;;  result          1    3[BANK0 ] unsigned char 
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      unsigned char 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, status,0
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0
  1313 ;;      Params:         0       0
  1314 ;;      Locals:         0       3
  1315 ;;      Temps:          0       1
  1316 ;;      Totals:         0       4
  1317 ;;Total ram usage:        4 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		_Busy_flag
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           
  1327                           ;psect for function _check_Button
  1328  034B                     _check_Button:	
  1329                           
  1330                           ;lcd.c: 39: unsigned char result=0;
  1331                           
  1332                           ;incstack = 0
  1333                           ; Regs used in _check_Button: [wreg+status,2+status,0]
  1334  034B  1283               	bcf	3,5	;RP0=0, select bank0
  1335  034C  018F               	clrf	check_Button@result
  1336                           
  1337                           ;lcd.c: 40: unsigned int butcount=0;
  1338  034D  018D               	clrf	check_Button@butcount
  1339  034E  018E               	clrf	check_Button@butcount+1
  1340                           
  1341                           ;lcd.c: 42: while(PORTB&(1<<RB7))
  1342  034F  2B61               	goto	l816
  1343  0350                     l812:	
  1344                           
  1345                           ;lcd.c: 43: {
  1346                           ;lcd.c: 44: if(butcount<10)
  1347  0350  3000               	movlw	0
  1348  0351  020E               	subwf	check_Button@butcount+1,w
  1349  0352  300A               	movlw	10
  1350  0353  1903               	skipnz
  1351  0354  020D               	subwf	check_Button@butcount,w
  1352  0355  1803               	skipnc
  1353  0356  2B5E               	goto	l58
  1354                           
  1355                           ;lcd.c: 45: {
  1356                           ;lcd.c: 46: butcount++;
  1357  0357  3001               	movlw	1
  1358  0358  078D               	addwf	check_Button@butcount,f
  1359  0359  1803               	skipnc
  1360  035A  0A8E               	incf	check_Button@butcount+1,f
  1361  035B  3000               	movlw	0
  1362  035C  078E               	addwf	check_Button@butcount+1,f
  1363                           
  1364                           ;lcd.c: 47: }
  1365  035D  2B61               	goto	l816
  1366  035E                     l58:	
  1367                           
  1368                           ;lcd.c: 48: else
  1369                           ;lcd.c: 49: {
  1370                           ;lcd.c: 50: result=1;
  1371  035E  018F               	clrf	check_Button@result
  1372  035F  0A8F               	incf	check_Button@result,f
  1373                           
  1374                           ;lcd.c: 51: break;
  1375  0360  2B71               	goto	l818
  1376  0361                     l816:	
  1377  0361  3001               	movlw	1
  1378  0362  008C               	movwf	??_check_Button
  1379  0363  3000               	movlw	0
  1380  0364  1B86               	btfsc	6,7	;volatile
  1381  0365  3001               	movlw	1
  1382  0366  3E01               	addlw	1
  1383  0367  2B6A               	goto	u194
  1384  0368                     u195:	
  1385  0368  1003               	clrc
  1386  0369  0D8C               	rlf	??_check_Button,f
  1387  036A                     u194:	
  1388  036A  3EFF               	addlw	-1
  1389  036B  1D03               	skipz
  1390  036C  2B68               	goto	u195
  1391  036D  080C               	movf	??_check_Button,w
  1392  036E  0506               	andwf	6,w	;volatile
  1393  036F  1D03               	btfss	3,2
  1394  0370  2B50               	goto	l812
  1395  0371                     l818:	
  1396                           
  1397                           ;lcd.c: 52: }
  1398                           ;lcd.c: 53: }
  1399                           ;lcd.c: 55: return result;
  1400  0371  080F               	movf	check_Button@result,w
  1401  0372  0008               	return
  1402  0373                     __end_of_check_Button:	
  1403  004E                     btemp	set	78	;btemp
  1404  004E                     wtemp0	set	78


Data Sizes:
    Strings     14
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     16      16

Pointer List with Targets:

    sp__utoa	PTR unsigned char  size(2) Largest target is 256
		 -> RAM(DATA[256]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 256
		 -> RAM(DATA[256]), 

    LCDstringXY@i	PTR unsigned char  size(2) Largest target is 40
		 -> LCDputsIntGotoXY@str(BANK0[40]), STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_LCDstringXY
    _LCDstringXY->_LCDGotoXY
    _LCDdata->_Busy_flag
    _LCDdata->_Send_byte
    _LCDGotoXY->_LCDcommand
    _LCDinit->_LCDcommand
    _LCDcommand->_Busy_flag
    _LCDcommand->_Send_byte
    _Send_byte->_OutPin
    _Send_byte->_strob
    _Busy_flag->_check_Button

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2130
                            _LCDinit
                        _LCDstringXY
                          _Port_Init
 ---------------------------------------------------------------------------------
 (1) _Port_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDstringXY                                          5     1      4    1580
                                             11 BANK0      5     1      4
                          _LCDGotoXY
                            _LCDdata
 ---------------------------------------------------------------------------------
 (2) _LCDdata                                              2     2      0     454
                                              6 BANK0      2     2      0
                          _Busy_flag
                          _Send_byte
 ---------------------------------------------------------------------------------
 (2) _LCDGotoXY                                            4     3      1     719
                                              7 BANK0      4     3      1
                         _LCDcommand
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              3     3      0     550
                                              7 BANK0      3     3      0
                          _Busy_flag
                         _LCDcommand
                             _OutPin
                              _strob
 ---------------------------------------------------------------------------------
 (3) _LCDcommand                                           1     1      0     454
                                              6 BANK0      1     1      0
                          _Busy_flag
                          _Send_byte
 ---------------------------------------------------------------------------------
 (3) _Send_byte                                            5     5      0     360
                                              1 BANK0      5     5      0
                             _OutPin
                              _strob
 ---------------------------------------------------------------------------------
 (4) _OutPin                                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Busy_flag                                            2     2      0      72
                                              4 BANK0      2     2      0
                       _check_Button
                              _strob
 ---------------------------------------------------------------------------------
 (4) _strob                                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _check_Button                                         4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDinit
     _Busy_flag
       _check_Button
       _strob
     _LCDcommand
       _Busy_flag
         _check_Button
         _strob
       _Send_byte
         _OutPin
         _strob
     _OutPin
     _strob
   _LCDstringXY
     _LCDGotoXY
       _LCDcommand
         _Busy_flag
           _check_Button
           _strob
         _Send_byte
           _OutPin
           _strob
     _LCDdata
       _Busy_flag
         _check_Button
         _strob
       _Send_byte
         _OutPin
         _strob
   _Port_Init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42     10      10       3       24.2%
ABS                  0      0       0       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Jan 14 19:51:07 2018

   __end_of_check_Button 0373     check_Button@butcount 000D                        pc 0002  
            __CFG_CP$OFF 0000                       l20 02C5                       l58 035E  
                     fsr 0004                      l812 0350                      l900 032D  
                    l902 032E                      l910 033C                      l816 0361  
                    l832 030E                      l904 0331                      l912 0347  
                    l818 0371                      l834 0325                      l906 0334  
                    l908 0337                      l936 0381                      l938 0399  
                    l948 02F5                      _RB7 0037                      u235 03B0  
                    u194 036A                      u195 0368                      u357 038F  
                    u367 02E3                      fsr0 0004                      indf 0000  
           __CFG_FOSC$HS 0000              ?_LCDcommand 000C                     S1004 001F  
        __end_of_LCDdata 02DF          __end_of_LCDinit 03A9                     STR_1 0011  
                   _main 02BB       __size_of_LCDGotoXY 0021                     btemp 004E  
             Busy_flag@i 0011                     start 0000                    ?_main 000C  
          __CFG_WDTE$OFF 0000                    _PORTA 0005                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0086            __CFG_PWRTE$ON 0000  
           ?_LCDstringXY 0017                    _strob 02DF                    pclath 000A  
                  status 0003                    wtemp0 004E          __initialization 03FE  
    __size_of_LCDcommand 0007             __end_of_main 02C6               Send_byte@i 000F  
                 ??_main 0000        __end_of_LCDGotoXY 034B                ??_LCDdata 0012  
            LCDcommand@i 0012                ??_LCDinit 0013                   ?_strob 000C  
     __size_of_Busy_flag 001F            Send_byte@higb 0010    __size_of_check_Button 0028  
          Send_byte@lowb 0011                   _OutPin 02C6       __size_of_Send_byte 0055  
     __size_of_Port_Init 0009             _check_Button 034B  __end_of__initialization 03FE  
         __pcstackCOMMON 0000            __end_of_strob 02EE        __end_of_Busy_flag 032A  
           ??_LCDcommand 0000                  ??_strob 000C        __end_of_Send_byte 03FE  
   __size_of_LCDstringXY 001D        __end_of_Port_Init 02BB               __pmaintext 02BB  
                ?_OutPin 000C       __end_of_LCDcommand 02B2                  _LCDdata 02D2  
                _LCDinit 0373               __stringtab 0001          __size_of_OutPin 000C  
       LCDGotoXY@Address 0015                  __ptext1 02B2                  __ptext2 02EE  
                __ptext3 02D2                  __ptext4 032A                  __ptext5 0373  
                __ptext6 02AB                  __ptext7 03A9                  __ptext8 02C6  
                __ptext9 030B                _LCDGotoXY 032A     end_of_initialization 03FE  
           LCDstringXY@i 0017             LCDstringXY@x 0019             LCDstringXY@y 001A  
             ?_LCDGotoXY 0013       check_Button@result 000F               LCDGotoXY@x 0016  
             LCDGotoXY@y 0013           __end_of_OutPin 02D2      start_initialization 03FE  
              _Busy_flag 030B                _Send_byte 03A9                 ??_OutPin 000C  
              _Port_Init 02B2                 ?_LCDdata 000C                 ?_LCDinit 000C  
              ___latbits 0000            __pcstackBANK0 000C              ??_LCDGotoXY 0014  
             ?_Busy_flag 000C            ??_LCDstringXY 001B                 LCDdata@i 0013  
               LCDinit@i 0015               ?_Send_byte 000C               ?_Port_Init 000C  
              __pstrings 0001                __pswtext1 001F           __size_of_strob 000F  
    __end_of_LCDstringXY 030B              __stringbase 0010         __size_of_LCDdata 000D  
       __size_of_LCDinit 0036              ??_Busy_flag 0010            ?_check_Button 000C  
            ??_Send_byte 000D              ??_Port_Init 0000       __end_of__stringtab 0011  
         ??_check_Button 000C                 __ptext10 02DF                 __ptext11 034B  
            _LCDstringXY 02EE            __size_of_main 000B               _LCDcommand 02AB  
              stringcode 000B                 stringdir 000B                 stringtab 0001  
