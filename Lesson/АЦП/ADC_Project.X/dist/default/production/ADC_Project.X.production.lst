

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Feb 24 21:35:02 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
     8                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 1.44
    49                           ; Generated 14/09/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16F877 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0008                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000D                     	;# 
    96  000E                     	;# 
    97  000E                     	;# 
    98  000F                     	;# 
    99  0010                     	;# 
   100  0011                     	;# 
   101  0012                     	;# 
   102  0013                     	;# 
   103  0014                     	;# 
   104  0015                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001B                     	;# 
   112  001B                     	;# 
   113  001C                     	;# 
   114  001D                     	;# 
   115  001E                     	;# 
   116  001F                     	;# 
   117  0081                     	;# 
   118  0085                     	;# 
   119  0086                     	;# 
   120  0087                     	;# 
   121  0088                     	;# 
   122  0089                     	;# 
   123  008C                     	;# 
   124  008D                     	;# 
   125  008E                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0008                     	;# 
   149  0009                     	;# 
   150  000A                     	;# 
   151  000B                     	;# 
   152  000C                     	;# 
   153  000D                     	;# 
   154  000E                     	;# 
   155  000E                     	;# 
   156  000F                     	;# 
   157  0010                     	;# 
   158  0011                     	;# 
   159  0012                     	;# 
   160  0013                     	;# 
   161  0014                     	;# 
   162  0015                     	;# 
   163  0015                     	;# 
   164  0016                     	;# 
   165  0017                     	;# 
   166  0018                     	;# 
   167  0019                     	;# 
   168  001A                     	;# 
   169  001B                     	;# 
   170  001B                     	;# 
   171  001C                     	;# 
   172  001D                     	;# 
   173  001E                     	;# 
   174  001F                     	;# 
   175  0081                     	;# 
   176  0085                     	;# 
   177  0086                     	;# 
   178  0087                     	;# 
   179  0088                     	;# 
   180  0089                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0093                     	;# 
   187  0094                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009E                     	;# 
   191  009F                     	;# 
   192  010C                     	;# 
   193  010D                     	;# 
   194  010E                     	;# 
   195  010F                     	;# 
   196  018C                     	;# 
   197  018D                     	;# 
   198  0000                     	;# 
   199  0001                     	;# 
   200  0002                     	;# 
   201  0003                     	;# 
   202  0004                     	;# 
   203  0005                     	;# 
   204  0006                     	;# 
   205  0007                     	;# 
   206  0008                     	;# 
   207  0009                     	;# 
   208  000A                     	;# 
   209  000B                     	;# 
   210  000C                     	;# 
   211  000D                     	;# 
   212  000E                     	;# 
   213  000E                     	;# 
   214  000F                     	;# 
   215  0010                     	;# 
   216  0011                     	;# 
   217  0012                     	;# 
   218  0013                     	;# 
   219  0014                     	;# 
   220  0015                     	;# 
   221  0015                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001B                     	;# 
   228  001B                     	;# 
   229  001C                     	;# 
   230  001D                     	;# 
   231  001E                     	;# 
   232  001F                     	;# 
   233  0081                     	;# 
   234  0085                     	;# 
   235  0086                     	;# 
   236  0087                     	;# 
   237  0088                     	;# 
   238  0089                     	;# 
   239  008C                     	;# 
   240  008D                     	;# 
   241  008E                     	;# 
   242  0091                     	;# 
   243  0092                     	;# 
   244  0093                     	;# 
   245  0094                     	;# 
   246  0098                     	;# 
   247  0099                     	;# 
   248  009E                     	;# 
   249  009F                     	;# 
   250  010C                     	;# 
   251  010D                     	;# 
   252  010E                     	;# 
   253  010F                     	;# 
   254  018C                     	;# 
   255  018D                     	;# 
   256                           
   257                           	psect	strings
   258  1000                     __pstrings:	
   259  1000                     stringtab:	
   260  1000                     __stringtab:	
   261                           
   262                           ;	String table - string pointers are 1 byte each
   263  1000  1BFF               	btfsc	btemp+1,7
   264  1001  280A               	ljmp	stringcode
   265  1002  1383               	bcf	3,7
   266  1003  187F               	btfsc	btemp+1,0
   267  1004  1783               	bsf	3,7
   268  1005  0800               	movf	0,w
   269  1006  0A84               	incf	4,f
   270  1007  1903               	skipnz
   271  1008  0AFF               	incf	btemp+1,f
   272  1009  0008               	return
   273  100A                     stringcode:	
   274  100A                     stringdir:	
   275  100A  3010               	movlw	high stringdir
   276  100B  008A               	movwf	10
   277  100C  0804               	movf	4,w
   278  100D  0A84               	incf	4,f
   279  100E  0782               	addwf	2,f
   280  100F                     __stringbase:	
   281  100F  3400               	retlw	0
   282  1010                     __end_of__stringtab:	
   283  1010                     _dpowers:	
   284  1010  3401               	retlw	1
   285  1011  3400               	retlw	0
   286  1012  3400               	retlw	0
   287  1013  3400               	retlw	0
   288  1014  340A               	retlw	10
   289  1015  3400               	retlw	0
   290  1016  3400               	retlw	0
   291  1017  3400               	retlw	0
   292  1018  3464               	retlw	100
   293  1019  3400               	retlw	0
   294  101A  3400               	retlw	0
   295  101B  3400               	retlw	0
   296  101C  34E8               	retlw	232
   297  101D  3403               	retlw	3
   298  101E  3400               	retlw	0
   299  101F  3400               	retlw	0
   300  1020  3410               	retlw	16
   301  1021  3427               	retlw	39
   302  1022  3400               	retlw	0
   303  1023  3400               	retlw	0
   304  1024  34A0               	retlw	160
   305  1025  3486               	retlw	134
   306  1026  3401               	retlw	1
   307  1027  3400               	retlw	0
   308  1028  3440               	retlw	64
   309  1029  3442               	retlw	66
   310  102A  340F               	retlw	15
   311  102B  3400               	retlw	0
   312  102C  3480               	retlw	128
   313  102D  3496               	retlw	150
   314  102E  3498               	retlw	152
   315  102F  3400               	retlw	0
   316  1030  3400               	retlw	0
   317  1031  34E1               	retlw	225
   318  1032  34F5               	retlw	245
   319  1033  3405               	retlw	5
   320  1034  3400               	retlw	0
   321  1035  34CA               	retlw	202
   322  1036  349A               	retlw	154
   323  1037  343B               	retlw	59
   324  1038                     __end_of_dpowers:	
   325  1038                     __powers_:	
   326  1038  3400               	retlw	0
   327  1039  3480               	retlw	128
   328  103A  343F               	retlw	63
   329  103B  3400               	retlw	0
   330  103C  3420               	retlw	32
   331  103D  3441               	retlw	65
   332  103E  3400               	retlw	0
   333  103F  34C8               	retlw	200
   334  1040  3442               	retlw	66
   335  1041  3400               	retlw	0
   336  1042  347A               	retlw	122
   337  1043  3444               	retlw	68
   338  1044  3440               	retlw	64
   339  1045  341C               	retlw	28
   340  1046  3446               	retlw	70
   341  1047  3450               	retlw	80
   342  1048  34C3               	retlw	195
   343  1049  3447               	retlw	71
   344  104A  3424               	retlw	36
   345  104B  3474               	retlw	116
   346  104C  3449               	retlw	73
   347  104D  3497               	retlw	151
   348  104E  3418               	retlw	24
   349  104F  344B               	retlw	75
   350  1050  34BC               	retlw	188
   351  1051  34BE               	retlw	190
   352  1052  344C               	retlw	76
   353  1053  346B               	retlw	107
   354  1054  346E               	retlw	110
   355  1055  344E               	retlw	78
   356  1056  3403               	retlw	3
   357  1057  3415               	retlw	21
   358  1058  3450               	retlw	80
   359  1059  3479               	retlw	121
   360  105A  34AD               	retlw	173
   361  105B  3460               	retlw	96
   362  105C  34F3               	retlw	243
   363  105D  3449               	retlw	73
   364  105E  3471               	retlw	113
   365  105F                     __end_of__powers_:	
   366  105F                     __npowers_:	
   367  105F  3400               	retlw	0
   368  1060  3480               	retlw	128
   369  1061  343F               	retlw	63
   370  1062  34CD               	retlw	205
   371  1063  34CC               	retlw	204
   372  1064  343D               	retlw	61
   373  1065  34D7               	retlw	215
   374  1066  3423               	retlw	35
   375  1067  343C               	retlw	60
   376  1068  3412               	retlw	18
   377  1069  3483               	retlw	131
   378  106A  343A               	retlw	58
   379  106B  34B7               	retlw	183
   380  106C  34D1               	retlw	209
   381  106D  3438               	retlw	56
   382  106E  34C6               	retlw	198
   383  106F  3427               	retlw	39
   384  1070  3437               	retlw	55
   385  1071  3438               	retlw	56
   386  1072  3486               	retlw	134
   387  1073  3435               	retlw	53
   388  1074  34C0               	retlw	192
   389  1075  34D6               	retlw	214
   390  1076  3433               	retlw	51
   391  1077  34CC               	retlw	204
   392  1078  342B               	retlw	43
   393  1079  3432               	retlw	50
   394  107A  3470               	retlw	112
   395  107B  3489               	retlw	137
   396  107C  3430               	retlw	48
   397  107D  34E7               	retlw	231
   398  107E  34DB               	retlw	219
   399  107F  342E               	retlw	46
   400  1080  34E5               	retlw	229
   401  1081  343C               	retlw	60
   402  1082  341E               	retlw	30
   403  1083  3442               	retlw	66
   404  1084  34A2               	retlw	162
   405  1085  340D               	retlw	13
   406  1086                     __end_of__npowers_:	
   407  001E                     _ADRESH	set	30
   408  001F                     _ADCON0	set	31
   409  0006                     _PORTBbits	set	6
   410  0007                     _PORTCbits	set	7
   411  00FA                     _GO_nDONE	set	250
   412  00F8                     _ADON	set	248
   413  00FF                     _ADCS1	set	255
   414  00FE                     _ADCS0	set	254
   415  009E                     _ADRESL	set	158
   416  0087                     _TRISC	set	135
   417  0086                     _TRISB	set	134
   418  04FF                     _ADFM	set	1279
   419  04FB                     _PCFG3	set	1275
   420  04FA                     _PCFG2	set	1274
   421  04F9                     _PCFG1	set	1273
   422  04F8                     _PCFG0	set	1272
   423  1086                     STR_2:	
   424  1086  3464               	retlw	100	;'d'
   425  1087  3461               	retlw	97	;'a'
   426  1088  3474               	retlw	116	;'t'
   427  1089  3461               	retlw	97	;'a'
   428  108A  343D               	retlw	61	;'='
   429  108B  3420               	retlw	32	;' '
   430  108C  3425               	retlw	37	;'%'
   431  108D  3464               	retlw	100	;'d'
   432  108E  3425               	retlw	37	;'%'
   433  108F  3464               	retlw	100	;'d'
   434  1090  3425               	retlw	37	;'%'
   435  1091  3464               	retlw	100	;'d'
   436  1092  3425               	retlw	37	;'%'
   437  1093  3464               	retlw	100	;'d'
   438  1094  3400               	retlw	0
   439  1095                     STR_3:	
   440  1095  3476               	retlw	118	;'v'
   441  1096  346F               	retlw	111	;'o'
   442  1097  346C               	retlw	108	;'l'
   443  1098  3474               	retlw	116	;'t'
   444  1099  3461               	retlw	97	;'a'
   445  109A  3467               	retlw	103	;'g'
   446  109B  3465               	retlw	101	;'e'
   447  109C  343D               	retlw	61	;'='
   448  109D  3420               	retlw	32	;' '
   449  109E  3425               	retlw	37	;'%'
   450  109F  342E               	retlw	46	;'.'
   451  10A0  3432               	retlw	50	;'2'
   452  10A1  3466               	retlw	102	;'f'
   453  10A2  3400               	retlw	0
   454  10A3                     STR_1:	
   455  10A3  3448               	retlw	72	;'H'
   456  10A4  3465               	retlw	101	;'e'
   457  10A5  346C               	retlw	108	;'l'
   458  10A6  346C               	retlw	108	;'l'
   459  10A7  346F               	retlw	111	;'o'
   460  10A8  3420               	retlw	32	;' '
   461  10A9  3477               	retlw	119	;'w'
   462  10AA  346F               	retlw	111	;'o'
   463  10AB  3472               	retlw	114	;'r'
   464  10AC  346C               	retlw	108	;'l'
   465  10AD  3464               	retlw	100	;'d'
   466  10AE  3400               	retlw	0
   467                           
   468                           ; #config settings
   469  0000                     
   470                           	psect	cinit
   471  07F7                     start_initialization:	
   472  07F7                     __initialization:	
   473                           
   474                           ; Clear objects allocated to BANK1
   475  07F7  1683               	bsf	3,5	;RP0=1, select bank1
   476  07F8  1303               	bcf	3,6	;RP1=0, select bank1
   477  07F9  01BB               	clrf	__pbssBANK1& (0+127)
   478  07FA  01BC               	clrf	(__pbssBANK1+1)& (0+127)
   479  07FB  01BD               	clrf	(__pbssBANK1+2)& (0+127)
   480  07FC                     end_of_initialization:	
   481                           ;End of C runtime variable initialization code
   482                           
   483  07FC                     __end_of__initialization:	
   484  07FC  0183               	clrf	3
   485  07FD  120A  158A  2970   	ljmp	_main	;jump to C main() function
   486                           
   487                           	psect	bssBANK1
   488  00BB                     __pbssBANK1:	
   489  00BB                     _Vref:	
   490  00BB                     	ds	3
   491                           
   492                           	psect	cstackBANK3
   493  0190                     __pcstackBANK3:	
   494  0190                     main@bufferVoltage:	
   495                           
   496                           ; 80 bytes @ 0x0
   497  0190                     	ds	80
   498  01E0                     _main$657:	
   499                           
   500                           ; 2 bytes @ 0x50
   501  01E0                     	ds	2
   502  01E2                     _main$658:	
   503                           
   504                           ; 2 bytes @ 0x52
   505  01E2                     	ds	2
   506  01E4                     main@data:	
   507                           
   508                           ; 2 bytes @ 0x54
   509  01E4                     	ds	2
   510                           
   511                           	psect	cstackBANK2
   512  0110                     __pcstackBANK2:	
   513  0110                     main@buffer:	
   514                           
   515                           ; 20 bytes @ 0x0
   516  0110                     	ds	20
   517                           
   518                           	psect	cstackBANK1
   519  00A0                     __pcstackBANK1:	
   520  00A0                     _sprintf$662:	
   521                           
   522                           ; 3 bytes @ 0x0
   523  00A0                     	ds	3
   524  00A3                     sprintf@ap:	
   525                           
   526                           ; 1 bytes @ 0x3
   527  00A3                     	ds	1
   528  00A4                     sprintf@flag:	
   529                           
   530                           ; 2 bytes @ 0x4
   531  00A4                     	ds	2
   532  00A6                     sprintf@exp:	
   533                           
   534                           ; 2 bytes @ 0x6
   535  00A6                     	ds	2
   536  00A8                     sprintf@tmpval:	
   537                           
   538                           ; 4 bytes @ 0x8
   539  00A8                     	ds	4
   540  00AC                     sprintf@val:	
   541                           
   542                           ; 4 bytes @ 0xC
   543  00AC                     	ds	4
   544  00B0                     sprintf@sp:	
   545                           
   546                           ; 1 bytes @ 0x10
   547  00B0                     	ds	1
   548  00B1                     sprintf@prec:	
   549                           
   550                           ; 2 bytes @ 0x11
   551  00B1                     	ds	2
   552  00B3                     sprintf@fval:	
   553                           
   554                           ; 3 bytes @ 0x13
   555  00B3                     	ds	3
   556  00B6                     sprintf@c:	
   557                           
   558                           ; 1 bytes @ 0x16
   559  00B6                     	ds	1
   560  00B7                     _main$655:	
   561                           
   562                           ; 2 bytes @ 0x17
   563  00B7                     	ds	2
   564  00B9                     _main$656:	
   565                           
   566                           ; 2 bytes @ 0x19
   567  00B9                     	ds	2
   568                           
   569                           	psect	cstackCOMMON
   570  0070                     __pcstackCOMMON:	
   571  0070                     ?_isdigit:	
   572  0070                     ?___ftge:	
   573                           ; 1 bit 
   574                           
   575  0070                     ?_lcd_init:	
   576                           ; 1 bit 
   577                           
   578  0070                     ?_ADC_Init:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0070                     ?_lcd_clear:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0070                     ??_isdigit:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0070                     ?_main:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0070                     ?_lcd_out:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     ??_lcd_out:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0070                     ?_lcd_com:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0070                     ?_lcd_char_out:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0070                     ?_ADC_Read:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0070                     ?___wmul:	
   606                           ; 2 bytes @ 0x0
   607                           
   608  0070                     ?___awdiv:	
   609                           ; 2 bytes @ 0x0
   610                           
   611  0070                     ?___ftpack:	
   612                           ; 2 bytes @ 0x0
   613                           
   614  0070                     ?___ftneg:	
   615                           ; 3 bytes @ 0x0
   616                           
   617  0070                     ?__tdiv_to_l_:	
   618                           ; 3 bytes @ 0x0
   619                           
   620  0070                     ?__div_to_l_:	
   621                           ; 4 bytes @ 0x0
   622                           
   623  0070                     ?___lldiv:	
   624                           ; 4 bytes @ 0x0
   625                           
   626  0070                     lcd_out@data:	
   627                           ; 4 bytes @ 0x0
   628                           
   629  0070                     _isdigit$438:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0070                     ___wmul@multiplier:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0070                     ___awdiv@divisor:	
   636                           ; 2 bytes @ 0x0
   637                           
   638  0070                     ADC_Init@Uref:	
   639                           ; 2 bytes @ 0x0
   640                           
   641  0070                     __div_to_l_@f1:	
   642                           ; 3 bytes @ 0x0
   643                           
   644  0070                     ___ftpack@arg:	
   645                           ; 3 bytes @ 0x0
   646                           
   647  0070                     __tdiv_to_l_@f1:	
   648                           ; 3 bytes @ 0x0
   649                           
   650  0070                     ___ftge@ff1:	
   651                           ; 3 bytes @ 0x0
   652                           
   653  0070                     ___ftneg@f1:	
   654                           ; 3 bytes @ 0x0
   655                           
   656  0070                     ___lldiv@divisor:	
   657                           ; 3 bytes @ 0x0
   658                           
   659                           
   660                           ; 4 bytes @ 0x0
   661  0070                     	ds	1
   662  0071                     ??_lcd_com:	
   663  0071                     ??_lcd_char_out:	
   664                           ; 1 bytes @ 0x1
   665                           
   666  0071                     isdigit@c:	
   667                           ; 1 bytes @ 0x1
   668                           
   669                           
   670                           ; 1 bytes @ 0x1
   671  0071                     	ds	1
   672  0072                     ??_ADC_Read:	
   673  0072                     ___wmul@multiplicand:	
   674                           ; 1 bytes @ 0x2
   675                           
   676  0072                     ___awdiv@dividend:	
   677                           ; 2 bytes @ 0x2
   678                           
   679                           
   680                           ; 2 bytes @ 0x2
   681  0072                     	ds	1
   682  0073                     ??_ADC_Init:	
   683  0073                     ??___ftneg:	
   684                           ; 1 bytes @ 0x3
   685                           
   686  0073                     lcd_com@com:	
   687                           ; 1 bytes @ 0x3
   688                           
   689  0073                     lcd_char_out@data:	
   690                           ; 1 bytes @ 0x3
   691                           
   692  0073                     ___ftpack@exp:	
   693                           ; 1 bytes @ 0x3
   694                           
   695  0073                     __div_to_l_@f2:	
   696                           ; 1 bytes @ 0x3
   697                           
   698  0073                     __tdiv_to_l_@f2:	
   699                           ; 3 bytes @ 0x3
   700                           
   701  0073                     ___ftge@ff2:	
   702                           ; 3 bytes @ 0x3
   703                           
   704                           
   705                           ; 3 bytes @ 0x3
   706  0073                     	ds	1
   707  0074                     ??_lcd_init:	
   708  0074                     ??_lcd_clear:	
   709                           ; 1 bytes @ 0x4
   710                           
   711  0074                     ?_lcd_printString:	
   712                           ; 1 bytes @ 0x4
   713                           
   714  0074                     ?_lcd_gotoxy:	
   715                           ; 1 bytes @ 0x4
   716                           
   717  0074                     ??___wmul:	
   718                           ; 1 bytes @ 0x4
   719                           
   720  0074                     ??___awdiv:	
   721                           ; 1 bytes @ 0x4
   722                           
   723  0074                     lcd_gotoxy@y:	
   724                           ; 1 bytes @ 0x4
   725                           
   726  0074                     ADC_Read@channel:	
   727                           ; 1 bytes @ 0x4
   728                           
   729  0074                     ___ftpack@sign:	
   730                           ; 1 bytes @ 0x4
   731                           
   732  0074                     lcd_printString@str:	
   733                           ; 1 bytes @ 0x4
   734                           
   735  0074                     ___wmul@product:	
   736                           ; 2 bytes @ 0x4
   737                           
   738  0074                     ___lldiv@dividend:	
   739                           ; 2 bytes @ 0x4
   740                           
   741                           
   742                           ; 4 bytes @ 0x4
   743  0074                     	ds	1
   744  0075                     ??___ftpack:	
   745  0075                     ??_lcd_gotoxy:	
   746                           ; 1 bytes @ 0x5
   747                           
   748  0075                     ___awdiv@counter:	
   749                           ; 1 bytes @ 0x5
   750                           
   751                           
   752                           ; 1 bytes @ 0x5
   753  0075                     	ds	1
   754  0076                     ??__tdiv_to_l_:	
   755  0076                     ??__div_to_l_:	
   756                           ; 1 bytes @ 0x6
   757                           
   758  0076                     ??_lcd_printString:	
   759                           ; 1 bytes @ 0x6
   760                           
   761  0076                     ??___ftge:	
   762                           ; 1 bytes @ 0x6
   763                           
   764  0076                     lcd_init@lcd:	
   765                           ; 1 bytes @ 0x6
   766                           
   767  0076                     lcd_gotoxy@x:	
   768                           ; 1 bytes @ 0x6
   769                           
   770  0076                     ___awdiv@sign:	
   771                           ; 1 bytes @ 0x6
   772                           
   773                           
   774                           ; 1 bytes @ 0x6
   775  0076                     	ds	1
   776  0077                     lcd_gotoxy@temp:	
   777  0077                     ___awdiv@quotient:	
   778                           ; 1 bytes @ 0x7
   779                           
   780                           
   781                           ; 2 bytes @ 0x7
   782  0077                     	ds	1
   783  0078                     ?_lcd_printStringXY:	
   784  0078                     ??___lldiv:	
   785                           ; 1 bytes @ 0x8
   786                           
   787  0078                     ?___lltoft:	
   788                           ; 1 bytes @ 0x8
   789                           
   790  0078                     ?___lwtoft:	
   791                           ; 3 bytes @ 0x8
   792                           
   793  0078                     lcd_printStringXY@str:	
   794                           ; 3 bytes @ 0x8
   795                           
   796  0078                     ___lwtoft@c:	
   797                           ; 2 bytes @ 0x8
   798                           
   799  0078                     ___lltoft@c:	
   800                           ; 2 bytes @ 0x8
   801                           
   802                           
   803                           ; 4 bytes @ 0x8
   804  0078                     	ds	1
   805  0079                     ?___awmod:	
   806  0079                     ___awmod@divisor:	
   807                           ; 2 bytes @ 0x9
   808                           
   809  0079                     ___lldiv@quotient:	
   810                           ; 2 bytes @ 0x9
   811                           
   812                           
   813                           ; 4 bytes @ 0x9
   814  0079                     	ds	1
   815  007A                     lcd_printStringXY@x:	
   816                           
   817                           ; 1 bytes @ 0xA
   818  007A                     	ds	1
   819  007B                     ??___lwtoft:	
   820  007B                     lcd_printStringXY@y:	
   821                           ; 1 bytes @ 0xB
   822                           
   823  007B                     ___awmod@dividend:	
   824                           ; 1 bytes @ 0xB
   825                           
   826                           
   827                           ; 2 bytes @ 0xB
   828  007B                     	ds	1
   829  007C                     ??_lcd_printStringXY:	
   830  007C                     ??___lltoft:	
   831                           ; 1 bytes @ 0xC
   832                           
   833                           
   834                           ; 1 bytes @ 0xC
   835  007C                     	ds	1
   836  007D                     ??___awmod:	
   837  007D                     ___lldiv@counter:	
   838                           ; 1 bytes @ 0xD
   839                           
   840  007D                     ___lltoft@exp:	
   841                           ; 1 bytes @ 0xD
   842                           
   843                           
   844                           ; 1 bytes @ 0xD
   845  007D                     	ds	1
   846  007E                     ??_Get_Voltage:	
   847  007E                     ??___ftsub:	
   848                           ; 1 bytes @ 0xE
   849                           
   850                           
   851                           	psect	cstackBANK0
   852  0020                     __pcstackBANK0:	
   853                           ; 1 bytes @ 0xE
   854                           
   855  0020                     ?___llmod:	
   856  0020                     ___awmod@counter:	
   857                           ; 4 bytes @ 0x0
   858                           
   859  0020                     __div_to_l_@quot:	
   860                           ; 1 bytes @ 0x0
   861                           
   862  0020                     __tdiv_to_l_@quot:	
   863                           ; 4 bytes @ 0x0
   864                           
   865  0020                     ___llmod@divisor:	
   866                           ; 4 bytes @ 0x0
   867                           
   868                           
   869                           ; 4 bytes @ 0x0
   870  0020                     	ds	1
   871  0021                     ___awmod@sign:	
   872                           
   873                           ; 1 bytes @ 0x1
   874  0021                     	ds	1
   875  0022                     ?___bmul:	
   876  0022                     ___bmul@multiplicand:	
   877                           ; 1 bytes @ 0x2
   878                           
   879                           
   880                           ; 1 bytes @ 0x2
   881  0022                     	ds	1
   882  0023                     ??___bmul:	
   883                           
   884                           ; 1 bytes @ 0x3
   885  0023                     	ds	1
   886  0024                     ___bmul@product:	
   887  0024                     __div_to_l_@cntr:	
   888                           ; 1 bytes @ 0x4
   889                           
   890  0024                     __tdiv_to_l_@cntr:	
   891                           ; 1 bytes @ 0x4
   892                           
   893  0024                     ___llmod@dividend:	
   894                           ; 1 bytes @ 0x4
   895                           
   896                           
   897                           ; 4 bytes @ 0x4
   898  0024                     	ds	1
   899  0025                     ___bmul@multiplier:	
   900  0025                     __div_to_l_@exp1:	
   901                           ; 1 bytes @ 0x5
   902                           
   903  0025                     __tdiv_to_l_@exp1:	
   904                           ; 1 bytes @ 0x5
   905                           
   906                           
   907                           ; 1 bytes @ 0x5
   908  0025                     	ds	1
   909  0026                     ?___ftmul:	
   910  0026                     ___ftmul@f1:	
   911                           ; 3 bytes @ 0x6
   912                           
   913                           
   914                           ; 3 bytes @ 0x6
   915  0026                     	ds	2
   916  0028                     ??___llmod:	
   917                           
   918                           ; 1 bytes @ 0x8
   919  0028                     	ds	1
   920  0029                     ___llmod@counter:	
   921  0029                     ___ftmul@f2:	
   922                           ; 1 bytes @ 0x9
   923                           
   924                           
   925                           ; 3 bytes @ 0x9
   926  0029                     	ds	3
   927  002C                     ??___ftmul:	
   928                           
   929                           ; 1 bytes @ 0xC
   930  002C                     	ds	4
   931  0030                     ___ftmul@exp:	
   932                           
   933                           ; 1 bytes @ 0x10
   934  0030                     	ds	1
   935  0031                     ___ftmul@f3_as_product:	
   936                           
   937                           ; 3 bytes @ 0x11
   938  0031                     	ds	3
   939  0034                     ___ftmul@cntr:	
   940                           
   941                           ; 1 bytes @ 0x14
   942  0034                     	ds	1
   943  0035                     ___ftmul@sign:	
   944                           
   945                           ; 1 bytes @ 0x15
   946  0035                     	ds	1
   947  0036                     ?_fround:	
   948  0036                     ?_scale:	
   949                           ; 3 bytes @ 0x16
   950                           
   951  0036                     ?___ftdiv:	
   952                           ; 3 bytes @ 0x16
   953                           
   954  0036                     ___ftdiv@f2:	
   955                           ; 3 bytes @ 0x16
   956                           
   957                           
   958                           ; 3 bytes @ 0x16
   959  0036                     	ds	3
   960  0039                     ??_fround:	
   961  0039                     ??_scale:	
   962                           ; 1 bytes @ 0x19
   963                           
   964  0039                     ___ftdiv@f1:	
   965                           ; 1 bytes @ 0x19
   966                           
   967                           
   968                           ; 3 bytes @ 0x19
   969  0039                     	ds	2
   970  003B                     _scale$661:	
   971                           
   972                           ; 3 bytes @ 0x1B
   973  003B                     	ds	1
   974  003C                     ??___ftdiv:	
   975                           
   976                           ; 1 bytes @ 0x1C
   977  003C                     	ds	2
   978  003E                     scale@scl:	
   979                           
   980                           ; 1 bytes @ 0x1E
   981  003E                     	ds	1
   982  003F                     ?___fttol:	
   983  003F                     ___fttol@f1:	
   984                           ; 4 bytes @ 0x1F
   985                           
   986  003F                     _fround$660:	
   987                           ; 3 bytes @ 0x1F
   988                           
   989                           
   990                           ; 3 bytes @ 0x1F
   991  003F                     	ds	1
   992  0040                     ___ftdiv@cntr:	
   993                           
   994                           ; 1 bytes @ 0x20
   995  0040                     	ds	1
   996  0041                     ___ftdiv@f3:	
   997                           
   998                           ; 3 bytes @ 0x21
   999  0041                     	ds	1
  1000  0042                     _fround$659:	
  1001                           
  1002                           ; 3 bytes @ 0x22
  1003  0042                     	ds	1
  1004  0043                     ??___fttol:	
  1005                           
  1006                           ; 1 bytes @ 0x23
  1007  0043                     	ds	1
  1008  0044                     ___ftdiv@exp:	
  1009                           
  1010                           ; 1 bytes @ 0x24
  1011  0044                     	ds	1
  1012  0045                     fround@prec:	
  1013  0045                     ___ftdiv@sign:	
  1014                           ; 1 bytes @ 0x25
  1015                           
  1016                           
  1017                           ; 1 bytes @ 0x25
  1018  0045                     	ds	1
  1019  0046                     ?_Get_Voltage:	
  1020  0046                     ?___ftadd:	
  1021                           ; 3 bytes @ 0x26
  1022                           
  1023  0046                     ___ftadd@f1:	
  1024                           ; 3 bytes @ 0x26
  1025                           
  1026                           
  1027                           ; 3 bytes @ 0x26
  1028  0046                     	ds	1
  1029  0047                     ___fttol@sign1:	
  1030                           
  1031                           ; 1 bytes @ 0x27
  1032  0047                     	ds	1
  1033  0048                     ___fttol@lval:	
  1034                           
  1035                           ; 4 bytes @ 0x28
  1036  0048                     	ds	1
  1037  0049                     ___ftadd@f2:	
  1038                           
  1039                           ; 3 bytes @ 0x29
  1040  0049                     	ds	1
  1041  004A                     Get_Voltage@voltage:	
  1042                           
  1043                           ; 3 bytes @ 0x2A
  1044  004A                     	ds	2
  1045  004C                     ??___ftadd:	
  1046  004C                     ___fttol@exp1:	
  1047                           ; 1 bytes @ 0x2C
  1048                           
  1049                           
  1050                           ; 1 bytes @ 0x2C
  1051  004C                     	ds	1
  1052  004D                     Get_Voltage@channel:	
  1053                           
  1054                           ; 1 bytes @ 0x2D
  1055  004D                     	ds	3
  1056  0050                     ___ftadd@sign:	
  1057                           
  1058                           ; 1 bytes @ 0x30
  1059  0050                     	ds	1
  1060  0051                     ___ftadd@exp2:	
  1061                           
  1062                           ; 1 bytes @ 0x31
  1063  0051                     	ds	1
  1064  0052                     ___ftadd@exp1:	
  1065                           
  1066                           ; 1 bytes @ 0x32
  1067  0052                     	ds	1
  1068  0053                     ?___ftsub:	
  1069  0053                     ___ftsub@f2:	
  1070                           ; 3 bytes @ 0x33
  1071                           
  1072                           
  1073                           ; 3 bytes @ 0x33
  1074  0053                     	ds	3
  1075  0056                     ___ftsub@f1:	
  1076                           
  1077                           ; 3 bytes @ 0x36
  1078  0056                     	ds	3
  1079  0059                     ?_sprintf:	
  1080  0059                     sprintf@f:	
  1081                           ; 2 bytes @ 0x39
  1082                           
  1083                           
  1084                           ; 1 bytes @ 0x39
  1085  0059                     	ds	9
  1086  0062                     ??_sprintf:	
  1087                           
  1088                           ; 1 bytes @ 0x42
  1089  0062                     	ds	6
  1090  0068                     ??_main:	
  1091                           
  1092                           ; 1 bytes @ 0x48
  1093  0068                     	ds	3
  1094  006B                     main@volt:	
  1095                           
  1096                           ; 3 bytes @ 0x4B
  1097  006B                     	ds	3
  1098                           
  1099                           	psect	maintext
  1100  0970                     __pmaintext:	
  1101 ;;
  1102 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1103 ;;
  1104 ;; *************** function _main *****************
  1105 ;; Defined at:
  1106 ;;		line 5 in file "main.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;		None
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;  volt            3   75[BANK0 ] float 
  1111 ;;  data            2   84[BANK3 ] int 
  1112 ;;  bufferVoltag   80    0[BANK3 ] unsigned char [80]
  1113 ;;  buffer         20    0[BANK2 ] unsigned char [20]
  1114 ;; Return value:  Size  Location     Type
  1115 ;;                  1    wreg      void 
  1116 ;; Registers used:
  1117 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1118 ;; Tracked objects:
  1119 ;;		On entry : B00/0
  1120 ;;		On exit  : 0/0
  1121 ;;		Unchanged: 0/0
  1122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1123 ;;      Params:         0       0       0       0       0
  1124 ;;      Locals:         0       3       4      86      20
  1125 ;;      Temps:          0       3       0       0       0
  1126 ;;      Totals:         0       6       4      86      20
  1127 ;;Total ram usage:      116 bytes
  1128 ;; Hardware stack levels required when called:    4
  1129 ;; This function calls:
  1130 ;;		_ADC_Init
  1131 ;;		_ADC_Read
  1132 ;;		_Get_Voltage
  1133 ;;		___awdiv
  1134 ;;		___awmod
  1135 ;;		_lcd_clear
  1136 ;;		_lcd_init
  1137 ;;		_lcd_printStringXY
  1138 ;;		_sprintf
  1139 ;; This function is called by:
  1140 ;;		Startup code after reset
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           
  1145                           ;psect for function _main
  1146  0970                     _main:	
  1147                           
  1148                           ;main.c: 9: char buffer[20];
  1149                           ;main.c: 10: char bufferVoltage[80];
  1150                           ;main.c: 11: lcd_init(0);
  1151                           
  1152                           ;incstack = 0
  1153                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1154  0970  3000               	movlw	0
  1155  0971  160A  118A  2523  120A  158A  	fcall	_lcd_init
  1156                           
  1157                           ;main.c: 12: ADC_Init(5.0);
  1158  0976  3000               	movlw	0
  1159  0977  00F0               	movwf	ADC_Init@Uref
  1160  0978  30A0               	movlw	160
  1161  0979  00F1               	movwf	ADC_Init@Uref+1
  1162  097A  3040               	movlw	64
  1163  097B  00F2               	movwf	ADC_Init@Uref+2
  1164  097C  160A  118A  20F5  120A  158A  	fcall	_ADC_Init
  1165                           
  1166                           ;main.c: 13: lcd_printStringXY("Hello world",0,0);
  1167  0981  3094               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1168  0982  00F8               	movwf	lcd_printStringXY@str
  1169  0983  3080               	movlw	128
  1170  0984  00F9               	movwf	lcd_printStringXY@str+1
  1171  0985  01FA               	clrf	lcd_printStringXY@x
  1172  0986  01FB               	clrf	lcd_printStringXY@y
  1173  0987  160A  118A  20E3  120A  158A  	fcall	_lcd_printStringXY
  1174                           
  1175                           ;main.c: 14: _delay((unsigned long)((500)*(8000000/4000.0)));
  1176  098C  3006               	movlw	6
  1177  098D  1283               	bcf	3,5	;RP0=0, select bank0
  1178  098E  1303               	bcf	3,6	;RP1=0, select bank0
  1179  098F  00EA               	movwf	??_main+2
  1180  0990  3013               	movlw	19
  1181  0991  00E9               	movwf	??_main+1
  1182  0992  30AD               	movlw	173
  1183  0993  00E8               	movwf	??_main
  1184  0994                     u6377:	
  1185  0994  0BE8               	decfsz	??_main,f
  1186  0995  2994               	goto	u6377
  1187  0996  0BE9               	decfsz	??_main+1,f
  1188  0997  2994               	goto	u6377
  1189  0998  0BEA               	decfsz	??_main+2,f
  1190  0999  2994               	goto	u6377
  1191                           
  1192                           ;main.c: 15: lcd_clear();
  1193  099A  160A  118A  20CA  120A  158A  	fcall	_lcd_clear
  1194  099F                     l3842:	
  1195                           ;main.c: 17: while(1)
  1196                           
  1197                           
  1198                           ;main.c: 18: {
  1199                           ;main.c: 19: int data=ADC_Read(0);
  1200  099F  3000               	movlw	0
  1201  09A0  160A  118A  221C  120A  158A  	fcall	_ADC_Read
  1202  09A5  0871               	movf	?_ADC_Read+1,w
  1203  09A6  1683               	bsf	3,5	;RP0=1, select bank3
  1204  09A7  1703               	bsf	3,6	;RP1=1, select bank3
  1205  09A8  00E5               	movwf	(main@data+1)^(0+384)
  1206  09A9  0870               	movf	?_ADC_Read,w
  1207  09AA  00E4               	movwf	main@data^(0+384)
  1208                           
  1209                           ;main.c: 20: float volt=Get_Voltage(0);
  1210  09AB  3000               	movlw	0
  1211  09AC  160A  118A  2299  120A  158A  	fcall	_Get_Voltage
  1212  09B1  1283               	bcf	3,5	;RP0=0, select bank0
  1213  09B2  1303               	bcf	3,6	;RP1=0, select bank0
  1214  09B3  0846               	movf	?_Get_Voltage,w
  1215  09B4  00EB               	movwf	main@volt
  1216  09B5  0847               	movf	?_Get_Voltage+1,w
  1217  09B6  00EC               	movwf	main@volt+1
  1218  09B7  0848               	movf	?_Get_Voltage+2,w
  1219  09B8  00ED               	movwf	main@volt+2
  1220                           
  1221                           ;main.c: 21: sprintf(buffer,"data= %d%d%d%d",data/1000,(data/100)%10,(data/10)%10,data%1
      +                          0);
  1222  09B9  30E8               	movlw	232
  1223  09BA  00F0               	movwf	___awdiv@divisor
  1224  09BB  3003               	movlw	3
  1225  09BC  00F1               	movwf	___awdiv@divisor+1
  1226  09BD  1683               	bsf	3,5	;RP0=1, select bank3
  1227  09BE  1703               	bsf	3,6	;RP1=1, select bank3
  1228  09BF  0865               	movf	(main@data+1)^(0+384),w
  1229  09C0  00F3               	movwf	___awdiv@dividend+1
  1230  09C1  0864               	movf	main@data^(0+384),w
  1231  09C2  00F2               	movwf	___awdiv@dividend
  1232  09C3  160A  118A  22EA  120A  158A  	fcall	___awdiv
  1233  09C8  0871               	movf	?___awdiv+1,w
  1234  09C9  1683               	bsf	3,5	;RP0=1, select bank1
  1235  09CA  1303               	bcf	3,6	;RP1=0, select bank1
  1236  09CB  00B8               	movwf	(_main$655+1)^(0+128)
  1237  09CC  0870               	movf	?___awdiv,w
  1238  09CD  00B7               	movwf	_main$655^(0+128)
  1239                           
  1240                           ;main.c: 21: sprintf(buffer,"data= %d%d%d%d",data/1000,(data/100)%10,(data/10)%10,data%1
      +                          0);
  1241  09CE  300A               	movlw	10
  1242  09CF  00F9               	movwf	___awmod@divisor
  1243  09D0  3000               	movlw	0
  1244  09D1  00FA               	movwf	___awmod@divisor+1
  1245  09D2  3064               	movlw	100
  1246  09D3  00F0               	movwf	___awdiv@divisor
  1247  09D4  3000               	movlw	0
  1248  09D5  00F1               	movwf	___awdiv@divisor+1
  1249  09D6  1683               	bsf	3,5	;RP0=1, select bank3
  1250  09D7  1703               	bsf	3,6	;RP1=1, select bank3
  1251  09D8  0865               	movf	(main@data+1)^(0+384),w
  1252  09D9  00F3               	movwf	___awdiv@dividend+1
  1253  09DA  0864               	movf	main@data^(0+384),w
  1254  09DB  00F2               	movwf	___awdiv@dividend
  1255  09DC  160A  118A  22EA  120A  158A  	fcall	___awdiv
  1256  09E1  0871               	movf	?___awdiv+1,w
  1257  09E2  00FC               	movwf	___awmod@dividend+1
  1258  09E3  0870               	movf	?___awdiv,w
  1259  09E4  00FB               	movwf	___awmod@dividend
  1260  09E5  160A  118A  224C  120A  158A  	fcall	___awmod
  1261  09EA  087A               	movf	?___awmod+1,w
  1262  09EB  1683               	bsf	3,5	;RP0=1, select bank1
  1263  09EC  1303               	bcf	3,6	;RP1=0, select bank1
  1264  09ED  00BA               	movwf	(_main$656+1)^(0+128)
  1265  09EE  0879               	movf	?___awmod,w
  1266  09EF  00B9               	movwf	_main$656^(0+128)
  1267                           
  1268                           ;main.c: 21: sprintf(buffer,"data= %d%d%d%d",data/1000,(data/100)%10,(data/10)%10,data%1
      +                          0);
  1269  09F0  300A               	movlw	10
  1270  09F1  00F9               	movwf	___awmod@divisor
  1271  09F2  3000               	movlw	0
  1272  09F3  00FA               	movwf	___awmod@divisor+1
  1273  09F4  300A               	movlw	10
  1274  09F5  00F0               	movwf	___awdiv@divisor
  1275  09F6  3000               	movlw	0
  1276  09F7  00F1               	movwf	___awdiv@divisor+1
  1277  09F8  1683               	bsf	3,5	;RP0=1, select bank3
  1278  09F9  1703               	bsf	3,6	;RP1=1, select bank3
  1279  09FA  0865               	movf	(main@data+1)^(0+384),w
  1280  09FB  00F3               	movwf	___awdiv@dividend+1
  1281  09FC  0864               	movf	main@data^(0+384),w
  1282  09FD  00F2               	movwf	___awdiv@dividend
  1283  09FE  160A  118A  22EA  120A  158A  	fcall	___awdiv
  1284  0A03  0871               	movf	?___awdiv+1,w
  1285  0A04  00FC               	movwf	___awmod@dividend+1
  1286  0A05  0870               	movf	?___awdiv,w
  1287  0A06  00FB               	movwf	___awmod@dividend
  1288  0A07  160A  118A  224C  120A  158A  	fcall	___awmod
  1289  0A0C  087A               	movf	?___awmod+1,w
  1290  0A0D  1683               	bsf	3,5	;RP0=1, select bank3
  1291  0A0E  1703               	bsf	3,6	;RP1=1, select bank3
  1292  0A0F  00E1               	movwf	(_main$657+1)^(0+384)
  1293  0A10  0879               	movf	?___awmod,w
  1294  0A11  00E0               	movwf	_main$657^(0+384)
  1295                           
  1296                           ;main.c: 21: sprintf(buffer,"data= %d%d%d%d",data/1000,(data/100)%10,(data/10)%10,data%1
      +                          0);
  1297  0A12  300A               	movlw	10
  1298  0A13  00F9               	movwf	___awmod@divisor
  1299  0A14  3000               	movlw	0
  1300  0A15  00FA               	movwf	___awmod@divisor+1
  1301  0A16  0865               	movf	(main@data+1)^(0+384),w
  1302  0A17  00FC               	movwf	___awmod@dividend+1
  1303  0A18  0864               	movf	main@data^(0+384),w
  1304  0A19  00FB               	movwf	___awmod@dividend
  1305  0A1A  160A  118A  224C  120A  158A  	fcall	___awmod
  1306  0A1F  087A               	movf	?___awmod+1,w
  1307  0A20  1683               	bsf	3,5	;RP0=1, select bank3
  1308  0A21  1703               	bsf	3,6	;RP1=1, select bank3
  1309  0A22  00E3               	movwf	(_main$658+1)^(0+384)
  1310  0A23  0879               	movf	?___awmod,w
  1311  0A24  00E2               	movwf	_main$658^(0+384)
  1312                           
  1313                           ;main.c: 21: sprintf(buffer,"data= %d%d%d%d",data/1000,(data/100)%10,(data/10)%10,data%1
      +                          0);
  1314  0A25  3077               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1315  0A26  1283               	bcf	3,5	;RP0=0, select bank0
  1316  0A27  1303               	bcf	3,6	;RP1=0, select bank0
  1317  0A28  00E8               	movwf	??_main
  1318  0A29  0868               	movf	??_main,w
  1319  0A2A  00D9               	movwf	sprintf@f
  1320  0A2B  1683               	bsf	3,5	;RP0=1, select bank1
  1321  0A2C  1303               	bcf	3,6	;RP1=0, select bank1
  1322  0A2D  0838               	movf	(_main$655+1)^(0+128),w
  1323  0A2E  1283               	bcf	3,5	;RP0=0, select bank0
  1324  0A2F  1303               	bcf	3,6	;RP1=0, select bank0
  1325  0A30  00DB               	movwf	?_sprintf+2
  1326  0A31  1683               	bsf	3,5	;RP0=1, select bank1
  1327  0A32  1303               	bcf	3,6	;RP1=0, select bank1
  1328  0A33  0837               	movf	_main$655^(0+128),w
  1329  0A34  1283               	bcf	3,5	;RP0=0, select bank0
  1330  0A35  1303               	bcf	3,6	;RP1=0, select bank0
  1331  0A36  00DA               	movwf	?_sprintf+1
  1332  0A37  1683               	bsf	3,5	;RP0=1, select bank1
  1333  0A38  1303               	bcf	3,6	;RP1=0, select bank1
  1334  0A39  083A               	movf	(_main$656+1)^(0+128),w
  1335  0A3A  1283               	bcf	3,5	;RP0=0, select bank0
  1336  0A3B  1303               	bcf	3,6	;RP1=0, select bank0
  1337  0A3C  00DD               	movwf	?_sprintf+4
  1338  0A3D  1683               	bsf	3,5	;RP0=1, select bank1
  1339  0A3E  1303               	bcf	3,6	;RP1=0, select bank1
  1340  0A3F  0839               	movf	_main$656^(0+128),w
  1341  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  1342  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  1343  0A42  00DC               	movwf	?_sprintf+3
  1344  0A43  1683               	bsf	3,5	;RP0=1, select bank3
  1345  0A44  1703               	bsf	3,6	;RP1=1, select bank3
  1346  0A45  0861               	movf	(_main$657+1)^(0+384),w
  1347  0A46  1283               	bcf	3,5	;RP0=0, select bank0
  1348  0A47  1303               	bcf	3,6	;RP1=0, select bank0
  1349  0A48  00DF               	movwf	?_sprintf+6
  1350  0A49  1683               	bsf	3,5	;RP0=1, select bank3
  1351  0A4A  1703               	bsf	3,6	;RP1=1, select bank3
  1352  0A4B  0860               	movf	_main$657^(0+384),w
  1353  0A4C  1283               	bcf	3,5	;RP0=0, select bank0
  1354  0A4D  1303               	bcf	3,6	;RP1=0, select bank0
  1355  0A4E  00DE               	movwf	?_sprintf+5
  1356  0A4F  1683               	bsf	3,5	;RP0=1, select bank3
  1357  0A50  1703               	bsf	3,6	;RP1=1, select bank3
  1358  0A51  0863               	movf	(_main$658+1)^(0+384),w
  1359  0A52  1283               	bcf	3,5	;RP0=0, select bank0
  1360  0A53  1303               	bcf	3,6	;RP1=0, select bank0
  1361  0A54  00E1               	movwf	?_sprintf+8
  1362  0A55  1683               	bsf	3,5	;RP0=1, select bank3
  1363  0A56  1703               	bsf	3,6	;RP1=1, select bank3
  1364  0A57  0862               	movf	_main$658^(0+384),w
  1365  0A58  1283               	bcf	3,5	;RP0=0, select bank0
  1366  0A59  1303               	bcf	3,6	;RP1=0, select bank0
  1367  0A5A  00E0               	movwf	?_sprintf+7
  1368  0A5B  3010               	movlw	(low (main@buffer| (0+256)))& (0+255)
  1369  0A5C  120A  118A  2051  120A  158A  	fcall	_sprintf
  1370                           
  1371                           ;main.c: 22: sprintf(bufferVoltage,"voltage= %.2f",volt);
  1372  0A61  3086               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1373  0A62  1283               	bcf	3,5	;RP0=0, select bank0
  1374  0A63  1303               	bcf	3,6	;RP1=0, select bank0
  1375  0A64  00E8               	movwf	??_main
  1376  0A65  0868               	movf	??_main,w
  1377  0A66  00D9               	movwf	sprintf@f
  1378  0A67  086B               	movf	main@volt,w
  1379  0A68  00DA               	movwf	?_sprintf+1
  1380  0A69  086C               	movf	main@volt+1,w
  1381  0A6A  00DB               	movwf	?_sprintf+2
  1382  0A6B  086D               	movf	main@volt+2,w
  1383  0A6C  00DC               	movwf	?_sprintf+3
  1384  0A6D  3090               	movlw	(low (main@bufferVoltage| (0+256)))& (0+255)
  1385  0A6E  120A  118A  2051  120A  158A  	fcall	_sprintf
  1386                           
  1387                           ;main.c: 24: lcd_printStringXY(buffer,0,0);
  1388  0A73  3010               	movlw	(low (main@buffer| (0+256)))& (0+255)
  1389  0A74  00F8               	movwf	lcd_printStringXY@str
  1390  0A75  3001               	movlw	1
  1391  0A76  00F9               	movwf	lcd_printStringXY@str+1
  1392  0A77  01FA               	clrf	lcd_printStringXY@x
  1393  0A78  01FB               	clrf	lcd_printStringXY@y
  1394  0A79  160A  118A  20E3  120A  158A  	fcall	_lcd_printStringXY
  1395                           
  1396                           ;main.c: 25: lcd_printStringXY(bufferVoltage,0,1);
  1397  0A7E  3090               	movlw	(low (main@bufferVoltage| (0+256)))& (0+255)
  1398  0A7F  00F8               	movwf	lcd_printStringXY@str
  1399  0A80  3001               	movlw	1
  1400  0A81  00F9               	movwf	lcd_printStringXY@str+1
  1401  0A82  01FA               	clrf	lcd_printStringXY@x
  1402  0A83  01FB               	clrf	lcd_printStringXY@y
  1403  0A84  0AFB               	incf	lcd_printStringXY@y,f
  1404  0A85  160A  118A  20E3  120A  158A  	fcall	_lcd_printStringXY
  1405                           
  1406                           ;main.c: 26: _delay((unsigned long)((500)*(8000000/4000.0)));
  1407  0A8A  3006               	movlw	6
  1408  0A8B  1283               	bcf	3,5	;RP0=0, select bank0
  1409  0A8C  1303               	bcf	3,6	;RP1=0, select bank0
  1410  0A8D  00EA               	movwf	??_main+2
  1411  0A8E  3013               	movlw	19
  1412  0A8F  00E9               	movwf	??_main+1
  1413  0A90  30AD               	movlw	173
  1414  0A91  00E8               	movwf	??_main
  1415  0A92                     u6387:	
  1416  0A92  0BE8               	decfsz	??_main,f
  1417  0A93  2A92               	goto	u6387
  1418  0A94  0BE9               	decfsz	??_main+1,f
  1419  0A95  2A92               	goto	u6387
  1420  0A96  0BEA               	decfsz	??_main+2,f
  1421  0A97  2A92               	goto	u6387
  1422  0A98  299F               	goto	l3842
  1423  0A99                     __end_of_main:	
  1424                           
  1425                           	psect	text1
  1426  0051                     __ptext1:	
  1427 ;; *************** function _sprintf *****************
  1428 ;; Defined at:
  1429 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;  sp              1    wreg     PTR unsigned char 
  1432 ;;		 -> main@bufferVoltage(80), main@buffer(20), 
  1433 ;;  f               1   57[BANK0 ] PTR const unsigned char 
  1434 ;;		 -> STR_3(14), STR_2(15), 
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;  sp              1   16[BANK1 ] PTR unsigned char 
  1437 ;;		 -> main@bufferVoltage(80), main@buffer(20), 
  1438 ;;  val             4   12[BANK1 ] unsigned long 
  1439 ;;  tmpval          4    8[BANK1 ] struct .
  1440 ;;  fval            3   19[BANK1 ] struct .
  1441 ;;  prec            2   17[BANK1 ] int 
  1442 ;;  exp             2    6[BANK1 ] int 
  1443 ;;  flag            2    4[BANK1 ] unsigned short 
  1444 ;;  cp              2    0        PTR const unsigned char 
  1445 ;;  len             2    0        unsigned int 
  1446 ;;  width           2    0        int 
  1447 ;;  c               1   22[BANK1 ] char 
  1448 ;;  ap              1    3[BANK1 ] PTR void [1]
  1449 ;;		 -> ?_sprintf(2), 
  1450 ;;  d               1    0        unsigned char 
  1451 ;; Return value:  Size  Location     Type
  1452 ;;                  2   57[BANK0 ] int 
  1453 ;; Registers used:
  1454 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1455 ;; Tracked objects:
  1456 ;;		On entry : 0/0
  1457 ;;		On exit  : 0/0
  1458 ;;		Unchanged: 0/0
  1459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1460 ;;      Params:         0       9       0       0       0
  1461 ;;      Locals:         0       0      23       0       0
  1462 ;;      Temps:          0       6       0       0       0
  1463 ;;      Totals:         0      15      23       0       0
  1464 ;;Total ram usage:       38 bytes
  1465 ;; Hardware stack levels used:    1
  1466 ;; Hardware stack levels required when called:    3
  1467 ;; This function calls:
  1468 ;;		___awdiv
  1469 ;;		___ftadd
  1470 ;;		___ftge
  1471 ;;		___ftmul
  1472 ;;		___ftneg
  1473 ;;		___ftsub
  1474 ;;		___fttol
  1475 ;;		___lldiv
  1476 ;;		___llmod
  1477 ;;		___lltoft
  1478 ;;		___wmul
  1479 ;;		__div_to_l_
  1480 ;;		__tdiv_to_l_
  1481 ;;		_fround
  1482 ;;		_isdigit
  1483 ;;		_scale
  1484 ;; This function is called by:
  1485 ;;		_main
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           
  1490                           ;psect for function _sprintf
  1491  0051                     _sprintf:	
  1492                           
  1493                           ;incstack = 0
  1494                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1495                           ;sprintf@sp stored from wreg
  1496  0051  1683               	bsf	3,5	;RP0=1, select bank1
  1497  0052  1303               	bcf	3,6	;RP1=0, select bank1
  1498  0053  00B0               	movwf	sprintf@sp^(0+128)
  1499                           
  1500                           ;doprnt.c: 494: va_list ap;
  1501                           ;doprnt.c: 499: signed char c;
  1502                           ;doprnt.c: 501: int width;
  1503                           ;doprnt.c: 504: int prec;
  1504                           ;doprnt.c: 508: unsigned short flag;
  1505                           ;doprnt.c: 515: char d;
  1506                           ;doprnt.c: 516: double fval;
  1507                           ;doprnt.c: 517: int exp;
  1508                           ;doprnt.c: 523: union {
  1509                           ;doprnt.c: 524: unsigned long vd;
  1510                           ;doprnt.c: 525: double integ;
  1511                           ;doprnt.c: 526: } tmpval;
  1512                           ;doprnt.c: 528: unsigned long val;
  1513                           ;doprnt.c: 529: unsigned len;
  1514                           ;doprnt.c: 530: const char * cp;
  1515                           ;doprnt.c: 533: *ap = __va_start();
  1516  0054  305A               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1517  0055  1283               	bcf	3,5	;RP0=0, select bank0
  1518  0056  1303               	bcf	3,6	;RP1=0, select bank0
  1519  0057  00E2               	movwf	??_sprintf
  1520  0058  0862               	movf	??_sprintf,w
  1521  0059  1683               	bsf	3,5	;RP0=1, select bank1
  1522  005A  1303               	bcf	3,6	;RP1=0, select bank1
  1523  005B  00A3               	movwf	sprintf@ap^(0+128)
  1524  005C                     l3826:	
  1525                           ;doprnt.c: 536: while(c = *f++) {
  1526                           
  1527  005C  3001               	movlw	1
  1528  005D  1283               	bcf	3,5	;RP0=0, select bank0
  1529  005E  1303               	bcf	3,6	;RP1=0, select bank0
  1530  005F  07D9               	addwf	sprintf@f,f
  1531  0060  30FF               	movlw	-1
  1532  0061  0759               	addwf	sprintf@f,w
  1533  0062  0084               	movwf	4
  1534  0063  160A  118A  200A  120A  118A  	fcall	stringdir
  1535  0068  00E2               	movwf	??_sprintf
  1536  0069  0862               	movf	??_sprintf,w
  1537  006A  1683               	bsf	3,5	;RP0=1, select bank1
  1538  006B  1303               	bcf	3,6	;RP1=0, select bank1
  1539  006C  00B6               	movwf	sprintf@c^(0+128)
  1540  006D  0836               	movf	sprintf@c^(0+128),w
  1541  006E  1903               	btfsc	3,2
  1542  006F  2FF2               	goto	l3828
  1543                           
  1544                           ;doprnt.c: 538: if(c != '%')
  1545  0070  3025               	movlw	37
  1546  0071  0636               	xorwf	sprintf@c^(0+128),w
  1547  0072  1903               	btfsc	3,2
  1548  0073  2888               	goto	l3614
  1549                           
  1550                           ;doprnt.c: 540: {
  1551                           ;doprnt.c: 541: ((*sp++ = (c)));
  1552  0074  0836               	movf	sprintf@c^(0+128),w
  1553  0075  1283               	bcf	3,5	;RP0=0, select bank0
  1554  0076  1303               	bcf	3,6	;RP1=0, select bank0
  1555  0077  00E2               	movwf	??_sprintf
  1556  0078  1683               	bsf	3,5	;RP0=1, select bank1
  1557  0079  1303               	bcf	3,6	;RP1=0, select bank1
  1558  007A  0830               	movf	sprintf@sp^(0+128),w
  1559  007B  0084               	movwf	4
  1560  007C  1283               	bcf	3,5	;RP0=0, select bank0
  1561  007D  1303               	bcf	3,6	;RP1=0, select bank0
  1562  007E  0862               	movf	??_sprintf,w
  1563  007F  1783               	bsf	3,7	;select IRP bank2
  1564  0080  0080               	movwf	0
  1565  0081  3001               	movlw	1
  1566  0082  00E2               	movwf	??_sprintf
  1567  0083  0862               	movf	??_sprintf,w
  1568  0084  1683               	bsf	3,5	;RP0=1, select bank1
  1569  0085  1303               	bcf	3,6	;RP1=0, select bank1
  1570  0086  07B0               	addwf	sprintf@sp^(0+128),f
  1571                           
  1572                           ;doprnt.c: 542: continue;
  1573  0087  285C               	goto	l3826
  1574  0088                     l3614:	
  1575                           
  1576                           ;doprnt.c: 543: }
  1577                           ;doprnt.c: 548: flag = 0;
  1578  0088  01A4               	clrf	sprintf@flag^(0+128)
  1579  0089  01A5               	clrf	(sprintf@flag+1)^(0+128)
  1580                           
  1581                           ;doprnt.c: 611: if(*f == '.') {
  1582  008A  1283               	bcf	3,5	;RP0=0, select bank0
  1583  008B  1303               	bcf	3,6	;RP1=0, select bank0
  1584  008C  0859               	movf	sprintf@f,w
  1585  008D  0084               	movwf	4
  1586  008E  160A  118A  200A  120A  118A  	fcall	stringdir
  1587  0093  3A2E               	xorlw	46
  1588  0094  1D03               	skipz
  1589  0095  28E6               	goto	l3630
  1590                           
  1591                           ;doprnt.c: 612: flag |= 0x4000;
  1592  0096  1683               	bsf	3,5	;RP0=1, select bank1
  1593  0097  1303               	bcf	3,6	;RP1=0, select bank1
  1594  0098  1725               	bsf	(sprintf@flag^(0+128)+1),6
  1595                           
  1596                           ;doprnt.c: 613: f++;
  1597  0099  3001               	movlw	1
  1598  009A  1283               	bcf	3,5	;RP0=0, select bank0
  1599  009B  1303               	bcf	3,6	;RP1=0, select bank0
  1600  009C  00E2               	movwf	??_sprintf
  1601  009D  0862               	movf	??_sprintf,w
  1602  009E  07D9               	addwf	sprintf@f,f
  1603                           
  1604                           ;doprnt.c: 620: {
  1605                           ;doprnt.c: 621: prec = 0;
  1606  009F  1683               	bsf	3,5	;RP0=1, select bank1
  1607  00A0  1303               	bcf	3,6	;RP1=0, select bank1
  1608  00A1  01B1               	clrf	sprintf@prec^(0+128)
  1609  00A2  01B2               	clrf	(sprintf@prec+1)^(0+128)
  1610  00A3                     l3628:	
  1611                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1612                           
  1613  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  1614  00A4  0859               	movf	sprintf@f,w
  1615  00A5  0084               	movwf	4
  1616  00A6  160A  118A  200A  120A  118A  	fcall	stringdir
  1617  00AB  160A  118A  20D5  120A  118A  	fcall	_isdigit
  1618  00B0  1C03               	btfss	3,0
  1619  00B1  28EE               	goto	l3636
  1620                           
  1621                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1622  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  1623  00B3  1303               	bcf	3,6	;RP1=0, select bank1
  1624  00B4  0832               	movf	(sprintf@prec+1)^(0+128),w
  1625  00B5  00F1               	movwf	___wmul@multiplier+1
  1626  00B6  0831               	movf	sprintf@prec^(0+128),w
  1627  00B7  00F0               	movwf	___wmul@multiplier
  1628  00B8  300A               	movlw	10
  1629  00B9  00F2               	movwf	___wmul@multiplicand
  1630  00BA  3000               	movlw	0
  1631  00BB  00F3               	movwf	___wmul@multiplicand+1
  1632  00BC  160A  118A  2182  120A  118A  	fcall	___wmul
  1633  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1634  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1635  00C3  0859               	movf	sprintf@f,w
  1636  00C4  0084               	movwf	4
  1637  00C5  160A  118A  200A  120A  118A  	fcall	stringdir
  1638  00CA  0770               	addwf	?___wmul,w
  1639  00CB  00E2               	movwf	??_sprintf
  1640  00CC  3000               	movlw	0
  1641  00CD  1803               	skipnc
  1642  00CE  3001               	movlw	1
  1643  00CF  0771               	addwf	?___wmul+1,w
  1644  00D0  00E3               	movwf	??_sprintf+1
  1645  00D1  0862               	movf	??_sprintf,w
  1646  00D2  3ED0               	addlw	208
  1647  00D3  1683               	bsf	3,5	;RP0=1, select bank1
  1648  00D4  1303               	bcf	3,6	;RP1=0, select bank1
  1649  00D5  00B1               	movwf	sprintf@prec^(0+128)
  1650  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  1651  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  1652  00D8  0863               	movf	??_sprintf+1,w
  1653  00D9  1803               	skipnc
  1654  00DA  3E01               	addlw	1
  1655  00DB  3EFF               	addlw	255
  1656  00DC  1683               	bsf	3,5	;RP0=1, select bank1
  1657  00DD  1303               	bcf	3,6	;RP1=0, select bank1
  1658  00DE  00B2               	movwf	(sprintf@prec+1)^(0+128)
  1659  00DF  3001               	movlw	1
  1660  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1661  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1662  00E2  00E2               	movwf	??_sprintf
  1663  00E3  0862               	movf	??_sprintf,w
  1664  00E4  07D9               	addwf	sprintf@f,f
  1665  00E5  28A3               	goto	l3628
  1666  00E6                     l3630:	
  1667                           ;doprnt.c: 624: }
  1668                           ;doprnt.c: 625: } else {
  1669                           
  1670                           
  1671                           ;doprnt.c: 626: prec = 0;
  1672  00E6  1683               	bsf	3,5	;RP0=1, select bank1
  1673  00E7  1303               	bcf	3,6	;RP1=0, select bank1
  1674  00E8  01B1               	clrf	sprintf@prec^(0+128)
  1675  00E9  01B2               	clrf	(sprintf@prec+1)^(0+128)
  1676                           
  1677                           ;doprnt.c: 628: flag |= 0x1000;
  1678  00EA  1625               	bsf	(sprintf@flag^(0+128)+1),4
  1679                           
  1680                           ;doprnt.c: 630: }
  1681                           ;doprnt.c: 635: switch(c = *f++) {
  1682  00EB  28EE               	goto	l3636
  1683  00EC                     l177:	
  1684                           ;doprnt.c: 662: case 'f':
  1685                           
  1686                           ;doprnt.c: 638: goto alldone;
  1687                           
  1688                           ;doprnt.c: 637: case 0:
  1689                           
  1690                           
  1691                           ;doprnt.c: 663: flag |= 0x400;
  1692  00EC  1525               	bsf	(sprintf@flag^(0+128)+1),2
  1693                           
  1694                           ;doprnt.c: 698: case 'i':
  1695                           ;doprnt.c: 699: break;
  1696                           
  1697                           ;doprnt.c: 697: case 'd':
  1698                           
  1699                           ;doprnt.c: 664: break;
  1700  00ED  290A               	goto	l3638
  1701  00EE                     l3636:	
  1702                           ;doprnt.c: 822: }
  1703                           
  1704                           ;doprnt.c: 813: continue;
  1705                           
  1706                           ;doprnt.c: 802: default:
  1707                           
  1708  00EE  3001               	movlw	1
  1709  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  1710  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  1711  00F1  07D9               	addwf	sprintf@f,f
  1712  00F2  30FF               	movlw	-1
  1713  00F3  0759               	addwf	sprintf@f,w
  1714  00F4  0084               	movwf	4
  1715  00F5  160A  118A  200A  120A  118A  	fcall	stringdir
  1716  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  1717  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  1718  00FC  00B6               	movwf	sprintf@c^(0+128)
  1719                           
  1720                           ; Switch size 1, requested type "space"
  1721                           ; Number of cases is 4, Range of values is 0 to 105
  1722                           ; switch strategies available:
  1723                           ; Name         Instructions Cycles
  1724                           ; simple_byte           13     7 (average)
  1725                           ; jumptable            260     6 (fixed)
  1726                           ;	Chosen strategy is simple_byte
  1727  00FD  3A00               	xorlw	0	; case 0
  1728  00FE  1903               	skipnz
  1729  00FF  2FF2               	goto	l3828
  1730  0100  3A64               	xorlw	100	; case 100
  1731  0101  1903               	skipnz
  1732  0102  290A               	goto	l3638
  1733  0103  3A02               	xorlw	2	; case 102
  1734  0104  1903               	skipnz
  1735  0105  28EC               	goto	l177
  1736  0106  3A0F               	xorlw	15	; case 105
  1737  0107  1903               	skipnz
  1738  0108  290A               	goto	l3638
  1739  0109  285C               	goto	l3826
  1740  010A                     l3638:	
  1741                           
  1742                           ;doprnt.c: 825: if(flag & (0x700)) {
  1743  010A  3000               	movlw	0
  1744  010B  0524               	andwf	sprintf@flag^(0+128),w
  1745  010C  1283               	bcf	3,5	;RP0=0, select bank0
  1746  010D  1303               	bcf	3,6	;RP1=0, select bank0
  1747  010E  00E2               	movwf	??_sprintf
  1748  010F  3007               	movlw	7
  1749  0110  1683               	bsf	3,5	;RP0=1, select bank1
  1750  0111  1303               	bcf	3,6	;RP1=0, select bank1
  1751  0112  0525               	andwf	(sprintf@flag+1)^(0+128),w
  1752  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1753  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1754  0115  00E3               	movwf	??_sprintf+1
  1755  0116  0862               	movf	??_sprintf,w
  1756  0117  0463               	iorwf	??_sprintf+1,w
  1757  0118  1903               	btfsc	3,2
  1758  0119  2E83               	goto	l3778
  1759                           
  1760                           ;doprnt.c: 827: if(flag & 0x1000)
  1761  011A  1683               	bsf	3,5	;RP0=1, select bank1
  1762  011B  1303               	bcf	3,6	;RP1=0, select bank1
  1763  011C  1E25               	btfss	(sprintf@flag+1)^(0+128),4
  1764  011D  2922               	goto	l3644
  1765                           
  1766                           ;doprnt.c: 829: prec = 6;
  1767  011E  3006               	movlw	6
  1768  011F  00B1               	movwf	sprintf@prec^(0+128)
  1769  0120  3000               	movlw	0
  1770  0121  00B2               	movwf	(sprintf@prec^(0+128)+1)
  1771  0122                     l3644:	
  1772                           
  1773                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1774  0122  0823               	movf	sprintf@ap^(0+128),w
  1775  0123  0084               	movwf	4
  1776  0124  1383               	bcf	3,7	;select IRP bank0
  1777  0125  0800               	movf	0,w
  1778  0126  00B3               	movwf	sprintf@fval^(0+128)
  1779  0127  0A84               	incf	4,f
  1780  0128  0800               	movf	0,w
  1781  0129  00B4               	movwf	(sprintf@fval+1)^(0+128)
  1782  012A  0A84               	incf	4,f
  1783  012B  0800               	movf	0,w
  1784  012C  00B5               	movwf	(sprintf@fval+2)^(0+128)
  1785  012D  3003               	movlw	3
  1786  012E  1283               	bcf	3,5	;RP0=0, select bank0
  1787  012F  1303               	bcf	3,6	;RP1=0, select bank0
  1788  0130  00E2               	movwf	??_sprintf
  1789  0131  0862               	movf	??_sprintf,w
  1790  0132  1683               	bsf	3,5	;RP0=1, select bank1
  1791  0133  1303               	bcf	3,6	;RP1=0, select bank1
  1792  0134  07A3               	addwf	sprintf@ap^(0+128),f
  1793                           
  1794                           ;doprnt.c: 831: if(fval < 0.0) {
  1795  0135  0833               	movf	sprintf@fval^(0+128),w
  1796  0136  00F0               	movwf	___ftge@ff1
  1797  0137  0834               	movf	(sprintf@fval+1)^(0+128),w
  1798  0138  00F1               	movwf	___ftge@ff1+1
  1799  0139  0835               	movf	(sprintf@fval+2)^(0+128),w
  1800  013A  00F2               	movwf	___ftge@ff1+2
  1801  013B  3000               	movlw	0
  1802  013C  00F3               	movwf	___ftge@ff2
  1803  013D  3000               	movlw	0
  1804  013E  00F4               	movwf	___ftge@ff2+1
  1805  013F  3000               	movlw	0
  1806  0140  00F5               	movwf	___ftge@ff2+2
  1807  0141  160A  118A  2343  120A  118A  	fcall	___ftge
  1808  0146  1803               	btfsc	3,0
  1809  0147  2961               	goto	l3654
  1810                           
  1811                           ;doprnt.c: 832: fval = -fval;
  1812  0148  1683               	bsf	3,5	;RP0=1, select bank1
  1813  0149  1303               	bcf	3,6	;RP1=0, select bank1
  1814  014A  0833               	movf	sprintf@fval^(0+128),w
  1815  014B  00F0               	movwf	___ftneg@f1
  1816  014C  0834               	movf	(sprintf@fval+1)^(0+128),w
  1817  014D  00F1               	movwf	___ftneg@f1+1
  1818  014E  0835               	movf	(sprintf@fval+2)^(0+128),w
  1819  014F  00F2               	movwf	___ftneg@f1+2
  1820  0150  120A  158A  2001  120A  118A  	fcall	___ftneg
  1821  0155  0870               	movf	?___ftneg,w
  1822  0156  1683               	bsf	3,5	;RP0=1, select bank1
  1823  0157  1303               	bcf	3,6	;RP1=0, select bank1
  1824  0158  00B3               	movwf	sprintf@fval^(0+128)
  1825  0159  0871               	movf	?___ftneg+1,w
  1826  015A  00B4               	movwf	(sprintf@fval+1)^(0+128)
  1827  015B  0872               	movf	?___ftneg+2,w
  1828  015C  00B5               	movwf	(sprintf@fval+2)^(0+128)
  1829                           
  1830                           ;doprnt.c: 833: flag |= 0x03;
  1831  015D  3003               	movlw	3
  1832  015E  04A4               	iorwf	sprintf@flag^(0+128),f
  1833  015F  3000               	movlw	0
  1834  0160  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  1835  0161                     l3654:	
  1836                           
  1837                           ;doprnt.c: 834: }
  1838                           ;doprnt.c: 835: exp = 0;
  1839  0161  1683               	bsf	3,5	;RP0=1, select bank1
  1840  0162  1303               	bcf	3,6	;RP1=0, select bank1
  1841  0163  01A6               	clrf	sprintf@exp^(0+128)
  1842  0164  01A7               	clrf	(sprintf@exp+1)^(0+128)
  1843                           
  1844                           ;doprnt.c: 836: if( fval!=0) {
  1845  0165  0835               	movf	(sprintf@fval+2)^(0+128),w
  1846  0166  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  1847  0167  0433               	iorwf	sprintf@fval^(0+128),w
  1848  0168  1903               	skipnz
  1849  0169  2A55               	goto	l3682
  1850                           
  1851                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1852  016A  30B3               	movlw	low (sprintf@fval| 0)
  1853  016B  0084               	movwf	4
  1854  016C  1383               	bcf	3,7	;select IRP bank1
  1855  016D  0800               	movf	0,w
  1856  016E  1283               	bcf	3,5	;RP0=0, select bank0
  1857  016F  1303               	bcf	3,6	;RP1=0, select bank0
  1858  0170  00E2               	movwf	??_sprintf
  1859  0171  0A84               	incf	4,f
  1860  0172  0800               	movf	0,w
  1861  0173  00E3               	movwf	??_sprintf+1
  1862  0174  0A84               	incf	4,f
  1863  0175  0800               	movf	0,w
  1864  0176  00E4               	movwf	??_sprintf+2
  1865  0177  0A84               	incf	4,f
  1866  0178  0800               	movf	0,w
  1867  0179  00E5               	movwf	??_sprintf+3
  1868  017A  300F               	movlw	15
  1869  017B                     u5965:	
  1870  017B  1003               	clrc
  1871  017C  0CE5               	rrf	??_sprintf+3,f
  1872  017D  0CE4               	rrf	??_sprintf+2,f
  1873  017E  0CE3               	rrf	??_sprintf+1,f
  1874  017F  0CE2               	rrf	??_sprintf,f
  1875  0180  3EFF               	addlw	-1
  1876  0181  1D03               	skipz
  1877  0182  297B               	goto	u5965
  1878  0183  30FF               	movlw	255
  1879  0184  0562               	andwf	??_sprintf,w
  1880  0185  00E6               	movwf	??_sprintf+4
  1881  0186  3000               	movlw	0
  1882  0187  0563               	andwf	??_sprintf+1,w
  1883  0188  00E7               	movwf	??_sprintf+5
  1884  0189  0866               	movf	??_sprintf+4,w
  1885  018A  3E82               	addlw	130
  1886  018B  1683               	bsf	3,5	;RP0=1, select bank1
  1887  018C  1303               	bcf	3,6	;RP1=0, select bank1
  1888  018D  00A6               	movwf	sprintf@exp^(0+128)
  1889  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1890  018F  1303               	bcf	3,6	;RP1=0, select bank0
  1891  0190  0867               	movf	??_sprintf+5,w
  1892  0191  1803               	skipnc
  1893  0192  3E01               	addlw	1
  1894  0193  3EFF               	addlw	255
  1895  0194  1683               	bsf	3,5	;RP0=1, select bank1
  1896  0195  1303               	bcf	3,6	;RP1=0, select bank1
  1897  0196  00A7               	movwf	(sprintf@exp+1)^(0+128)
  1898                           
  1899                           ;doprnt.c: 838: exp--;
  1900  0197  30FF               	movlw	255
  1901  0198  07A6               	addwf	sprintf@exp^(0+128),f
  1902  0199  1803               	skipnc
  1903  019A  0AA7               	incf	(sprintf@exp+1)^(0+128),f
  1904  019B  30FF               	movlw	255
  1905  019C  07A7               	addwf	(sprintf@exp+1)^(0+128),f
  1906                           
  1907                           ;doprnt.c: 839: exp *= 3;
  1908  019D  3003               	movlw	3
  1909  019E  00F0               	movwf	___wmul@multiplier
  1910  019F  3000               	movlw	0
  1911  01A0  00F1               	movwf	___wmul@multiplier+1
  1912  01A1  0827               	movf	(sprintf@exp+1)^(0+128),w
  1913  01A2  00F3               	movwf	___wmul@multiplicand+1
  1914  01A3  0826               	movf	sprintf@exp^(0+128),w
  1915  01A4  00F2               	movwf	___wmul@multiplicand
  1916  01A5  160A  118A  2182  120A  118A  	fcall	___wmul
  1917  01AA  0871               	movf	?___wmul+1,w
  1918  01AB  1683               	bsf	3,5	;RP0=1, select bank1
  1919  01AC  1303               	bcf	3,6	;RP1=0, select bank1
  1920  01AD  00A7               	movwf	(sprintf@exp+1)^(0+128)
  1921  01AE  0870               	movf	?___wmul,w
  1922  01AF  00A6               	movwf	sprintf@exp^(0+128)
  1923                           
  1924                           ;doprnt.c: 840: exp /= 10;
  1925  01B0  300A               	movlw	10
  1926  01B1  00F0               	movwf	___awdiv@divisor
  1927  01B2  3000               	movlw	0
  1928  01B3  00F1               	movwf	___awdiv@divisor+1
  1929  01B4  0827               	movf	(sprintf@exp+1)^(0+128),w
  1930  01B5  00F3               	movwf	___awdiv@dividend+1
  1931  01B6  0826               	movf	sprintf@exp^(0+128),w
  1932  01B7  00F2               	movwf	___awdiv@dividend
  1933  01B8  160A  118A  22EA  120A  118A  	fcall	___awdiv
  1934  01BD  0871               	movf	?___awdiv+1,w
  1935  01BE  1683               	bsf	3,5	;RP0=1, select bank1
  1936  01BF  1303               	bcf	3,6	;RP1=0, select bank1
  1937  01C0  00A7               	movwf	(sprintf@exp+1)^(0+128)
  1938  01C1  0870               	movf	?___awdiv,w
  1939  01C2  00A6               	movwf	sprintf@exp^(0+128)
  1940                           
  1941                           ;doprnt.c: 841: if(exp < 0)
  1942  01C3  1FA7               	btfss	(sprintf@exp+1)^(0+128),7
  1943  01C4  29CB               	goto	l3670
  1944                           
  1945                           ;doprnt.c: 842: exp--;
  1946  01C5  30FF               	movlw	255
  1947  01C6  07A6               	addwf	sprintf@exp^(0+128),f
  1948  01C7  1803               	skipnc
  1949  01C8  0AA7               	incf	(sprintf@exp+1)^(0+128),f
  1950  01C9  30FF               	movlw	255
  1951  01CA  07A7               	addwf	(sprintf@exp+1)^(0+128),f
  1952  01CB                     l3670:	
  1953                           
  1954                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1955  01CB  0326               	decf	sprintf@exp^(0+128),w
  1956  01CC  3AFF               	xorlw	255
  1957  01CD  120A  158A  2565  120A  118A  	fcall	_scale
  1958  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  1959  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  1960  01D4  0836               	movf	?_scale,w
  1961  01D5  1683               	bsf	3,5	;RP0=1, select bank1
  1962  01D6  1303               	bcf	3,6	;RP1=0, select bank1
  1963  01D7  00A8               	movwf	sprintf@tmpval^(0+128)
  1964  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  1965  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  1966  01DA  0837               	movf	?_scale+1,w
  1967  01DB  1683               	bsf	3,5	;RP0=1, select bank1
  1968  01DC  1303               	bcf	3,6	;RP1=0, select bank1
  1969  01DD  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  1970  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  1971  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  1972  01E0  0838               	movf	?_scale+2,w
  1973  01E1  1683               	bsf	3,5	;RP0=1, select bank1
  1974  01E2  1303               	bcf	3,6	;RP1=0, select bank1
  1975  01E3  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  1976                           
  1977                           ;doprnt.c: 847: tmpval.integ *= fval;
  1978  01E4  0833               	movf	sprintf@fval^(0+128),w
  1979  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1980  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1981  01E7  00A6               	movwf	___ftmul@f1
  1982  01E8  1683               	bsf	3,5	;RP0=1, select bank1
  1983  01E9  1303               	bcf	3,6	;RP1=0, select bank1
  1984  01EA  0834               	movf	(sprintf@fval+1)^(0+128),w
  1985  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  1986  01EC  1303               	bcf	3,6	;RP1=0, select bank0
  1987  01ED  00A7               	movwf	___ftmul@f1+1
  1988  01EE  1683               	bsf	3,5	;RP0=1, select bank1
  1989  01EF  1303               	bcf	3,6	;RP1=0, select bank1
  1990  01F0  0835               	movf	(sprintf@fval+2)^(0+128),w
  1991  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1992  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  1993  01F3  00A8               	movwf	___ftmul@f1+2
  1994  01F4  1683               	bsf	3,5	;RP0=1, select bank1
  1995  01F5  1303               	bcf	3,6	;RP1=0, select bank1
  1996  01F6  0828               	movf	sprintf@tmpval^(0+128),w
  1997  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  1998  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  1999  01F9  00A9               	movwf	___ftmul@f2
  2000  01FA  1683               	bsf	3,5	;RP0=1, select bank1
  2001  01FB  1303               	bcf	3,6	;RP1=0, select bank1
  2002  01FC  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  2003  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2004  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2005  01FF  00AA               	movwf	___ftmul@f2+1
  2006  0200  1683               	bsf	3,5	;RP0=1, select bank1
  2007  0201  1303               	bcf	3,6	;RP1=0, select bank1
  2008  0202  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  2009  0203  1283               	bcf	3,5	;RP0=0, select bank0
  2010  0204  1303               	bcf	3,6	;RP1=0, select bank0
  2011  0205  00AB               	movwf	___ftmul@f2+2
  2012  0206  160A  118A  272D  120A  118A  	fcall	___ftmul
  2013  020B  1283               	bcf	3,5	;RP0=0, select bank0
  2014  020C  1303               	bcf	3,6	;RP1=0, select bank0
  2015  020D  0826               	movf	?___ftmul,w
  2016  020E  1683               	bsf	3,5	;RP0=1, select bank1
  2017  020F  1303               	bcf	3,6	;RP1=0, select bank1
  2018  0210  00A8               	movwf	sprintf@tmpval^(0+128)
  2019  0211  1283               	bcf	3,5	;RP0=0, select bank0
  2020  0212  1303               	bcf	3,6	;RP1=0, select bank0
  2021  0213  0827               	movf	?___ftmul+1,w
  2022  0214  1683               	bsf	3,5	;RP0=1, select bank1
  2023  0215  1303               	bcf	3,6	;RP1=0, select bank1
  2024  0216  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  2025  0217  1283               	bcf	3,5	;RP0=0, select bank0
  2026  0218  1303               	bcf	3,6	;RP1=0, select bank0
  2027  0219  0828               	movf	?___ftmul+2,w
  2028  021A  1683               	bsf	3,5	;RP0=1, select bank1
  2029  021B  1303               	bcf	3,6	;RP1=0, select bank1
  2030  021C  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  2031                           
  2032                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2033  021D  0828               	movf	sprintf@tmpval^(0+128),w
  2034  021E  00F0               	movwf	___ftge@ff1
  2035  021F  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  2036  0220  00F1               	movwf	___ftge@ff1+1
  2037  0221  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  2038  0222  00F2               	movwf	___ftge@ff1+2
  2039  0223  3000               	movlw	0
  2040  0224  00F3               	movwf	___ftge@ff2
  2041  0225  3080               	movlw	128
  2042  0226  00F4               	movwf	___ftge@ff2+1
  2043  0227  303F               	movlw	63
  2044  0228  00F5               	movwf	___ftge@ff2+2
  2045  0229  160A  118A  2343  120A  118A  	fcall	___ftge
  2046  022E  1803               	btfsc	3,0
  2047  022F  2A38               	goto	l3678
  2048                           
  2049                           ;doprnt.c: 849: exp--;
  2050  0230  30FF               	movlw	255
  2051  0231  1683               	bsf	3,5	;RP0=1, select bank1
  2052  0232  1303               	bcf	3,6	;RP1=0, select bank1
  2053  0233  07A6               	addwf	sprintf@exp^(0+128),f
  2054  0234  1803               	skipnc
  2055  0235  0AA7               	incf	(sprintf@exp+1)^(0+128),f
  2056  0236  30FF               	movlw	255
  2057  0237  2A54               	goto	L1
  2058  0238                     l3678:	
  2059                           
  2060                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2061  0238  1683               	bsf	3,5	;RP0=1, select bank1
  2062  0239  1303               	bcf	3,6	;RP1=0, select bank1
  2063  023A  0828               	movf	sprintf@tmpval^(0+128),w
  2064  023B  00F0               	movwf	___ftge@ff1
  2065  023C  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  2066  023D  00F1               	movwf	___ftge@ff1+1
  2067  023E  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  2068  023F  00F2               	movwf	___ftge@ff1+2
  2069  0240  3000               	movlw	0
  2070  0241  00F3               	movwf	___ftge@ff2
  2071  0242  3020               	movlw	32
  2072  0243  00F4               	movwf	___ftge@ff2+1
  2073  0244  3041               	movlw	65
  2074  0245  00F5               	movwf	___ftge@ff2+2
  2075  0246  160A  118A  2343  120A  118A  	fcall	___ftge
  2076  024B  1C03               	btfss	3,0
  2077  024C  2A55               	goto	l3682
  2078                           
  2079                           ;doprnt.c: 851: exp++;
  2080  024D  3001               	movlw	1
  2081  024E  1683               	bsf	3,5	;RP0=1, select bank1
  2082  024F  1303               	bcf	3,6	;RP1=0, select bank1
  2083  0250  07A6               	addwf	sprintf@exp^(0+128),f
  2084  0251  1803               	skipnc
  2085  0252  0AA7               	incf	(sprintf@exp+1)^(0+128),f
  2086  0253  3000               	movlw	0
  2087  0254                     L1:	
  2088  0254  07A7               	addwf	(sprintf@exp+1)^(0+128),f
  2089  0255                     l3682:	
  2090                           
  2091                           ;doprnt.c: 852: }
  2092                           ;doprnt.c: 1112: if(prec <= 12)
  2093  0255  1683               	bsf	3,5	;RP0=1, select bank1
  2094  0256  1303               	bcf	3,6	;RP1=0, select bank1
  2095  0257  0832               	movf	(sprintf@prec+1)^(0+128),w
  2096  0258  3A80               	xorlw	128
  2097  0259  00FF               	movwf	127
  2098  025A  3080               	movlw	128
  2099  025B  027F               	subwf	127,w
  2100  025C  1D03               	skipz
  2101  025D  2A60               	goto	u6005
  2102  025E  300D               	movlw	13
  2103  025F  0231               	subwf	sprintf@prec^(0+128),w
  2104  0260                     u6005:	
  2105  0260  1803               	skipnc
  2106  0261  2A9B               	goto	l3686
  2107                           
  2108                           ;doprnt.c: 1113: fval += fround(prec);
  2109  0262  1683               	bsf	3,5	;RP0=1, select bank1
  2110  0263  1303               	bcf	3,6	;RP1=0, select bank1
  2111  0264  0831               	movf	sprintf@prec^(0+128),w
  2112  0265  120A  158A  23CB  120A  118A  	fcall	_fround
  2113  026A  1283               	bcf	3,5	;RP0=0, select bank0
  2114  026B  1303               	bcf	3,6	;RP1=0, select bank0
  2115  026C  0836               	movf	?_fround,w
  2116  026D  00C6               	movwf	___ftadd@f1
  2117  026E  0837               	movf	?_fround+1,w
  2118  026F  00C7               	movwf	___ftadd@f1+1
  2119  0270  0838               	movf	?_fround+2,w
  2120  0271  00C8               	movwf	___ftadd@f1+2
  2121  0272  1683               	bsf	3,5	;RP0=1, select bank1
  2122  0273  1303               	bcf	3,6	;RP1=0, select bank1
  2123  0274  0833               	movf	sprintf@fval^(0+128),w
  2124  0275  1283               	bcf	3,5	;RP0=0, select bank0
  2125  0276  1303               	bcf	3,6	;RP1=0, select bank0
  2126  0277  00C9               	movwf	___ftadd@f2
  2127  0278  1683               	bsf	3,5	;RP0=1, select bank1
  2128  0279  1303               	bcf	3,6	;RP1=0, select bank1
  2129  027A  0834               	movf	(sprintf@fval+1)^(0+128),w
  2130  027B  1283               	bcf	3,5	;RP0=0, select bank0
  2131  027C  1303               	bcf	3,6	;RP1=0, select bank0
  2132  027D  00CA               	movwf	___ftadd@f2+1
  2133  027E  1683               	bsf	3,5	;RP0=1, select bank1
  2134  027F  1303               	bcf	3,6	;RP1=0, select bank1
  2135  0280  0835               	movf	(sprintf@fval+2)^(0+128),w
  2136  0281  1283               	bcf	3,5	;RP0=0, select bank0
  2137  0282  1303               	bcf	3,6	;RP1=0, select bank0
  2138  0283  00CB               	movwf	___ftadd@f2+2
  2139  0284  120A  158A  2067  120A  118A  	fcall	___ftadd
  2140  0289  1283               	bcf	3,5	;RP0=0, select bank0
  2141  028A  1303               	bcf	3,6	;RP1=0, select bank0
  2142  028B  0846               	movf	?___ftadd,w
  2143  028C  1683               	bsf	3,5	;RP0=1, select bank1
  2144  028D  1303               	bcf	3,6	;RP1=0, select bank1
  2145  028E  00B3               	movwf	sprintf@fval^(0+128)
  2146  028F  1283               	bcf	3,5	;RP0=0, select bank0
  2147  0290  1303               	bcf	3,6	;RP1=0, select bank0
  2148  0291  0847               	movf	?___ftadd+1,w
  2149  0292  1683               	bsf	3,5	;RP0=1, select bank1
  2150  0293  1303               	bcf	3,6	;RP1=0, select bank1
  2151  0294  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2152  0295  1283               	bcf	3,5	;RP0=0, select bank0
  2153  0296  1303               	bcf	3,6	;RP1=0, select bank0
  2154  0297  0848               	movf	?___ftadd+2,w
  2155  0298  1683               	bsf	3,5	;RP0=1, select bank1
  2156  0299  1303               	bcf	3,6	;RP1=0, select bank1
  2157  029A  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2158  029B                     l3686:	
  2159                           
  2160                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2161  029B  1683               	bsf	3,5	;RP0=1, select bank1
  2162  029C  1303               	bcf	3,6	;RP1=0, select bank1
  2163  029D  0827               	movf	(sprintf@exp+1)^(0+128),w
  2164  029E  3A80               	xorlw	128
  2165  029F  00FF               	movwf	127
  2166  02A0  3080               	movlw	128
  2167  02A1  027F               	subwf	127,w
  2168  02A2  1D03               	skipz
  2169  02A3  2AA6               	goto	u6015
  2170  02A4  300A               	movlw	10
  2171  02A5  0226               	subwf	sprintf@exp^(0+128),w
  2172  02A6                     u6015:	
  2173  02A6  1803               	skipnc
  2174  02A7  2AD9               	goto	l3694
  2175  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  2176  02A9  1303               	bcf	3,6	;RP1=0, select bank1
  2177  02AA  0835               	movf	(sprintf@fval+2)^(0+128),w
  2178  02AB  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  2179  02AC  0433               	iorwf	sprintf@fval^(0+128),w
  2180  02AD  1903               	skipnz
  2181  02AE  2B32               	goto	l3708
  2182  02AF  0833               	movf	sprintf@fval^(0+128),w
  2183  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  2184  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  2185  02B2  00BF               	movwf	___fttol@f1
  2186  02B3  1683               	bsf	3,5	;RP0=1, select bank1
  2187  02B4  1303               	bcf	3,6	;RP1=0, select bank1
  2188  02B5  0834               	movf	(sprintf@fval+1)^(0+128),w
  2189  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  2190  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  2191  02B8  00C0               	movwf	___fttol@f1+1
  2192  02B9  1683               	bsf	3,5	;RP0=1, select bank1
  2193  02BA  1303               	bcf	3,6	;RP1=0, select bank1
  2194  02BB  0835               	movf	(sprintf@fval+2)^(0+128),w
  2195  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  2196  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  2197  02BE  00C1               	movwf	___fttol@f1+2
  2198  02BF  160A  118A  2495  120A  118A  	fcall	___fttol
  2199  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  2200  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  2201  02C6  0842               	movf	?___fttol+3,w
  2202  02C7  0441               	iorwf	?___fttol+2,w
  2203  02C8  0440               	iorwf	?___fttol+1,w
  2204  02C9  043F               	iorwf	?___fttol,w
  2205  02CA  1D03               	skipz
  2206  02CB  2B32               	goto	l3708
  2207  02CC  1683               	bsf	3,5	;RP0=1, select bank1
  2208  02CD  1303               	bcf	3,6	;RP1=0, select bank1
  2209  02CE  0827               	movf	(sprintf@exp+1)^(0+128),w
  2210  02CF  3A80               	xorlw	128
  2211  02D0  00FF               	movwf	127
  2212  02D1  3080               	movlw	128
  2213  02D2  027F               	subwf	127,w
  2214  02D3  1D03               	skipz
  2215  02D4  2AD7               	goto	u6045
  2216  02D5  3002               	movlw	2
  2217  02D6  0226               	subwf	sprintf@exp^(0+128),w
  2218  02D7                     u6045:	
  2219  02D7  1C03               	skipc
  2220  02D8  2B32               	goto	l3708
  2221  02D9                     l3694:	
  2222                           
  2223                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2224  02D9  1683               	bsf	3,5	;RP0=1, select bank1
  2225  02DA  1303               	bcf	3,6	;RP1=0, select bank1
  2226  02DB  0828               	movf	sprintf@tmpval^(0+128),w
  2227  02DC  00F0               	movwf	___ftge@ff1
  2228  02DD  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  2229  02DE  00F1               	movwf	___ftge@ff1+1
  2230  02DF  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  2231  02E0  00F2               	movwf	___ftge@ff1+2
  2232  02E1  3070               	movlw	112
  2233  02E2  00F3               	movwf	___ftge@ff2
  2234  02E3  3089               	movlw	137
  2235  02E4  00F4               	movwf	___ftge@ff2+1
  2236  02E5  3040               	movlw	64
  2237  02E6  00F5               	movwf	___ftge@ff2+2
  2238  02E7  160A  118A  2343  120A  118A  	fcall	___ftge
  2239  02EC  1803               	btfsc	3,0
  2240  02ED  2AF0               	goto	l3698
  2241                           
  2242                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2243  02EE  30F7               	movlw	247
  2244  02EF  2AF1               	goto	L2
  2245  02F0                     l3698:	
  2246                           ;doprnt.c: 1122: }else{
  2247                           
  2248                           
  2249                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2250  02F0  30F8               	movlw	248
  2251  02F1                     L2:	
  2252  02F1  1683               	bsf	3,5	;RP0=1, select bank1
  2253  02F2  1303               	bcf	3,6	;RP1=0, select bank1
  2254  02F3  07A6               	addwf	sprintf@exp^(0+128),f
  2255  02F4  1803               	skipnc
  2256  02F5  0AA7               	incf	(sprintf@exp+1)^(0+128),f
  2257  02F6  30FF               	movlw	255
  2258  02F7  07A7               	addwf	(sprintf@exp+1)^(0+128),f
  2259                           
  2260                           ;doprnt.c: 1124: }
  2261                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2262  02F8  0826               	movf	sprintf@exp^(0+128),w
  2263  02F9  120A  158A  2565  120A  118A  	fcall	_scale
  2264  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  2265  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  2266  0300  0836               	movf	?_scale,w
  2267  0301  1683               	bsf	3,5	;RP0=1, select bank1
  2268  0302  1303               	bcf	3,6	;RP1=0, select bank1
  2269  0303  00A8               	movwf	sprintf@tmpval^(0+128)
  2270  0304  1283               	bcf	3,5	;RP0=0, select bank0
  2271  0305  1303               	bcf	3,6	;RP1=0, select bank0
  2272  0306  0837               	movf	?_scale+1,w
  2273  0307  1683               	bsf	3,5	;RP0=1, select bank1
  2274  0308  1303               	bcf	3,6	;RP1=0, select bank1
  2275  0309  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  2276  030A  1283               	bcf	3,5	;RP0=0, select bank0
  2277  030B  1303               	bcf	3,6	;RP1=0, select bank0
  2278  030C  0838               	movf	?_scale+2,w
  2279  030D  1683               	bsf	3,5	;RP0=1, select bank1
  2280  030E  1303               	bcf	3,6	;RP1=0, select bank1
  2281  030F  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  2282                           
  2283                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2284  0310  0833               	movf	sprintf@fval^(0+128),w
  2285  0311  00F0               	movwf	__tdiv_to_l_@f1
  2286  0312  0834               	movf	(sprintf@fval+1)^(0+128),w
  2287  0313  00F1               	movwf	__tdiv_to_l_@f1+1
  2288  0314  0835               	movf	(sprintf@fval+2)^(0+128),w
  2289  0315  00F2               	movwf	__tdiv_to_l_@f1+2
  2290  0316  0828               	movf	sprintf@tmpval^(0+128),w
  2291  0317  00F3               	movwf	__tdiv_to_l_@f2
  2292  0318  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  2293  0319  00F4               	movwf	__tdiv_to_l_@f2+1
  2294  031A  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  2295  031B  00F5               	movwf	__tdiv_to_l_@f2+2
  2296  031C  160A  118A  266A  120A  118A  	fcall	__tdiv_to_l_
  2297  0321  0873               	movf	?__tdiv_to_l_+3,w
  2298  0322  1683               	bsf	3,5	;RP0=1, select bank1
  2299  0323  1303               	bcf	3,6	;RP1=0, select bank1
  2300  0324  00AF               	movwf	(sprintf@val+3)^(0+128)
  2301  0325  0872               	movf	?__tdiv_to_l_+2,w
  2302  0326  00AE               	movwf	(sprintf@val+2)^(0+128)
  2303  0327  0871               	movf	?__tdiv_to_l_+1,w
  2304  0328  00AD               	movwf	(sprintf@val+1)^(0+128)
  2305  0329  0870               	movf	?__tdiv_to_l_,w
  2306  032A  00AC               	movwf	sprintf@val^(0+128)
  2307                           
  2308                           ;doprnt.c: 1129: fval = 0.0;
  2309  032B  3000               	movlw	0
  2310  032C  00B3               	movwf	sprintf@fval^(0+128)
  2311  032D  3000               	movlw	0
  2312  032E  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2313  032F  3000               	movlw	0
  2314  0330  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2315                           
  2316                           ;doprnt.c: 1130: } else {
  2317  0331  2BA1               	goto	l3712
  2318  0332                     l3708:	
  2319                           
  2320                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2321  0332  1683               	bsf	3,5	;RP0=1, select bank1
  2322  0333  1303               	bcf	3,6	;RP1=0, select bank1
  2323  0334  0833               	movf	sprintf@fval^(0+128),w
  2324  0335  1283               	bcf	3,5	;RP0=0, select bank0
  2325  0336  1303               	bcf	3,6	;RP1=0, select bank0
  2326  0337  00BF               	movwf	___fttol@f1
  2327  0338  1683               	bsf	3,5	;RP0=1, select bank1
  2328  0339  1303               	bcf	3,6	;RP1=0, select bank1
  2329  033A  0834               	movf	(sprintf@fval+1)^(0+128),w
  2330  033B  1283               	bcf	3,5	;RP0=0, select bank0
  2331  033C  1303               	bcf	3,6	;RP1=0, select bank0
  2332  033D  00C0               	movwf	___fttol@f1+1
  2333  033E  1683               	bsf	3,5	;RP0=1, select bank1
  2334  033F  1303               	bcf	3,6	;RP1=0, select bank1
  2335  0340  0835               	movf	(sprintf@fval+2)^(0+128),w
  2336  0341  1283               	bcf	3,5	;RP0=0, select bank0
  2337  0342  1303               	bcf	3,6	;RP1=0, select bank0
  2338  0343  00C1               	movwf	___fttol@f1+2
  2339  0344  160A  118A  2495  120A  118A  	fcall	___fttol
  2340  0349  1283               	bcf	3,5	;RP0=0, select bank0
  2341  034A  1303               	bcf	3,6	;RP1=0, select bank0
  2342  034B  0842               	movf	?___fttol+3,w
  2343  034C  1683               	bsf	3,5	;RP0=1, select bank1
  2344  034D  1303               	bcf	3,6	;RP1=0, select bank1
  2345  034E  00AF               	movwf	(sprintf@val+3)^(0+128)
  2346  034F  1283               	bcf	3,5	;RP0=0, select bank0
  2347  0350  1303               	bcf	3,6	;RP1=0, select bank0
  2348  0351  0841               	movf	?___fttol+2,w
  2349  0352  1683               	bsf	3,5	;RP0=1, select bank1
  2350  0353  1303               	bcf	3,6	;RP1=0, select bank1
  2351  0354  00AE               	movwf	(sprintf@val+2)^(0+128)
  2352  0355  1283               	bcf	3,5	;RP0=0, select bank0
  2353  0356  1303               	bcf	3,6	;RP1=0, select bank0
  2354  0357  0840               	movf	?___fttol+1,w
  2355  0358  1683               	bsf	3,5	;RP0=1, select bank1
  2356  0359  1303               	bcf	3,6	;RP1=0, select bank1
  2357  035A  00AD               	movwf	(sprintf@val+1)^(0+128)
  2358  035B  1283               	bcf	3,5	;RP0=0, select bank0
  2359  035C  1303               	bcf	3,6	;RP1=0, select bank0
  2360  035D  083F               	movf	?___fttol,w
  2361  035E  1683               	bsf	3,5	;RP0=1, select bank1
  2362  035F  1303               	bcf	3,6	;RP1=0, select bank1
  2363  0360  00AC               	movwf	sprintf@val^(0+128)
  2364                           
  2365                           ;doprnt.c: 1132: fval -= (double)val;
  2366  0361  082F               	movf	(sprintf@val+3)^(0+128),w
  2367  0362  00FB               	movwf	___lltoft@c+3
  2368  0363  082E               	movf	(sprintf@val+2)^(0+128),w
  2369  0364  00FA               	movwf	___lltoft@c+2
  2370  0365  082D               	movf	(sprintf@val+1)^(0+128),w
  2371  0366  00F9               	movwf	___lltoft@c+1
  2372  0367  082C               	movf	sprintf@val^(0+128),w
  2373  0368  00F8               	movwf	___lltoft@c
  2374  0369  160A  118A  21F1  120A  118A  	fcall	___lltoft
  2375  036E  0878               	movf	?___lltoft,w
  2376  036F  1283               	bcf	3,5	;RP0=0, select bank0
  2377  0370  1303               	bcf	3,6	;RP1=0, select bank0
  2378  0371  00D3               	movwf	___ftsub@f2
  2379  0372  0879               	movf	?___lltoft+1,w
  2380  0373  00D4               	movwf	___ftsub@f2+1
  2381  0374  087A               	movf	?___lltoft+2,w
  2382  0375  00D5               	movwf	___ftsub@f2+2
  2383  0376  1683               	bsf	3,5	;RP0=1, select bank1
  2384  0377  1303               	bcf	3,6	;RP1=0, select bank1
  2385  0378  0833               	movf	sprintf@fval^(0+128),w
  2386  0379  1283               	bcf	3,5	;RP0=0, select bank0
  2387  037A  1303               	bcf	3,6	;RP1=0, select bank0
  2388  037B  00D6               	movwf	___ftsub@f1
  2389  037C  1683               	bsf	3,5	;RP0=1, select bank1
  2390  037D  1303               	bcf	3,6	;RP1=0, select bank1
  2391  037E  0834               	movf	(sprintf@fval+1)^(0+128),w
  2392  037F  1283               	bcf	3,5	;RP0=0, select bank0
  2393  0380  1303               	bcf	3,6	;RP1=0, select bank0
  2394  0381  00D7               	movwf	___ftsub@f1+1
  2395  0382  1683               	bsf	3,5	;RP0=1, select bank1
  2396  0383  1303               	bcf	3,6	;RP1=0, select bank1
  2397  0384  0835               	movf	(sprintf@fval+2)^(0+128),w
  2398  0385  1283               	bcf	3,5	;RP0=0, select bank0
  2399  0386  1303               	bcf	3,6	;RP1=0, select bank0
  2400  0387  00D8               	movwf	___ftsub@f1+2
  2401  0388  160A  118A  2161  120A  118A  	fcall	___ftsub
  2402  038D  1283               	bcf	3,5	;RP0=0, select bank0
  2403  038E  1303               	bcf	3,6	;RP1=0, select bank0
  2404  038F  0853               	movf	?___ftsub,w
  2405  0390  1683               	bsf	3,5	;RP0=1, select bank1
  2406  0391  1303               	bcf	3,6	;RP1=0, select bank1
  2407  0392  00B3               	movwf	sprintf@fval^(0+128)
  2408  0393  1283               	bcf	3,5	;RP0=0, select bank0
  2409  0394  1303               	bcf	3,6	;RP1=0, select bank0
  2410  0395  0854               	movf	?___ftsub+1,w
  2411  0396  1683               	bsf	3,5	;RP0=1, select bank1
  2412  0397  1303               	bcf	3,6	;RP1=0, select bank1
  2413  0398  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2414  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2415  039A  1303               	bcf	3,6	;RP1=0, select bank0
  2416  039B  0855               	movf	?___ftsub+2,w
  2417  039C  1683               	bsf	3,5	;RP0=1, select bank1
  2418  039D  1303               	bcf	3,6	;RP1=0, select bank1
  2419  039E  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2420                           
  2421                           ;doprnt.c: 1133: exp = 0;
  2422  039F  01A6               	clrf	sprintf@exp^(0+128)
  2423  03A0  01A7               	clrf	(sprintf@exp+1)^(0+128)
  2424  03A1                     l3712:	
  2425                           
  2426                           ;doprnt.c: 1134: }
  2427                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2428  03A1  01B6               	clrf	sprintf@c^(0+128)
  2429  03A2  0AB6               	incf	sprintf@c^(0+128),f
  2430  03A3  300A               	movlw	10
  2431  03A4  0636               	xorwf	sprintf@c^(0+128),w
  2432  03A5  1903               	btfsc	3,2
  2433  03A6  2BF7               	goto	l3724
  2434  03A7                     l3718:	
  2435                           
  2436                           ;doprnt.c: 1137: if(val < dpowers[c])
  2437  03A7  0836               	movf	sprintf@c^(0+128),w
  2438  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  2439  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  2440  03AA  00E2               	movwf	??_sprintf
  2441  03AB  3001               	movlw	1
  2442  03AC                     u6075:	
  2443  03AC  1003               	clrc
  2444  03AD  0DE2               	rlf	??_sprintf,f
  2445  03AE  3EFF               	addlw	-1
  2446  03AF  1D03               	skipz
  2447  03B0  2BAC               	goto	u6075
  2448  03B1  1003               	clrc
  2449  03B2  0D62               	rlf	??_sprintf,w
  2450  03B3  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2451  03B4  0084               	movwf	4
  2452  03B5  160A  118A  200A  120A  118A  	fcall	stringdir
  2453  03BA  00E3               	movwf	??_sprintf+1
  2454  03BB  160A  118A  200A  120A  118A  	fcall	stringdir
  2455  03C0  00E4               	movwf	??_sprintf+2
  2456  03C1  160A  118A  200A  120A  118A  	fcall	stringdir
  2457  03C6  00E5               	movwf	??_sprintf+3
  2458  03C7  160A  118A  200A  120A  118A  	fcall	stringdir
  2459  03CC  00E6               	movwf	??_sprintf+4
  2460  03CD  0866               	movf	??_sprintf+4,w
  2461  03CE  1683               	bsf	3,5	;RP0=1, select bank1
  2462  03CF  1303               	bcf	3,6	;RP1=0, select bank1
  2463  03D0  022F               	subwf	(sprintf@val+3)^(0+128),w
  2464  03D1  1D03               	skipz
  2465  03D2  2BE9               	goto	u6085
  2466  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  2467  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  2468  03D5  0865               	movf	??_sprintf+3,w
  2469  03D6  1683               	bsf	3,5	;RP0=1, select bank1
  2470  03D7  1303               	bcf	3,6	;RP1=0, select bank1
  2471  03D8  022E               	subwf	(sprintf@val+2)^(0+128),w
  2472  03D9  1D03               	skipz
  2473  03DA  2BE9               	goto	u6085
  2474  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  2475  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  2476  03DD  0864               	movf	??_sprintf+2,w
  2477  03DE  1683               	bsf	3,5	;RP0=1, select bank1
  2478  03DF  1303               	bcf	3,6	;RP1=0, select bank1
  2479  03E0  022D               	subwf	(sprintf@val+1)^(0+128),w
  2480  03E1  1D03               	skipz
  2481  03E2  2BE9               	goto	u6085
  2482  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  2483  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  2484  03E5  0863               	movf	??_sprintf+1,w
  2485  03E6  1683               	bsf	3,5	;RP0=1, select bank1
  2486  03E7  1303               	bcf	3,6	;RP1=0, select bank1
  2487  03E8  022C               	subwf	sprintf@val^(0+128),w
  2488  03E9                     u6085:	
  2489  03E9  1C03               	btfss	3,0
  2490  03EA  2BF7               	goto	l3724
  2491                           
  2492                           ;doprnt.c: 1138: break;
  2493  03EB  3001               	movlw	1
  2494  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  2495  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  2496  03EE  00E2               	movwf	??_sprintf
  2497  03EF  0862               	movf	??_sprintf,w
  2498  03F0  1683               	bsf	3,5	;RP0=1, select bank1
  2499  03F1  1303               	bcf	3,6	;RP1=0, select bank1
  2500  03F2  07B6               	addwf	sprintf@c^(0+128),f
  2501  03F3  300A               	movlw	10
  2502  03F4  0636               	xorwf	sprintf@c^(0+128),w
  2503  03F5  1D03               	btfss	3,2
  2504  03F6  2BA7               	goto	l3718
  2505  03F7                     l3724:	
  2506                           
  2507                           ;doprnt.c: 1175: {
  2508                           ;doprnt.c: 1188: if(flag & 0x03)
  2509  03F7  3003               	movlw	3
  2510  03F8  0524               	andwf	sprintf@flag^(0+128),w
  2511  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  2512  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  2513  03FB  00E2               	movwf	??_sprintf
  2514  03FC  3000               	movlw	0
  2515  03FD  1683               	bsf	3,5	;RP0=1, select bank1
  2516  03FE  1303               	bcf	3,6	;RP1=0, select bank1
  2517  03FF  0525               	andwf	(sprintf@flag+1)^(0+128),w
  2518  0400  1283               	bcf	3,5	;RP0=0, select bank0
  2519  0401  1303               	bcf	3,6	;RP1=0, select bank0
  2520  0402  00E3               	movwf	??_sprintf+1
  2521  0403  0862               	movf	??_sprintf,w
  2522  0404  0463               	iorwf	??_sprintf+1,w
  2523  0405  1903               	btfsc	3,2
  2524  0406  2C18               	goto	l205
  2525                           
  2526                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2527  0407  302D               	movlw	45
  2528  0408                     L3:	
  2529  0408  00E2               	movwf	??_sprintf
  2530  0409  1683               	bsf	3,5	;RP0=1, select bank1
  2531  040A  1303               	bcf	3,6	;RP1=0, select bank1
  2532  040B  0830               	movf	sprintf@sp^(0+128),w
  2533  040C  0084               	movwf	4
  2534  040D  1283               	bcf	3,5	;RP0=0, select bank0
  2535  040E  1303               	bcf	3,6	;RP1=0, select bank0
  2536  040F  0862               	movf	??_sprintf,w
  2537  0410  1783               	bsf	3,7	;select IRP bank2
  2538  0411  0080               	movwf	0
  2539  0412  3001               	movlw	1
  2540  0413  00E2               	movwf	??_sprintf
  2541  0414  0862               	movf	??_sprintf,w
  2542  0415  1683               	bsf	3,5	;RP0=1, select bank1
  2543  0416  1303               	bcf	3,6	;RP1=0, select bank1
  2544  0417  07B0               	addwf	sprintf@sp^(0+128),f
  2545  0418                     l205:	
  2546  0418  30FF               	movlw	255
  2547  0419  1283               	bcf	3,5	;RP0=0, select bank0
  2548  041A  00E2               	movwf	??_sprintf
  2549  041B  0862               	movf	??_sprintf,w
  2550  041C  1683               	bsf	3,5	;RP0=1, select bank1
  2551  041D  1303               	bcf	3,6	;RP1=0, select bank1
  2552  041E  07B6               	addwf	sprintf@c^(0+128),f
  2553  041F  0A36               	incf	sprintf@c^(0+128),w
  2554  0420  1903               	btfsc	3,2
  2555  0421  2CBE               	goto	l3742
  2556                           
  2557                           ;doprnt.c: 1200: {
  2558                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2559                           
  2560                           ;doprnt.c: 1195: }
  2561                           ;doprnt.c: 1196: while(c--) {
  2562  0422  0836               	movf	sprintf@c^(0+128),w
  2563  0423  1283               	bcf	3,5	;RP0=0, select bank0
  2564  0424  1303               	bcf	3,6	;RP1=0, select bank0
  2565  0425  00E2               	movwf	??_sprintf
  2566  0426  3001               	movlw	1
  2567  0427                     u6115:	
  2568  0427  1003               	clrc
  2569  0428  0DE2               	rlf	??_sprintf,f
  2570  0429  3EFF               	addlw	-1
  2571  042A  1D03               	skipz
  2572  042B  2C27               	goto	u6115
  2573  042C  1003               	clrc
  2574  042D  0D62               	rlf	??_sprintf,w
  2575  042E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2576  042F  0084               	movwf	4
  2577  0430  160A  118A  200A  120A  118A  	fcall	stringdir
  2578  0435  00F0               	movwf	___lldiv@divisor
  2579  0436  160A  118A  200A  120A  118A  	fcall	stringdir
  2580  043B  00F1               	movwf	___lldiv@divisor+1
  2581  043C  160A  118A  200A  120A  118A  	fcall	stringdir
  2582  0441  00F2               	movwf	___lldiv@divisor+2
  2583  0442  160A  118A  200A  120A  118A  	fcall	stringdir
  2584  0447  00F3               	movwf	___lldiv@divisor+3
  2585  0448  1683               	bsf	3,5	;RP0=1, select bank1
  2586  0449  1303               	bcf	3,6	;RP1=0, select bank1
  2587  044A  082F               	movf	(sprintf@val+3)^(0+128),w
  2588  044B  00F7               	movwf	___lldiv@dividend+3
  2589  044C  082E               	movf	(sprintf@val+2)^(0+128),w
  2590  044D  00F6               	movwf	___lldiv@dividend+2
  2591  044E  082D               	movf	(sprintf@val+1)^(0+128),w
  2592  044F  00F5               	movwf	___lldiv@dividend+1
  2593  0450  082C               	movf	sprintf@val^(0+128),w
  2594  0451  00F4               	movwf	___lldiv@dividend
  2595  0452  120A  158A  2009  120A  118A  	fcall	___lldiv
  2596  0457  0873               	movf	?___lldiv+3,w
  2597  0458  1683               	bsf	3,5	;RP0=1, select bank1
  2598  0459  1303               	bcf	3,6	;RP1=0, select bank1
  2599  045A  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  2600  045B  0872               	movf	?___lldiv+2,w
  2601  045C  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  2602  045D  0871               	movf	?___lldiv+1,w
  2603  045E  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  2604  045F  0870               	movf	?___lldiv,w
  2605  0460  00A8               	movwf	sprintf@tmpval^(0+128)
  2606                           
  2607                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2608  0461  3000               	movlw	0
  2609  0462  1283               	bcf	3,5	;RP0=0, select bank0
  2610  0463  1303               	bcf	3,6	;RP1=0, select bank0
  2611  0464  00A3               	movwf	___llmod@divisor+3
  2612  0465  3000               	movlw	0
  2613  0466  00A2               	movwf	___llmod@divisor+2
  2614  0467  3000               	movlw	0
  2615  0468  00A1               	movwf	___llmod@divisor+1
  2616  0469  300A               	movlw	10
  2617  046A  00A0               	movwf	___llmod@divisor
  2618  046B  1683               	bsf	3,5	;RP0=1, select bank1
  2619  046C  1303               	bcf	3,6	;RP1=0, select bank1
  2620  046D  082B               	movf	(sprintf@tmpval+3)^(0+128),w
  2621  046E  1283               	bcf	3,5	;RP0=0, select bank0
  2622  046F  1303               	bcf	3,6	;RP1=0, select bank0
  2623  0470  00A7               	movwf	___llmod@dividend+3
  2624  0471  1683               	bsf	3,5	;RP0=1, select bank1
  2625  0472  1303               	bcf	3,6	;RP1=0, select bank1
  2626  0473  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  2627  0474  1283               	bcf	3,5	;RP0=0, select bank0
  2628  0475  1303               	bcf	3,6	;RP1=0, select bank0
  2629  0476  00A6               	movwf	___llmod@dividend+2
  2630  0477  1683               	bsf	3,5	;RP0=1, select bank1
  2631  0478  1303               	bcf	3,6	;RP1=0, select bank1
  2632  0479  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  2633  047A  1283               	bcf	3,5	;RP0=0, select bank0
  2634  047B  1303               	bcf	3,6	;RP1=0, select bank0
  2635  047C  00A5               	movwf	___llmod@dividend+1
  2636  047D  1683               	bsf	3,5	;RP0=1, select bank1
  2637  047E  1303               	bcf	3,6	;RP1=0, select bank1
  2638  047F  0828               	movf	sprintf@tmpval^(0+128),w
  2639  0480  1283               	bcf	3,5	;RP0=0, select bank0
  2640  0481  1303               	bcf	3,6	;RP1=0, select bank0
  2641  0482  00A4               	movwf	___llmod@dividend
  2642  0483  120A  118A  2003  120A  118A  	fcall	___llmod
  2643  0488  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0489  1303               	bcf	3,6	;RP1=0, select bank0
  2645  048A  0823               	movf	?___llmod+3,w
  2646  048B  1683               	bsf	3,5	;RP0=1, select bank1
  2647  048C  1303               	bcf	3,6	;RP1=0, select bank1
  2648  048D  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  2649  048E  1283               	bcf	3,5	;RP0=0, select bank0
  2650  048F  1303               	bcf	3,6	;RP1=0, select bank0
  2651  0490  0822               	movf	?___llmod+2,w
  2652  0491  1683               	bsf	3,5	;RP0=1, select bank1
  2653  0492  1303               	bcf	3,6	;RP1=0, select bank1
  2654  0493  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  2655  0494  1283               	bcf	3,5	;RP0=0, select bank0
  2656  0495  1303               	bcf	3,6	;RP1=0, select bank0
  2657  0496  0821               	movf	?___llmod+1,w
  2658  0497  1683               	bsf	3,5	;RP0=1, select bank1
  2659  0498  1303               	bcf	3,6	;RP1=0, select bank1
  2660  0499  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  2661  049A  1283               	bcf	3,5	;RP0=0, select bank0
  2662  049B  1303               	bcf	3,6	;RP1=0, select bank0
  2663  049C  0820               	movf	?___llmod,w
  2664  049D  1683               	bsf	3,5	;RP0=1, select bank1
  2665  049E  1303               	bcf	3,6	;RP1=0, select bank1
  2666  049F  00A8               	movwf	sprintf@tmpval^(0+128)
  2667                           
  2668                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2669  04A0  0828               	movf	sprintf@tmpval^(0+128),w
  2670  04A1  3E30               	addlw	48
  2671  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  2672  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  2673  04A4  2C08               	goto	L3
  2674  04A5                     l3736:	
  2675                           ;doprnt.c: 1204: }
  2676                           ;doprnt.c: 1206: }
  2677                           ;doprnt.c: 1207: while(exp > 0) {
  2678                           
  2679                           
  2680                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2681  04A5  3030               	movlw	48
  2682  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  2683  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  2684  04A8  00E2               	movwf	??_sprintf
  2685  04A9  1683               	bsf	3,5	;RP0=1, select bank1
  2686  04AA  1303               	bcf	3,6	;RP1=0, select bank1
  2687  04AB  0830               	movf	sprintf@sp^(0+128),w
  2688  04AC  0084               	movwf	4
  2689  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  2690  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  2691  04AF  0862               	movf	??_sprintf,w
  2692  04B0  1783               	bsf	3,7	;select IRP bank2
  2693  04B1  0080               	movwf	0
  2694  04B2  3001               	movlw	1
  2695  04B3  00E2               	movwf	??_sprintf
  2696  04B4  0862               	movf	??_sprintf,w
  2697  04B5  1683               	bsf	3,5	;RP0=1, select bank1
  2698  04B6  1303               	bcf	3,6	;RP1=0, select bank1
  2699  04B7  07B0               	addwf	sprintf@sp^(0+128),f
  2700                           
  2701                           ;doprnt.c: 1209: exp--;
  2702  04B8  30FF               	movlw	255
  2703  04B9  07A6               	addwf	sprintf@exp^(0+128),f
  2704  04BA  1803               	skipnc
  2705  04BB  0AA7               	incf	(sprintf@exp+1)^(0+128),f
  2706  04BC  30FF               	movlw	255
  2707  04BD  07A7               	addwf	(sprintf@exp+1)^(0+128),f
  2708  04BE                     l3742:	
  2709  04BE  0827               	movf	(sprintf@exp+1)^(0+128),w
  2710  04BF  3A80               	xorlw	128
  2711  04C0  00FF               	movwf	127
  2712  04C1  3080               	movlw	128
  2713  04C2  027F               	subwf	127,w
  2714  04C3  1D03               	skipz
  2715  04C4  2CC7               	goto	u6135
  2716  04C5  3001               	movlw	1
  2717  04C6  0226               	subwf	sprintf@exp^(0+128),w
  2718  04C7                     u6135:	
  2719  04C7  1803               	skipnc
  2720  04C8  2CA5               	goto	l3736
  2721                           
  2722                           ;doprnt.c: 1210: }
  2723                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2724  04C9  1683               	bsf	3,5	;RP0=1, select bank1
  2725  04CA  1303               	bcf	3,6	;RP1=0, select bank1
  2726  04CB  0832               	movf	(sprintf@prec+1)^(0+128),w
  2727  04CC  3A80               	xorlw	128
  2728  04CD  00FF               	movwf	127
  2729  04CE  3080               	movlw	128
  2730  04CF  027F               	subwf	127,w
  2731  04D0  1D03               	skipz
  2732  04D1  2CD4               	goto	u6145
  2733  04D2  3009               	movlw	9
  2734  04D3  0231               	subwf	sprintf@prec^(0+128),w
  2735  04D4                     u6145:	
  2736  04D4  1C03               	skipc
  2737  04D5  2CD8               	goto	l3748
  2738                           
  2739                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2740  04D6  3008               	movlw	8
  2741  04D7  2CDB               	goto	L4
  2742  04D8                     l3748:	
  2743                           
  2744                           ;doprnt.c: 1213: else
  2745                           ;doprnt.c: 1214: c = prec;
  2746  04D8  1683               	bsf	3,5	;RP0=1, select bank1
  2747  04D9  1303               	bcf	3,6	;RP1=0, select bank1
  2748  04DA  0831               	movf	sprintf@prec^(0+128),w
  2749  04DB                     L4:	
  2750  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  2751  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  2752  04DD  00E2               	movwf	??_sprintf
  2753  04DE  0862               	movf	??_sprintf,w
  2754  04DF  1683               	bsf	3,5	;RP0=1, select bank1
  2755  04E0  1303               	bcf	3,6	;RP1=0, select bank1
  2756  04E1  00B6               	movwf	sprintf@c^(0+128)
  2757                           
  2758                           ;doprnt.c: 1215: prec -= c;
  2759  04E2  0836               	movf	sprintf@c^(0+128),w
  2760  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  2761  04E4  1303               	bcf	3,6	;RP1=0, select bank0
  2762  04E5  00E2               	movwf	??_sprintf
  2763  04E6  01E3               	clrf	??_sprintf+1
  2764  04E7  1BE2               	btfsc	??_sprintf,7
  2765  04E8  03E3               	decf	??_sprintf+1,f
  2766  04E9  0862               	movf	??_sprintf,w
  2767  04EA  1683               	bsf	3,5	;RP0=1, select bank1
  2768  04EB  1303               	bcf	3,6	;RP1=0, select bank1
  2769  04EC  02B1               	subwf	sprintf@prec^(0+128),f
  2770  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  2771  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  2772  04EF  0863               	movf	??_sprintf+1,w
  2773  04F0  1683               	bsf	3,5	;RP0=1, select bank1
  2774  04F1  1303               	bcf	3,6	;RP1=0, select bank1
  2775  04F2  1C03               	skipc
  2776  04F3  03B2               	decf	(sprintf@prec+1)^(0+128),f
  2777  04F4  02B2               	subwf	(sprintf@prec+1)^(0+128),f
  2778                           
  2779                           ;doprnt.c: 1219: if(c)
  2780  04F5  0836               	movf	sprintf@c^(0+128),w
  2781  04F6  1903               	btfsc	3,2
  2782  04F7  2D0B               	goto	l3756
  2783                           
  2784                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2785  04F8  302E               	movlw	46
  2786  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  2787  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  2788  04FB  00E2               	movwf	??_sprintf
  2789  04FC  1683               	bsf	3,5	;RP0=1, select bank1
  2790  04FD  1303               	bcf	3,6	;RP1=0, select bank1
  2791  04FE  0830               	movf	sprintf@sp^(0+128),w
  2792  04FF  0084               	movwf	4
  2793  0500  1283               	bcf	3,5	;RP0=0, select bank0
  2794  0501  1303               	bcf	3,6	;RP1=0, select bank0
  2795  0502  0862               	movf	??_sprintf,w
  2796  0503  1783               	bsf	3,7	;select IRP bank2
  2797  0504  0080               	movwf	0
  2798  0505  3001               	movlw	1
  2799  0506  00E2               	movwf	??_sprintf
  2800  0507  0862               	movf	??_sprintf,w
  2801  0508  1683               	bsf	3,5	;RP0=1, select bank1
  2802  0509  1303               	bcf	3,6	;RP1=0, select bank1
  2803  050A  07B0               	addwf	sprintf@sp^(0+128),f
  2804  050B                     l3756:	
  2805                           
  2806                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2807  050B  0836               	movf	sprintf@c^(0+128),w
  2808  050C  120A  158A  2565  120A  118A  	fcall	_scale
  2809  0511  1283               	bcf	3,5	;RP0=0, select bank0
  2810  0512  1303               	bcf	3,6	;RP1=0, select bank0
  2811  0513  0836               	movf	?_scale,w
  2812  0514  1683               	bsf	3,5	;RP0=1, select bank1
  2813  0515  1303               	bcf	3,6	;RP1=0, select bank1
  2814  0516  00A0               	movwf	_sprintf$662^(0+128)
  2815  0517  1283               	bcf	3,5	;RP0=0, select bank0
  2816  0518  1303               	bcf	3,6	;RP1=0, select bank0
  2817  0519  0837               	movf	?_scale+1,w
  2818  051A  1683               	bsf	3,5	;RP0=1, select bank1
  2819  051B  1303               	bcf	3,6	;RP1=0, select bank1
  2820  051C  00A1               	movwf	(_sprintf$662+1)^(0+128)
  2821  051D  1283               	bcf	3,5	;RP0=0, select bank0
  2822  051E  1303               	bcf	3,6	;RP1=0, select bank0
  2823  051F  0838               	movf	?_scale+2,w
  2824  0520  1683               	bsf	3,5	;RP0=1, select bank1
  2825  0521  1303               	bcf	3,6	;RP1=0, select bank1
  2826  0522  00A2               	movwf	(_sprintf$662+2)^(0+128)
  2827                           
  2828                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2829  0523  0820               	movf	_sprintf$662^(0+128),w
  2830  0524  1283               	bcf	3,5	;RP0=0, select bank0
  2831  0525  1303               	bcf	3,6	;RP1=0, select bank0
  2832  0526  00A9               	movwf	___ftmul@f2
  2833  0527  1683               	bsf	3,5	;RP0=1, select bank1
  2834  0528  1303               	bcf	3,6	;RP1=0, select bank1
  2835  0529  0821               	movf	(_sprintf$662+1)^(0+128),w
  2836  052A  1283               	bcf	3,5	;RP0=0, select bank0
  2837  052B  1303               	bcf	3,6	;RP1=0, select bank0
  2838  052C  00AA               	movwf	___ftmul@f2+1
  2839  052D  1683               	bsf	3,5	;RP0=1, select bank1
  2840  052E  1303               	bcf	3,6	;RP1=0, select bank1
  2841  052F  0822               	movf	(_sprintf$662+2)^(0+128),w
  2842  0530  1283               	bcf	3,5	;RP0=0, select bank0
  2843  0531  1303               	bcf	3,6	;RP1=0, select bank0
  2844  0532  00AB               	movwf	___ftmul@f2+2
  2845  0533  1683               	bsf	3,5	;RP0=1, select bank1
  2846  0534  1303               	bcf	3,6	;RP1=0, select bank1
  2847  0535  0833               	movf	sprintf@fval^(0+128),w
  2848  0536  1283               	bcf	3,5	;RP0=0, select bank0
  2849  0537  1303               	bcf	3,6	;RP1=0, select bank0
  2850  0538  00A6               	movwf	___ftmul@f1
  2851  0539  1683               	bsf	3,5	;RP0=1, select bank1
  2852  053A  1303               	bcf	3,6	;RP1=0, select bank1
  2853  053B  0834               	movf	(sprintf@fval+1)^(0+128),w
  2854  053C  1283               	bcf	3,5	;RP0=0, select bank0
  2855  053D  1303               	bcf	3,6	;RP1=0, select bank0
  2856  053E  00A7               	movwf	___ftmul@f1+1
  2857  053F  1683               	bsf	3,5	;RP0=1, select bank1
  2858  0540  1303               	bcf	3,6	;RP1=0, select bank1
  2859  0541  0835               	movf	(sprintf@fval+2)^(0+128),w
  2860  0542  1283               	bcf	3,5	;RP0=0, select bank0
  2861  0543  1303               	bcf	3,6	;RP1=0, select bank0
  2862  0544  00A8               	movwf	___ftmul@f1+2
  2863  0545  160A  118A  272D  120A  118A  	fcall	___ftmul
  2864  054A  1283               	bcf	3,5	;RP0=0, select bank0
  2865  054B  1303               	bcf	3,6	;RP1=0, select bank0
  2866  054C  0826               	movf	?___ftmul,w
  2867  054D  00BF               	movwf	___fttol@f1
  2868  054E  0827               	movf	?___ftmul+1,w
  2869  054F  00C0               	movwf	___fttol@f1+1
  2870  0550  0828               	movf	?___ftmul+2,w
  2871  0551  00C1               	movwf	___fttol@f1+2
  2872  0552  160A  118A  2495  120A  118A  	fcall	___fttol
  2873  0557  1283               	bcf	3,5	;RP0=0, select bank0
  2874  0558  1303               	bcf	3,6	;RP1=0, select bank0
  2875  0559  0842               	movf	?___fttol+3,w
  2876  055A  1683               	bsf	3,5	;RP0=1, select bank1
  2877  055B  1303               	bcf	3,6	;RP1=0, select bank1
  2878  055C  00AF               	movwf	(sprintf@val+3)^(0+128)
  2879  055D  1283               	bcf	3,5	;RP0=0, select bank0
  2880  055E  1303               	bcf	3,6	;RP1=0, select bank0
  2881  055F  0841               	movf	?___fttol+2,w
  2882  0560  1683               	bsf	3,5	;RP0=1, select bank1
  2883  0561  1303               	bcf	3,6	;RP1=0, select bank1
  2884  0562  00AE               	movwf	(sprintf@val+2)^(0+128)
  2885  0563  1283               	bcf	3,5	;RP0=0, select bank0
  2886  0564  1303               	bcf	3,6	;RP1=0, select bank0
  2887  0565  0840               	movf	?___fttol+1,w
  2888  0566  1683               	bsf	3,5	;RP0=1, select bank1
  2889  0567  1303               	bcf	3,6	;RP1=0, select bank1
  2890  0568  00AD               	movwf	(sprintf@val+1)^(0+128)
  2891  0569  1283               	bcf	3,5	;RP0=0, select bank0
  2892  056A  1303               	bcf	3,6	;RP1=0, select bank0
  2893  056B  083F               	movf	?___fttol,w
  2894  056C                     L5:	
  2895  056C  1683               	bsf	3,5	;RP0=1, select bank1
  2896  056D  1303               	bcf	3,6	;RP1=0, select bank1
  2897  056E  00AC               	movwf	sprintf@val^(0+128)
  2898  056F  30FF               	movlw	255
  2899  0570  1283               	bcf	3,5	;RP0=0, select bank0
  2900  0571  1303               	bcf	3,6	;RP1=0, select bank0
  2901  0572  00E2               	movwf	??_sprintf
  2902  0573  0862               	movf	??_sprintf,w
  2903  0574  1683               	bsf	3,5	;RP0=1, select bank1
  2904  0575  1303               	bcf	3,6	;RP1=0, select bank1
  2905  0576  07B6               	addwf	sprintf@c^(0+128),f
  2906  0577  0A36               	incf	sprintf@c^(0+128),w
  2907  0578  1903               	btfsc	3,2
  2908  0579  2E7E               	goto	l3776
  2909                           
  2910                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2911                           
  2912                           ;doprnt.c: 1228: while(c--) {
  2913  057A  0836               	movf	sprintf@c^(0+128),w
  2914  057B  1283               	bcf	3,5	;RP0=0, select bank0
  2915  057C  1303               	bcf	3,6	;RP1=0, select bank0
  2916  057D  00E2               	movwf	??_sprintf
  2917  057E  3001               	movlw	1
  2918  057F                     u6165:	
  2919  057F  1003               	clrc
  2920  0580  0DE2               	rlf	??_sprintf,f
  2921  0581  3EFF               	addlw	-1
  2922  0582  1D03               	skipz
  2923  0583  2D7F               	goto	u6165
  2924  0584  1003               	clrc
  2925  0585  0D62               	rlf	??_sprintf,w
  2926  0586  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2927  0587  0084               	movwf	4
  2928  0588  160A  118A  200A  120A  118A  	fcall	stringdir
  2929  058D  00F0               	movwf	___lldiv@divisor
  2930  058E  160A  118A  200A  120A  118A  	fcall	stringdir
  2931  0593  00F1               	movwf	___lldiv@divisor+1
  2932  0594  160A  118A  200A  120A  118A  	fcall	stringdir
  2933  0599  00F2               	movwf	___lldiv@divisor+2
  2934  059A  160A  118A  200A  120A  118A  	fcall	stringdir
  2935  059F  00F3               	movwf	___lldiv@divisor+3
  2936  05A0  1683               	bsf	3,5	;RP0=1, select bank1
  2937  05A1  1303               	bcf	3,6	;RP1=0, select bank1
  2938  05A2  082F               	movf	(sprintf@val+3)^(0+128),w
  2939  05A3  00F7               	movwf	___lldiv@dividend+3
  2940  05A4  082E               	movf	(sprintf@val+2)^(0+128),w
  2941  05A5  00F6               	movwf	___lldiv@dividend+2
  2942  05A6  082D               	movf	(sprintf@val+1)^(0+128),w
  2943  05A7  00F5               	movwf	___lldiv@dividend+1
  2944  05A8  082C               	movf	sprintf@val^(0+128),w
  2945  05A9  00F4               	movwf	___lldiv@dividend
  2946  05AA  120A  158A  2009  120A  118A  	fcall	___lldiv
  2947  05AF  0873               	movf	?___lldiv+3,w
  2948  05B0  1683               	bsf	3,5	;RP0=1, select bank1
  2949  05B1  1303               	bcf	3,6	;RP1=0, select bank1
  2950  05B2  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  2951  05B3  0872               	movf	?___lldiv+2,w
  2952  05B4  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  2953  05B5  0871               	movf	?___lldiv+1,w
  2954  05B6  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  2955  05B7  0870               	movf	?___lldiv,w
  2956  05B8  00A8               	movwf	sprintf@tmpval^(0+128)
  2957                           
  2958                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2959  05B9  3000               	movlw	0
  2960  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  2961  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  2962  05BC  00A3               	movwf	___llmod@divisor+3
  2963  05BD  3000               	movlw	0
  2964  05BE  00A2               	movwf	___llmod@divisor+2
  2965  05BF  3000               	movlw	0
  2966  05C0  00A1               	movwf	___llmod@divisor+1
  2967  05C1  300A               	movlw	10
  2968  05C2  00A0               	movwf	___llmod@divisor
  2969  05C3  1683               	bsf	3,5	;RP0=1, select bank1
  2970  05C4  1303               	bcf	3,6	;RP1=0, select bank1
  2971  05C5  082B               	movf	(sprintf@tmpval+3)^(0+128),w
  2972  05C6  1283               	bcf	3,5	;RP0=0, select bank0
  2973  05C7  1303               	bcf	3,6	;RP1=0, select bank0
  2974  05C8  00A7               	movwf	___llmod@dividend+3
  2975  05C9  1683               	bsf	3,5	;RP0=1, select bank1
  2976  05CA  1303               	bcf	3,6	;RP1=0, select bank1
  2977  05CB  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  2978  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  2979  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  2980  05CE  00A6               	movwf	___llmod@dividend+2
  2981  05CF  1683               	bsf	3,5	;RP0=1, select bank1
  2982  05D0  1303               	bcf	3,6	;RP1=0, select bank1
  2983  05D1  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  2984  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  2985  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  2986  05D4  00A5               	movwf	___llmod@dividend+1
  2987  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  2988  05D6  1303               	bcf	3,6	;RP1=0, select bank1
  2989  05D7  0828               	movf	sprintf@tmpval^(0+128),w
  2990  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  2991  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  2992  05DA  00A4               	movwf	___llmod@dividend
  2993  05DB  120A  118A  2003  120A  118A  	fcall	___llmod
  2994  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  2995  05E1  1303               	bcf	3,6	;RP1=0, select bank0
  2996  05E2  0823               	movf	?___llmod+3,w
  2997  05E3  1683               	bsf	3,5	;RP0=1, select bank1
  2998  05E4  1303               	bcf	3,6	;RP1=0, select bank1
  2999  05E5  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  3000  05E6  1283               	bcf	3,5	;RP0=0, select bank0
  3001  05E7  1303               	bcf	3,6	;RP1=0, select bank0
  3002  05E8  0822               	movf	?___llmod+2,w
  3003  05E9  1683               	bsf	3,5	;RP0=1, select bank1
  3004  05EA  1303               	bcf	3,6	;RP1=0, select bank1
  3005  05EB  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  3006  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  3007  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  3008  05EE  0821               	movf	?___llmod+1,w
  3009  05EF  1683               	bsf	3,5	;RP0=1, select bank1
  3010  05F0  1303               	bcf	3,6	;RP1=0, select bank1
  3011  05F1  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  3012  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  3013  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  3014  05F4  0820               	movf	?___llmod,w
  3015  05F5  1683               	bsf	3,5	;RP0=1, select bank1
  3016  05F6  1303               	bcf	3,6	;RP1=0, select bank1
  3017  05F7  00A8               	movwf	sprintf@tmpval^(0+128)
  3018                           
  3019                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3020  05F8  0828               	movf	sprintf@tmpval^(0+128),w
  3021  05F9  3E30               	addlw	48
  3022  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  3023  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  3024  05FC  00E2               	movwf	??_sprintf
  3025  05FD  1683               	bsf	3,5	;RP0=1, select bank1
  3026  05FE  1303               	bcf	3,6	;RP1=0, select bank1
  3027  05FF  0830               	movf	sprintf@sp^(0+128),w
  3028  0600  0084               	movwf	4
  3029  0601  1283               	bcf	3,5	;RP0=0, select bank0
  3030  0602  1303               	bcf	3,6	;RP1=0, select bank0
  3031  0603  0862               	movf	??_sprintf,w
  3032  0604  1783               	bsf	3,7	;select IRP bank2
  3033  0605  0080               	movwf	0
  3034  0606  3001               	movlw	1
  3035  0607  00E2               	movwf	??_sprintf
  3036  0608  0862               	movf	??_sprintf,w
  3037  0609  1683               	bsf	3,5	;RP0=1, select bank1
  3038  060A  1303               	bcf	3,6	;RP1=0, select bank1
  3039  060B  07B0               	addwf	sprintf@sp^(0+128),f
  3040                           
  3041                           ;doprnt.c: 1232: val %= dpowers[c];
  3042  060C  0836               	movf	sprintf@c^(0+128),w
  3043  060D  1283               	bcf	3,5	;RP0=0, select bank0
  3044  060E  1303               	bcf	3,6	;RP1=0, select bank0
  3045  060F  00E2               	movwf	??_sprintf
  3046  0610  3001               	movlw	1
  3047  0611                     u6175:	
  3048  0611  1003               	clrc
  3049  0612  0DE2               	rlf	??_sprintf,f
  3050  0613  3EFF               	addlw	-1
  3051  0614  1D03               	skipz
  3052  0615  2E11               	goto	u6175
  3053  0616  1003               	clrc
  3054  0617  0D62               	rlf	??_sprintf,w
  3055  0618  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3056  0619  0084               	movwf	4
  3057  061A  160A  118A  200A  120A  118A  	fcall	stringdir
  3058  061F  00A0               	movwf	___llmod@divisor
  3059  0620  160A  118A  200A  120A  118A  	fcall	stringdir
  3060  0625  00A1               	movwf	___llmod@divisor+1
  3061  0626  160A  118A  200A  120A  118A  	fcall	stringdir
  3062  062B  00A2               	movwf	___llmod@divisor+2
  3063  062C  160A  118A  200A  120A  118A  	fcall	stringdir
  3064  0631  00A3               	movwf	___llmod@divisor+3
  3065  0632  1683               	bsf	3,5	;RP0=1, select bank1
  3066  0633  1303               	bcf	3,6	;RP1=0, select bank1
  3067  0634  082F               	movf	(sprintf@val+3)^(0+128),w
  3068  0635  1283               	bcf	3,5	;RP0=0, select bank0
  3069  0636  1303               	bcf	3,6	;RP1=0, select bank0
  3070  0637  00A7               	movwf	___llmod@dividend+3
  3071  0638  1683               	bsf	3,5	;RP0=1, select bank1
  3072  0639  1303               	bcf	3,6	;RP1=0, select bank1
  3073  063A  082E               	movf	(sprintf@val+2)^(0+128),w
  3074  063B  1283               	bcf	3,5	;RP0=0, select bank0
  3075  063C  1303               	bcf	3,6	;RP1=0, select bank0
  3076  063D  00A6               	movwf	___llmod@dividend+2
  3077  063E  1683               	bsf	3,5	;RP0=1, select bank1
  3078  063F  1303               	bcf	3,6	;RP1=0, select bank1
  3079  0640  082D               	movf	(sprintf@val+1)^(0+128),w
  3080  0641  1283               	bcf	3,5	;RP0=0, select bank0
  3081  0642  1303               	bcf	3,6	;RP1=0, select bank0
  3082  0643  00A5               	movwf	___llmod@dividend+1
  3083  0644  1683               	bsf	3,5	;RP0=1, select bank1
  3084  0645  1303               	bcf	3,6	;RP1=0, select bank1
  3085  0646  082C               	movf	sprintf@val^(0+128),w
  3086  0647  1283               	bcf	3,5	;RP0=0, select bank0
  3087  0648  1303               	bcf	3,6	;RP1=0, select bank0
  3088  0649  00A4               	movwf	___llmod@dividend
  3089  064A  120A  118A  2003  120A  118A  	fcall	___llmod
  3090  064F  1283               	bcf	3,5	;RP0=0, select bank0
  3091  0650  1303               	bcf	3,6	;RP1=0, select bank0
  3092  0651  0823               	movf	?___llmod+3,w
  3093  0652  1683               	bsf	3,5	;RP0=1, select bank1
  3094  0653  1303               	bcf	3,6	;RP1=0, select bank1
  3095  0654  00AF               	movwf	(sprintf@val+3)^(0+128)
  3096  0655  1283               	bcf	3,5	;RP0=0, select bank0
  3097  0656  1303               	bcf	3,6	;RP1=0, select bank0
  3098  0657  0822               	movf	?___llmod+2,w
  3099  0658  1683               	bsf	3,5	;RP0=1, select bank1
  3100  0659  1303               	bcf	3,6	;RP1=0, select bank1
  3101  065A  00AE               	movwf	(sprintf@val+2)^(0+128)
  3102  065B  1283               	bcf	3,5	;RP0=0, select bank0
  3103  065C  1303               	bcf	3,6	;RP1=0, select bank0
  3104  065D  0821               	movf	?___llmod+1,w
  3105  065E  1683               	bsf	3,5	;RP0=1, select bank1
  3106  065F  1303               	bcf	3,6	;RP1=0, select bank1
  3107  0660  00AD               	movwf	(sprintf@val+1)^(0+128)
  3108  0661  1283               	bcf	3,5	;RP0=0, select bank0
  3109  0662  1303               	bcf	3,6	;RP1=0, select bank0
  3110  0663  0820               	movf	?___llmod,w
  3111  0664  2D6C               	goto	L5
  3112  0665                     l3770:	
  3113                           ;doprnt.c: 1233: }
  3114                           ;doprnt.c: 1235: while(prec) {
  3115                           
  3116                           
  3117                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3118  0665  3030               	movlw	48
  3119  0666  1283               	bcf	3,5	;RP0=0, select bank0
  3120  0667  1303               	bcf	3,6	;RP1=0, select bank0
  3121  0668  00E2               	movwf	??_sprintf
  3122  0669  1683               	bsf	3,5	;RP0=1, select bank1
  3123  066A  1303               	bcf	3,6	;RP1=0, select bank1
  3124  066B  0830               	movf	sprintf@sp^(0+128),w
  3125  066C  0084               	movwf	4
  3126  066D  1283               	bcf	3,5	;RP0=0, select bank0
  3127  066E  1303               	bcf	3,6	;RP1=0, select bank0
  3128  066F  0862               	movf	??_sprintf,w
  3129  0670  1783               	bsf	3,7	;select IRP bank2
  3130  0671  0080               	movwf	0
  3131  0672  3001               	movlw	1
  3132  0673  00E2               	movwf	??_sprintf
  3133  0674  0862               	movf	??_sprintf,w
  3134  0675  1683               	bsf	3,5	;RP0=1, select bank1
  3135  0676  1303               	bcf	3,6	;RP1=0, select bank1
  3136  0677  07B0               	addwf	sprintf@sp^(0+128),f
  3137                           
  3138                           ;doprnt.c: 1237: prec--;
  3139  0678  30FF               	movlw	255
  3140  0679  07B1               	addwf	sprintf@prec^(0+128),f
  3141  067A  1803               	skipnc
  3142  067B  0AB2               	incf	(sprintf@prec+1)^(0+128),f
  3143  067C  30FF               	movlw	255
  3144  067D  07B2               	addwf	(sprintf@prec+1)^(0+128),f
  3145  067E                     l3776:	
  3146  067E  0831               	movf	sprintf@prec^(0+128),w
  3147  067F  0432               	iorwf	(sprintf@prec+1)^(0+128),w
  3148  0680  1903               	btfsc	3,2
  3149  0681  285C               	goto	l3826
  3150  0682  2E65               	goto	l3770
  3151  0683                     l3778:	
  3152                           ;doprnt.c: 1238: }
  3153                           ;doprnt.c: 1245: continue;
  3154                           
  3155                           
  3156                           ;doprnt.c: 1246: }
  3157                           ;doprnt.c: 1253: {
  3158                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3159  0683  1683               	bsf	3,5	;RP0=1, select bank1
  3160  0684  1303               	bcf	3,6	;RP1=0, select bank1
  3161  0685  0823               	movf	sprintf@ap^(0+128),w
  3162  0686  0084               	movwf	4
  3163  0687  1383               	bcf	3,7	;select IRP bank0
  3164  0688  0800               	movf	0,w
  3165  0689  1283               	bcf	3,5	;RP0=0, select bank0
  3166  068A  1303               	bcf	3,6	;RP1=0, select bank0
  3167  068B  00E2               	movwf	??_sprintf
  3168  068C  0A84               	incf	4,f
  3169  068D  0800               	movf	0,w
  3170  068E  00E3               	movwf	??_sprintf+1
  3171  068F  0862               	movf	??_sprintf,w
  3172  0690  1683               	bsf	3,5	;RP0=1, select bank1
  3173  0691  1303               	bcf	3,6	;RP1=0, select bank1
  3174  0692  00AC               	movwf	sprintf@val^(0+128)
  3175  0693  1283               	bcf	3,5	;RP0=0, select bank0
  3176  0694  1303               	bcf	3,6	;RP1=0, select bank0
  3177  0695  0863               	movf	??_sprintf+1,w
  3178  0696  1683               	bsf	3,5	;RP0=1, select bank1
  3179  0697  1303               	bcf	3,6	;RP1=0, select bank1
  3180  0698  00AD               	movwf	(sprintf@val+1)^(0+128)
  3181  0699  3000               	movlw	0
  3182  069A  1BAD               	btfsc	(sprintf@val+1)^(0+128),7
  3183  069B  30FF               	movlw	255
  3184  069C  00AE               	movwf	(sprintf@val+2)^(0+128)
  3185  069D  00AF               	movwf	(sprintf@val+3)^(0+128)
  3186  069E  3002               	movlw	2
  3187  069F  1283               	bcf	3,5	;RP0=0, select bank0
  3188  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  3189  06A1  00E2               	movwf	??_sprintf
  3190  06A2  0862               	movf	??_sprintf,w
  3191  06A3  1683               	bsf	3,5	;RP0=1, select bank1
  3192  06A4  1303               	bcf	3,6	;RP1=0, select bank1
  3193  06A5  07A3               	addwf	sprintf@ap^(0+128),f
  3194                           
  3195                           ;doprnt.c: 1261: if((long)val < 0) {
  3196  06A6  1FAF               	btfss	(sprintf@val+3)^(0+128),7
  3197  06A7  2EB7               	goto	l3788
  3198                           
  3199                           ;doprnt.c: 1262: flag |= 0x03;
  3200  06A8  3003               	movlw	3
  3201  06A9  04A4               	iorwf	sprintf@flag^(0+128),f
  3202  06AA  3000               	movlw	0
  3203  06AB  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  3204                           
  3205                           ;doprnt.c: 1263: val = -val;
  3206  06AC  09AC               	comf	sprintf@val^(0+128),f
  3207  06AD  09AD               	comf	(sprintf@val+1)^(0+128),f
  3208  06AE  09AE               	comf	(sprintf@val+2)^(0+128),f
  3209  06AF  09AF               	comf	(sprintf@val+3)^(0+128),f
  3210  06B0  0AAC               	incf	sprintf@val^(0+128),f
  3211  06B1  1903               	skipnz
  3212  06B2  0AAD               	incf	(sprintf@val+1)^(0+128),f
  3213  06B3  1903               	skipnz
  3214  06B4  0AAE               	incf	(sprintf@val+2)^(0+128),f
  3215  06B5  1903               	skipnz
  3216  06B6  0AAF               	incf	(sprintf@val+3)^(0+128),f
  3217  06B7                     l3788:	
  3218                           
  3219                           ;doprnt.c: 1264: }
  3220                           ;doprnt.c: 1266: }
  3221                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3222  06B7  0831               	movf	sprintf@prec^(0+128),w
  3223  06B8  0432               	iorwf	(sprintf@prec+1)^(0+128),w
  3224  06B9  1D03               	btfss	3,2
  3225  06BA  2EC7               	goto	l3794
  3226  06BB  082F               	movf	(sprintf@val+3)^(0+128),w
  3227  06BC  042E               	iorwf	(sprintf@val+2)^(0+128),w
  3228  06BD  042D               	iorwf	(sprintf@val+1)^(0+128),w
  3229  06BE  042C               	iorwf	sprintf@val^(0+128),w
  3230  06BF  1D03               	skipz
  3231  06C0  2EC7               	goto	l3794
  3232                           
  3233                           ;doprnt.c: 1291: prec++;
  3234  06C1  3001               	movlw	1
  3235  06C2  07B1               	addwf	sprintf@prec^(0+128),f
  3236  06C3  1803               	skipnc
  3237  06C4  0AB2               	incf	(sprintf@prec+1)^(0+128),f
  3238  06C5  3000               	movlw	0
  3239  06C6  07B2               	addwf	(sprintf@prec+1)^(0+128),f
  3240  06C7                     l3794:	
  3241                           
  3242                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3243  06C7  01B6               	clrf	sprintf@c^(0+128)
  3244  06C8  0AB6               	incf	sprintf@c^(0+128),f
  3245  06C9  300A               	movlw	10
  3246  06CA  0636               	xorwf	sprintf@c^(0+128),w
  3247  06CB  1903               	btfsc	3,2
  3248  06CC  2F1D               	goto	l3806
  3249  06CD                     l3800:	
  3250                           
  3251                           ;doprnt.c: 1306: if(val < dpowers[c])
  3252  06CD  0836               	movf	sprintf@c^(0+128),w
  3253  06CE  1283               	bcf	3,5	;RP0=0, select bank0
  3254  06CF  1303               	bcf	3,6	;RP1=0, select bank0
  3255  06D0  00E2               	movwf	??_sprintf
  3256  06D1  3001               	movlw	1
  3257  06D2                     u6245:	
  3258  06D2  1003               	clrc
  3259  06D3  0DE2               	rlf	??_sprintf,f
  3260  06D4  3EFF               	addlw	-1
  3261  06D5  1D03               	skipz
  3262  06D6  2ED2               	goto	u6245
  3263  06D7  1003               	clrc
  3264  06D8  0D62               	rlf	??_sprintf,w
  3265  06D9  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3266  06DA  0084               	movwf	4
  3267  06DB  160A  118A  200A  120A  118A  	fcall	stringdir
  3268  06E0  00E3               	movwf	??_sprintf+1
  3269  06E1  160A  118A  200A  120A  118A  	fcall	stringdir
  3270  06E6  00E4               	movwf	??_sprintf+2
  3271  06E7  160A  118A  200A  120A  118A  	fcall	stringdir
  3272  06EC  00E5               	movwf	??_sprintf+3
  3273  06ED  160A  118A  200A  120A  118A  	fcall	stringdir
  3274  06F2  00E6               	movwf	??_sprintf+4
  3275  06F3  0866               	movf	??_sprintf+4,w
  3276  06F4  1683               	bsf	3,5	;RP0=1, select bank1
  3277  06F5  1303               	bcf	3,6	;RP1=0, select bank1
  3278  06F6  022F               	subwf	(sprintf@val+3)^(0+128),w
  3279  06F7  1D03               	skipz
  3280  06F8  2F0F               	goto	u6255
  3281  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  3282  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  3283  06FB  0865               	movf	??_sprintf+3,w
  3284  06FC  1683               	bsf	3,5	;RP0=1, select bank1
  3285  06FD  1303               	bcf	3,6	;RP1=0, select bank1
  3286  06FE  022E               	subwf	(sprintf@val+2)^(0+128),w
  3287  06FF  1D03               	skipz
  3288  0700  2F0F               	goto	u6255
  3289  0701  1283               	bcf	3,5	;RP0=0, select bank0
  3290  0702  1303               	bcf	3,6	;RP1=0, select bank0
  3291  0703  0864               	movf	??_sprintf+2,w
  3292  0704  1683               	bsf	3,5	;RP0=1, select bank1
  3293  0705  1303               	bcf	3,6	;RP1=0, select bank1
  3294  0706  022D               	subwf	(sprintf@val+1)^(0+128),w
  3295  0707  1D03               	skipz
  3296  0708  2F0F               	goto	u6255
  3297  0709  1283               	bcf	3,5	;RP0=0, select bank0
  3298  070A  1303               	bcf	3,6	;RP1=0, select bank0
  3299  070B  0863               	movf	??_sprintf+1,w
  3300  070C  1683               	bsf	3,5	;RP0=1, select bank1
  3301  070D  1303               	bcf	3,6	;RP1=0, select bank1
  3302  070E  022C               	subwf	sprintf@val^(0+128),w
  3303  070F                     u6255:	
  3304  070F  1C03               	btfss	3,0
  3305  0710  2F1D               	goto	l3806
  3306                           
  3307                           ;doprnt.c: 1307: break;
  3308  0711  3001               	movlw	1
  3309  0712  1283               	bcf	3,5	;RP0=0, select bank0
  3310  0713  1303               	bcf	3,6	;RP1=0, select bank0
  3311  0714  00E2               	movwf	??_sprintf
  3312  0715  0862               	movf	??_sprintf,w
  3313  0716  1683               	bsf	3,5	;RP0=1, select bank1
  3314  0717  1303               	bcf	3,6	;RP1=0, select bank1
  3315  0718  07B6               	addwf	sprintf@c^(0+128),f
  3316  0719  300A               	movlw	10
  3317  071A  0636               	xorwf	sprintf@c^(0+128),w
  3318  071B  1D03               	btfss	3,2
  3319  071C  2ECD               	goto	l3800
  3320  071D                     l3806:	
  3321                           
  3322                           ;doprnt.c: 1339: if(c < prec)
  3323  071D  0836               	movf	sprintf@c^(0+128),w
  3324  071E  1283               	bcf	3,5	;RP0=0, select bank0
  3325  071F  1303               	bcf	3,6	;RP1=0, select bank0
  3326  0720  00E2               	movwf	??_sprintf
  3327  0721  01E3               	clrf	??_sprintf+1
  3328  0722  1BE2               	btfsc	??_sprintf,7
  3329  0723  03E3               	decf	??_sprintf+1,f
  3330  0724  0863               	movf	??_sprintf+1,w
  3331  0725  3A80               	xorlw	128
  3332  0726  00E4               	movwf	??_sprintf+2
  3333  0727  1683               	bsf	3,5	;RP0=1, select bank1
  3334  0728  1303               	bcf	3,6	;RP1=0, select bank1
  3335  0729  0832               	movf	(sprintf@prec+1)^(0+128),w
  3336  072A  3A80               	xorlw	128
  3337  072B  1283               	bcf	3,5	;RP0=0, select bank0
  3338  072C  1303               	bcf	3,6	;RP1=0, select bank0
  3339  072D  0264               	subwf	??_sprintf+2,w
  3340  072E  1D03               	skipz
  3341  072F  2F36               	goto	u6275
  3342  0730  1683               	bsf	3,5	;RP0=1, select bank1
  3343  0731  1303               	bcf	3,6	;RP1=0, select bank1
  3344  0732  0831               	movf	sprintf@prec^(0+128),w
  3345  0733  1283               	bcf	3,5	;RP0=0, select bank0
  3346  0734  1303               	bcf	3,6	;RP1=0, select bank0
  3347  0735  0262               	subwf	??_sprintf,w
  3348  0736                     u6275:	
  3349  0736  1803               	skipnc
  3350  0737  2F43               	goto	l3810
  3351                           
  3352                           ;doprnt.c: 1340: c = prec;
  3353  0738  1683               	bsf	3,5	;RP0=1, select bank1
  3354  0739  1303               	bcf	3,6	;RP1=0, select bank1
  3355  073A  0831               	movf	sprintf@prec^(0+128),w
  3356  073B  1283               	bcf	3,5	;RP0=0, select bank0
  3357  073C  1303               	bcf	3,6	;RP1=0, select bank0
  3358  073D  00E2               	movwf	??_sprintf
  3359  073E  0862               	movf	??_sprintf,w
  3360  073F  1683               	bsf	3,5	;RP0=1, select bank1
  3361  0740  1303               	bcf	3,6	;RP1=0, select bank1
  3362  0741  00B6               	movwf	sprintf@c^(0+128)
  3363  0742  2F65               	goto	l226
  3364  0743                     l3810:	
  3365                           
  3366                           ;doprnt.c: 1341: else if(prec < c)
  3367  0743  1683               	bsf	3,5	;RP0=1, select bank1
  3368  0744  1303               	bcf	3,6	;RP1=0, select bank1
  3369  0745  0836               	movf	sprintf@c^(0+128),w
  3370  0746  1283               	bcf	3,5	;RP0=0, select bank0
  3371  0747  1303               	bcf	3,6	;RP1=0, select bank0
  3372  0748  00E2               	movwf	??_sprintf
  3373  0749  01E3               	clrf	??_sprintf+1
  3374  074A  1BE2               	btfsc	??_sprintf,7
  3375  074B  03E3               	decf	??_sprintf+1,f
  3376  074C  1683               	bsf	3,5	;RP0=1, select bank1
  3377  074D  1303               	bcf	3,6	;RP1=0, select bank1
  3378  074E  0832               	movf	(sprintf@prec+1)^(0+128),w
  3379  074F  3A80               	xorlw	128
  3380  0750  1283               	bcf	3,5	;RP0=0, select bank0
  3381  0751  1303               	bcf	3,6	;RP1=0, select bank0
  3382  0752  00E4               	movwf	??_sprintf+2
  3383  0753  0863               	movf	??_sprintf+1,w
  3384  0754  3A80               	xorlw	128
  3385  0755  0264               	subwf	??_sprintf+2,w
  3386  0756  1D03               	skipz
  3387  0757  2F5C               	goto	u6285
  3388  0758  0862               	movf	??_sprintf,w
  3389  0759  1683               	bsf	3,5	;RP0=1, select bank1
  3390  075A  1303               	bcf	3,6	;RP1=0, select bank1
  3391  075B  0231               	subwf	sprintf@prec^(0+128),w
  3392  075C                     u6285:	
  3393  075C  1803               	skipnc
  3394  075D  2F65               	goto	l226
  3395                           
  3396                           ;doprnt.c: 1342: prec = c;
  3397  075E  1683               	bsf	3,5	;RP0=1, select bank1
  3398  075F  1303               	bcf	3,6	;RP1=0, select bank1
  3399  0760  0836               	movf	sprintf@c^(0+128),w
  3400  0761  00B1               	movwf	sprintf@prec^(0+128)
  3401  0762  01B2               	clrf	(sprintf@prec+1)^(0+128)
  3402  0763  1BB1               	btfsc	sprintf@prec^(0+128),7
  3403  0764  03B2               	decf	(sprintf@prec+1)^(0+128),f
  3404  0765                     l226:	
  3405                           
  3406                           ;doprnt.c: 1422: {
  3407                           ;doprnt.c: 1438: if(flag & 0x03)
  3408  0765  3003               	movlw	3
  3409  0766  1683               	bsf	3,5	;RP0=1, select bank1
  3410  0767  1303               	bcf	3,6	;RP1=0, select bank1
  3411  0768  0524               	andwf	sprintf@flag^(0+128),w
  3412  0769  1283               	bcf	3,5	;RP0=0, select bank0
  3413  076A  1303               	bcf	3,6	;RP1=0, select bank0
  3414  076B  00E2               	movwf	??_sprintf
  3415  076C  3000               	movlw	0
  3416  076D  1683               	bsf	3,5	;RP0=1, select bank1
  3417  076E  1303               	bcf	3,6	;RP1=0, select bank1
  3418  076F  0525               	andwf	(sprintf@flag+1)^(0+128),w
  3419  0770  1283               	bcf	3,5	;RP0=0, select bank0
  3420  0771  1303               	bcf	3,6	;RP1=0, select bank0
  3421  0772  00E3               	movwf	??_sprintf+1
  3422  0773  0862               	movf	??_sprintf,w
  3423  0774  0463               	iorwf	??_sprintf+1,w
  3424  0775  1903               	btfsc	3,2
  3425  0776  2F88               	goto	l3824
  3426                           
  3427                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3428  0777  302D               	movlw	45
  3429  0778                     L6:	
  3430  0778  00E2               	movwf	??_sprintf
  3431  0779  1683               	bsf	3,5	;RP0=1, select bank1
  3432  077A  1303               	bcf	3,6	;RP1=0, select bank1
  3433  077B  0830               	movf	sprintf@sp^(0+128),w
  3434  077C  0084               	movwf	4
  3435  077D  1283               	bcf	3,5	;RP0=0, select bank0
  3436  077E  1303               	bcf	3,6	;RP1=0, select bank0
  3437  077F  0862               	movf	??_sprintf,w
  3438  0780  1783               	bsf	3,7	;select IRP bank2
  3439  0781  0080               	movwf	0
  3440  0782  3001               	movlw	1
  3441  0783  00E2               	movwf	??_sprintf
  3442  0784  0862               	movf	??_sprintf,w
  3443  0785  1683               	bsf	3,5	;RP0=1, select bank1
  3444  0786  1303               	bcf	3,6	;RP1=0, select bank1
  3445  0787  07B0               	addwf	sprintf@sp^(0+128),f
  3446  0788                     l3824:	
  3447  0788  30FF               	movlw	255
  3448  0789  1683               	bsf	3,5	;RP0=1, select bank1
  3449  078A  1303               	bcf	3,6	;RP1=0, select bank1
  3450  078B  07B1               	addwf	sprintf@prec^(0+128),f
  3451  078C  1803               	skipnc
  3452  078D  0AB2               	incf	(sprintf@prec+1)^(0+128),f
  3453  078E  30FF               	movlw	255
  3454  078F  07B2               	addwf	(sprintf@prec+1)^(0+128),f
  3455  0790  0A31               	incf	sprintf@prec^(0+128),w
  3456  0791  1903               	btfsc	3,2
  3457  0792  0A32               	incf	(sprintf@prec+1)^(0+128),w
  3458  0793  1903               	btfsc	3,2
  3459  0794  285C               	goto	l3826
  3460                           
  3461                           ;doprnt.c: 1478: {
  3462                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3463                           
  3464                           ;doprnt.c: 1469: }
  3465                           ;doprnt.c: 1474: while(prec--) {
  3466  0795  3000               	movlw	0
  3467  0796  1283               	bcf	3,5	;RP0=0, select bank0
  3468  0797  1303               	bcf	3,6	;RP1=0, select bank0
  3469  0798  00A3               	movwf	___llmod@divisor+3
  3470  0799  3000               	movlw	0
  3471  079A  00A2               	movwf	___llmod@divisor+2
  3472  079B  3000               	movlw	0
  3473  079C  00A1               	movwf	___llmod@divisor+1
  3474  079D  300A               	movlw	10
  3475  079E  00A0               	movwf	___llmod@divisor
  3476  079F  1683               	bsf	3,5	;RP0=1, select bank1
  3477  07A0  1303               	bcf	3,6	;RP1=0, select bank1
  3478  07A1  0831               	movf	sprintf@prec^(0+128),w
  3479  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  3480  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  3481  07A4  00E2               	movwf	??_sprintf
  3482  07A5  3001               	movlw	1
  3483  07A6                     u6305:	
  3484  07A6  1003               	clrc
  3485  07A7  0DE2               	rlf	??_sprintf,f
  3486  07A8  3EFF               	addlw	-1
  3487  07A9  1D03               	skipz
  3488  07AA  2FA6               	goto	u6305
  3489  07AB  1003               	clrc
  3490  07AC  0D62               	rlf	??_sprintf,w
  3491  07AD  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3492  07AE  0084               	movwf	4
  3493  07AF  160A  118A  200A  120A  118A  	fcall	stringdir
  3494  07B4  00F0               	movwf	___lldiv@divisor
  3495  07B5  160A  118A  200A  120A  118A  	fcall	stringdir
  3496  07BA  00F1               	movwf	___lldiv@divisor+1
  3497  07BB  160A  118A  200A  120A  118A  	fcall	stringdir
  3498  07C0  00F2               	movwf	___lldiv@divisor+2
  3499  07C1  160A  118A  200A  120A  118A  	fcall	stringdir
  3500  07C6  00F3               	movwf	___lldiv@divisor+3
  3501  07C7  1683               	bsf	3,5	;RP0=1, select bank1
  3502  07C8  1303               	bcf	3,6	;RP1=0, select bank1
  3503  07C9  082F               	movf	(sprintf@val+3)^(0+128),w
  3504  07CA  00F7               	movwf	___lldiv@dividend+3
  3505  07CB  082E               	movf	(sprintf@val+2)^(0+128),w
  3506  07CC  00F6               	movwf	___lldiv@dividend+2
  3507  07CD  082D               	movf	(sprintf@val+1)^(0+128),w
  3508  07CE  00F5               	movwf	___lldiv@dividend+1
  3509  07CF  082C               	movf	sprintf@val^(0+128),w
  3510  07D0  00F4               	movwf	___lldiv@dividend
  3511  07D1  120A  158A  2009  120A  118A  	fcall	___lldiv
  3512  07D6  0873               	movf	?___lldiv+3,w
  3513  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  3514  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  3515  07D9  00A7               	movwf	___llmod@dividend+3
  3516  07DA  0872               	movf	?___lldiv+2,w
  3517  07DB  00A6               	movwf	___llmod@dividend+2
  3518  07DC  0871               	movf	?___lldiv+1,w
  3519  07DD  00A5               	movwf	___llmod@dividend+1
  3520  07DE  0870               	movf	?___lldiv,w
  3521  07DF  00A4               	movwf	___llmod@dividend
  3522  07E0  120A  118A  2003  120A  118A  	fcall	___llmod
  3523  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  3524  07E6  1303               	bcf	3,6	;RP1=0, select bank0
  3525  07E7  0820               	movf	?___llmod,w
  3526  07E8  3E30               	addlw	48
  3527  07E9  00E3               	movwf	??_sprintf+1
  3528  07EA  0863               	movf	??_sprintf+1,w
  3529  07EB  1683               	bsf	3,5	;RP0=1, select bank1
  3530  07EC  1303               	bcf	3,6	;RP1=0, select bank1
  3531  07ED  00B6               	movwf	sprintf@c^(0+128)
  3532                           
  3533                           ;doprnt.c: 1523: }
  3534                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3535  07EE  0836               	movf	sprintf@c^(0+128),w
  3536  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  3537  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  3538  07F1  2F78               	goto	L6
  3539  07F2                     l3828:	
  3540                           ;doprnt.c: 1525: }
  3541                           ;doprnt.c: 1533: }
  3542                           ;doprnt.c: 1535: alldone:
  3543                           
  3544                           
  3545                           ;doprnt.c: 1538: *sp = 0;
  3546  07F2  0830               	movf	sprintf@sp^(0+128),w
  3547  07F3  0084               	movwf	4
  3548  07F4  1783               	bsf	3,7	;select IRP bank2
  3549  07F5  0180               	clrf	0
  3550  07F6  0008               	return
  3551  07F7                     __end_of_sprintf:	
  3552                           ;doprnt.c: 1540: return 0;
  3553                           ;	Return value of _sprintf is never used
  3554                           
  3555                           
  3556                           	psect	text2
  3557  0D65                     __ptext2:	
  3558 ;; *************** function _scale *****************
  3559 ;; Defined at:
  3560 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;  scl             1    wreg     char 
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;  scl             1   30[BANK0 ] char 
  3565 ;; Return value:  Size  Location     Type
  3566 ;;                  3   22[BANK0 ] char 
  3567 ;; Registers used:
  3568 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3569 ;; Tracked objects:
  3570 ;;		On entry : 0/0
  3571 ;;		On exit  : 0/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3574 ;;      Params:         0       3       0       0       0
  3575 ;;      Locals:         0       4       0       0       0
  3576 ;;      Temps:          0       2       0       0       0
  3577 ;;      Totals:         0       9       0       0       0
  3578 ;;Total ram usage:        9 bytes
  3579 ;; Hardware stack levels used:    1
  3580 ;; Hardware stack levels required when called:    2
  3581 ;; This function calls:
  3582 ;;		___awdiv
  3583 ;;		___awmod
  3584 ;;		___bmul
  3585 ;;		___ftmul
  3586 ;; This function is called by:
  3587 ;;		_sprintf
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           
  3592                           ;psect for function _scale
  3593  0D65                     _scale:	
  3594                           
  3595                           ;incstack = 0
  3596                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3597                           ;scale@scl stored from wreg
  3598  0D65  1283               	bcf	3,5	;RP0=0, select bank0
  3599  0D66  1303               	bcf	3,6	;RP1=0, select bank0
  3600  0D67  00BE               	movwf	scale@scl
  3601                           
  3602                           ;doprnt.c: 428: if(scl < 0) {
  3603  0D68  1FBE               	btfss	scale@scl,7
  3604  0D69  2EB6               	goto	l3236
  3605                           
  3606                           ;doprnt.c: 429: scl = -scl;
  3607  0D6A  09BE               	comf	scale@scl,f
  3608  0D6B  0ABE               	incf	scale@scl,f
  3609                           
  3610                           ;doprnt.c: 430: if(scl>=110)
  3611  0D6C  083E               	movf	scale@scl,w
  3612  0D6D  3A80               	xorlw	128
  3613  0D6E  3E12               	addlw	-238
  3614  0D6F  1C03               	skipc
  3615  0D70  2E29               	goto	l3226
  3616                           
  3617                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3618  0D71  3003               	movlw	3
  3619  0D72  00B9               	movwf	??_scale
  3620  0D73  0839               	movf	??_scale,w
  3621  0D74  00A2               	movwf	___bmul@multiplicand
  3622  0D75  300A               	movlw	10
  3623  0D76  00F0               	movwf	___awdiv@divisor
  3624  0D77  3000               	movlw	0
  3625  0D78  00F1               	movwf	___awdiv@divisor+1
  3626  0D79  083E               	movf	scale@scl,w
  3627  0D7A  00FB               	movwf	___awmod@dividend
  3628  0D7B  01FC               	clrf	___awmod@dividend+1
  3629  0D7C  1BFB               	btfsc	___awmod@dividend,7
  3630  0D7D  03FC               	decf	___awmod@dividend+1,f
  3631  0D7E  3064               	movlw	100
  3632  0D7F  00F9               	movwf	___awmod@divisor
  3633  0D80  3000               	movlw	0
  3634  0D81  00FA               	movwf	___awmod@divisor+1
  3635  0D82  160A  118A  224C  120A  158A  	fcall	___awmod
  3636  0D87  087A               	movf	?___awmod+1,w
  3637  0D88  00F3               	movwf	___awdiv@dividend+1
  3638  0D89  0879               	movf	?___awmod,w
  3639  0D8A  00F2               	movwf	___awdiv@dividend
  3640  0D8B  160A  118A  22EA  120A  158A  	fcall	___awdiv
  3641  0D90  0870               	movf	?___awdiv,w
  3642  0D91  3E09               	addlw	9
  3643  0D92  160A  118A  2108  120A  158A  	fcall	___bmul
  3644  0D97  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3645  0D98  0084               	movwf	4
  3646  0D99  160A  118A  200A  120A  158A  	fcall	stringdir
  3647  0D9E  1283               	bcf	3,5	;RP0=0, select bank0
  3648  0D9F  1303               	bcf	3,6	;RP1=0, select bank0
  3649  0DA0  00A6               	movwf	___ftmul@f1
  3650  0DA1  160A  118A  200A  120A  158A  	fcall	stringdir
  3651  0DA6  00A7               	movwf	___ftmul@f1+1
  3652  0DA7  160A  118A  200A  120A  158A  	fcall	stringdir
  3653  0DAC  00A8               	movwf	___ftmul@f1+2
  3654  0DAD  3003               	movlw	3
  3655  0DAE  00BA               	movwf	??_scale+1
  3656  0DAF  083A               	movf	??_scale+1,w
  3657  0DB0  00A2               	movwf	___bmul@multiplicand
  3658  0DB1  3064               	movlw	100
  3659  0DB2  00F0               	movwf	___awdiv@divisor
  3660  0DB3  3000               	movlw	0
  3661  0DB4  00F1               	movwf	___awdiv@divisor+1
  3662  0DB5  083E               	movf	scale@scl,w
  3663  0DB6  00F2               	movwf	___awdiv@dividend
  3664  0DB7  01F3               	clrf	___awdiv@dividend+1
  3665  0DB8  1BF2               	btfsc	___awdiv@dividend,7
  3666  0DB9  03F3               	decf	___awdiv@dividend+1,f
  3667  0DBA  160A  118A  22EA  120A  158A  	fcall	___awdiv
  3668  0DBF  0870               	movf	?___awdiv,w
  3669  0DC0  3E12               	addlw	18
  3670  0DC1  160A  118A  2108  120A  158A  	fcall	___bmul
  3671  0DC6  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3672  0DC7  0084               	movwf	4
  3673  0DC8  160A  118A  200A  120A  158A  	fcall	stringdir
  3674  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  3675  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  3676  0DCF  00A9               	movwf	___ftmul@f2
  3677  0DD0  160A  118A  200A  120A  158A  	fcall	stringdir
  3678  0DD5  00AA               	movwf	___ftmul@f2+1
  3679  0DD6  160A  118A  200A  120A  158A  	fcall	stringdir
  3680  0DDB  00AB               	movwf	___ftmul@f2+2
  3681  0DDC  160A  118A  272D  120A  158A  	fcall	___ftmul
  3682  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  3683  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  3684  0DE3  0826               	movf	?___ftmul,w
  3685  0DE4  00BB               	movwf	_scale$661
  3686  0DE5  0827               	movf	?___ftmul+1,w
  3687  0DE6  00BC               	movwf	_scale$661+1
  3688  0DE7  0828               	movf	?___ftmul+2,w
  3689  0DE8  00BD               	movwf	_scale$661+2
  3690                           
  3691                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3692  0DE9  3003               	movlw	3
  3693  0DEA  00B9               	movwf	??_scale
  3694  0DEB  0839               	movf	??_scale,w
  3695  0DEC  00A2               	movwf	___bmul@multiplicand
  3696  0DED  083E               	movf	scale@scl,w
  3697  0DEE  00FB               	movwf	___awmod@dividend
  3698  0DEF  01FC               	clrf	___awmod@dividend+1
  3699  0DF0  1BFB               	btfsc	___awmod@dividend,7
  3700  0DF1  03FC               	decf	___awmod@dividend+1,f
  3701  0DF2  300A               	movlw	10
  3702  0DF3  00F9               	movwf	___awmod@divisor
  3703  0DF4  3000               	movlw	0
  3704  0DF5  00FA               	movwf	___awmod@divisor+1
  3705  0DF6  160A  118A  224C  120A  158A  	fcall	___awmod
  3706  0DFB  0879               	movf	?___awmod,w
  3707  0DFC  160A  118A  2108  120A  158A  	fcall	___bmul
  3708  0E01  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3709  0E02  0084               	movwf	4
  3710  0E03  160A  118A  200A  120A  158A  	fcall	stringdir
  3711  0E08  1283               	bcf	3,5	;RP0=0, select bank0
  3712  0E09  1303               	bcf	3,6	;RP1=0, select bank0
  3713  0E0A  00A6               	movwf	___ftmul@f1
  3714  0E0B  160A  118A  200A  120A  158A  	fcall	stringdir
  3715  0E10  00A7               	movwf	___ftmul@f1+1
  3716  0E11  160A  118A  200A  120A  158A  	fcall	stringdir
  3717  0E16  00A8               	movwf	___ftmul@f1+2
  3718  0E17  083B               	movf	_scale$661,w
  3719  0E18  00A9               	movwf	___ftmul@f2
  3720  0E19  083C               	movf	_scale$661+1,w
  3721  0E1A  00AA               	movwf	___ftmul@f2+1
  3722  0E1B  083D               	movf	_scale$661+2,w
  3723  0E1C  00AB               	movwf	___ftmul@f2+2
  3724  0E1D  160A  118A  272D   	fcall	___ftmul
  3725  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  3726  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  3727  0E22  0826               	movf	?___ftmul,w
  3728  0E23  00B6               	movwf	?_scale
  3729  0E24  0827               	movf	?___ftmul+1,w
  3730  0E25  00B7               	movwf	?_scale+1
  3731  0E26  0828               	movf	?___ftmul+2,w
  3732  0E27  00B8               	movwf	?_scale+2
  3733  0E28  0008               	return
  3734  0E29                     l3226:	
  3735                           
  3736                           ;doprnt.c: 432: else if(scl > 10)
  3737  0E29  083E               	movf	scale@scl,w
  3738  0E2A  3A80               	xorlw	128
  3739  0E2B  3E75               	addlw	-139
  3740  0E2C  1C03               	skipc
  3741  0E2D  2E97               	goto	l3232
  3742                           
  3743                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3744  0E2E  3003               	movlw	3
  3745  0E2F  00B9               	movwf	??_scale
  3746  0E30  0839               	movf	??_scale,w
  3747  0E31  00A2               	movwf	___bmul@multiplicand
  3748  0E32  083E               	movf	scale@scl,w
  3749  0E33  00FB               	movwf	___awmod@dividend
  3750  0E34  01FC               	clrf	___awmod@dividend+1
  3751  0E35  1BFB               	btfsc	___awmod@dividend,7
  3752  0E36  03FC               	decf	___awmod@dividend+1,f
  3753  0E37  300A               	movlw	10
  3754  0E38  00F9               	movwf	___awmod@divisor
  3755  0E39  3000               	movlw	0
  3756  0E3A  00FA               	movwf	___awmod@divisor+1
  3757  0E3B  160A  118A  224C  120A  158A  	fcall	___awmod
  3758  0E40  0879               	movf	?___awmod,w
  3759  0E41  160A  118A  2108  120A  158A  	fcall	___bmul
  3760  0E46  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3761  0E47  0084               	movwf	4
  3762  0E48  160A  118A  200A  120A  158A  	fcall	stringdir
  3763  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  3764  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  3765  0E4F  00A6               	movwf	___ftmul@f1
  3766  0E50  160A  118A  200A  120A  158A  	fcall	stringdir
  3767  0E55  00A7               	movwf	___ftmul@f1+1
  3768  0E56  160A  118A  200A  120A  158A  	fcall	stringdir
  3769  0E5B  00A8               	movwf	___ftmul@f1+2
  3770  0E5C  3003               	movlw	3
  3771  0E5D  00BA               	movwf	??_scale+1
  3772  0E5E  083A               	movf	??_scale+1,w
  3773  0E5F  00A2               	movwf	___bmul@multiplicand
  3774  0E60  300A               	movlw	10
  3775  0E61  00F0               	movwf	___awdiv@divisor
  3776  0E62  3000               	movlw	0
  3777  0E63  00F1               	movwf	___awdiv@divisor+1
  3778  0E64  083E               	movf	scale@scl,w
  3779  0E65  00F2               	movwf	___awdiv@dividend
  3780  0E66  01F3               	clrf	___awdiv@dividend+1
  3781  0E67  1BF2               	btfsc	___awdiv@dividend,7
  3782  0E68  03F3               	decf	___awdiv@dividend+1,f
  3783  0E69  160A  118A  22EA  120A  158A  	fcall	___awdiv
  3784  0E6E  0870               	movf	?___awdiv,w
  3785  0E6F  3E09               	addlw	9
  3786  0E70  160A  118A  2108  120A  158A  	fcall	___bmul
  3787  0E75  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3788  0E76  0084               	movwf	4
  3789  0E77  160A  118A  200A  120A  158A  	fcall	stringdir
  3790  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  3791  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  3792  0E7E  00A9               	movwf	___ftmul@f2
  3793  0E7F  160A  118A  200A  120A  158A  	fcall	stringdir
  3794  0E84  00AA               	movwf	___ftmul@f2+1
  3795  0E85  160A  118A  200A  120A  158A  	fcall	stringdir
  3796  0E8A  00AB               	movwf	___ftmul@f2+2
  3797  0E8B  160A  118A  272D   	fcall	___ftmul
  3798  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  3799  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  3800  0E90  0826               	movf	?___ftmul,w
  3801  0E91  00B6               	movwf	?_scale
  3802  0E92  0827               	movf	?___ftmul+1,w
  3803  0E93  00B7               	movwf	?_scale+1
  3804  0E94  0828               	movf	?___ftmul+2,w
  3805  0E95  00B8               	movwf	?_scale+2
  3806  0E96  0008               	return
  3807  0E97                     l3232:	
  3808                           
  3809                           ;doprnt.c: 434: return _npowers_[scl];
  3810  0E97  3003               	movlw	3
  3811  0E98  00B9               	movwf	??_scale
  3812  0E99  0839               	movf	??_scale,w
  3813  0E9A  00A2               	movwf	___bmul@multiplicand
  3814  0E9B  083E               	movf	scale@scl,w
  3815  0E9C  160A  118A  2108  120A  158A  	fcall	___bmul
  3816  0EA1  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3817  0EA2  0084               	movwf	4
  3818  0EA3  160A  118A  200A  120A  158A  	fcall	stringdir
  3819  0EA8  1283               	bcf	3,5	;RP0=0, select bank0
  3820  0EA9  1303               	bcf	3,6	;RP1=0, select bank0
  3821  0EAA  00B6               	movwf	?_scale
  3822  0EAB  160A  118A  200A  120A  158A  	fcall	stringdir
  3823  0EB0  00B7               	movwf	?_scale+1
  3824  0EB1  160A  118A  200A   	fcall	stringdir
  3825  0EB4  00B8               	movwf	?_scale+2
  3826  0EB5  0008               	return
  3827  0EB6                     l3236:	
  3828                           
  3829                           ;doprnt.c: 435: }
  3830                           ;doprnt.c: 436: if(scl>=110)
  3831  0EB6  083E               	movf	scale@scl,w
  3832  0EB7  3A80               	xorlw	128
  3833  0EB8  3E12               	addlw	-238
  3834  0EB9  1C03               	skipc
  3835  0EBA  2F73               	goto	l3244
  3836                           
  3837                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3838  0EBB  3003               	movlw	3
  3839  0EBC  00B9               	movwf	??_scale
  3840  0EBD  0839               	movf	??_scale,w
  3841  0EBE  00A2               	movwf	___bmul@multiplicand
  3842  0EBF  300A               	movlw	10
  3843  0EC0  00F0               	movwf	___awdiv@divisor
  3844  0EC1  3000               	movlw	0
  3845  0EC2  00F1               	movwf	___awdiv@divisor+1
  3846  0EC3  083E               	movf	scale@scl,w
  3847  0EC4  00FB               	movwf	___awmod@dividend
  3848  0EC5  01FC               	clrf	___awmod@dividend+1
  3849  0EC6  1BFB               	btfsc	___awmod@dividend,7
  3850  0EC7  03FC               	decf	___awmod@dividend+1,f
  3851  0EC8  3064               	movlw	100
  3852  0EC9  00F9               	movwf	___awmod@divisor
  3853  0ECA  3000               	movlw	0
  3854  0ECB  00FA               	movwf	___awmod@divisor+1
  3855  0ECC  160A  118A  224C  120A  158A  	fcall	___awmod
  3856  0ED1  087A               	movf	?___awmod+1,w
  3857  0ED2  00F3               	movwf	___awdiv@dividend+1
  3858  0ED3  0879               	movf	?___awmod,w
  3859  0ED4  00F2               	movwf	___awdiv@dividend
  3860  0ED5  160A  118A  22EA  120A  158A  	fcall	___awdiv
  3861  0EDA  0870               	movf	?___awdiv,w
  3862  0EDB  3E09               	addlw	9
  3863  0EDC  160A  118A  2108  120A  158A  	fcall	___bmul
  3864  0EE1  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3865  0EE2  0084               	movwf	4
  3866  0EE3  160A  118A  200A  120A  158A  	fcall	stringdir
  3867  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  3868  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  3869  0EEA  00A6               	movwf	___ftmul@f1
  3870  0EEB  160A  118A  200A  120A  158A  	fcall	stringdir
  3871  0EF0  00A7               	movwf	___ftmul@f1+1
  3872  0EF1  160A  118A  200A  120A  158A  	fcall	stringdir
  3873  0EF6  00A8               	movwf	___ftmul@f1+2
  3874  0EF7  3003               	movlw	3
  3875  0EF8  00BA               	movwf	??_scale+1
  3876  0EF9  083A               	movf	??_scale+1,w
  3877  0EFA  00A2               	movwf	___bmul@multiplicand
  3878  0EFB  3064               	movlw	100
  3879  0EFC  00F0               	movwf	___awdiv@divisor
  3880  0EFD  3000               	movlw	0
  3881  0EFE  00F1               	movwf	___awdiv@divisor+1
  3882  0EFF  083E               	movf	scale@scl,w
  3883  0F00  00F2               	movwf	___awdiv@dividend
  3884  0F01  01F3               	clrf	___awdiv@dividend+1
  3885  0F02  1BF2               	btfsc	___awdiv@dividend,7
  3886  0F03  03F3               	decf	___awdiv@dividend+1,f
  3887  0F04  160A  118A  22EA  120A  158A  	fcall	___awdiv
  3888  0F09  0870               	movf	?___awdiv,w
  3889  0F0A  3E12               	addlw	18
  3890  0F0B  160A  118A  2108  120A  158A  	fcall	___bmul
  3891  0F10  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3892  0F11  0084               	movwf	4
  3893  0F12  160A  118A  200A  120A  158A  	fcall	stringdir
  3894  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  3895  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  3896  0F19  00A9               	movwf	___ftmul@f2
  3897  0F1A  160A  118A  200A  120A  158A  	fcall	stringdir
  3898  0F1F  00AA               	movwf	___ftmul@f2+1
  3899  0F20  160A  118A  200A  120A  158A  	fcall	stringdir
  3900  0F25  00AB               	movwf	___ftmul@f2+2
  3901  0F26  160A  118A  272D  120A  158A  	fcall	___ftmul
  3902  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  3903  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  3904  0F2D  0826               	movf	?___ftmul,w
  3905  0F2E  00BB               	movwf	_scale$661
  3906  0F2F  0827               	movf	?___ftmul+1,w
  3907  0F30  00BC               	movwf	_scale$661+1
  3908  0F31  0828               	movf	?___ftmul+2,w
  3909  0F32  00BD               	movwf	_scale$661+2
  3910                           
  3911                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3912  0F33  3003               	movlw	3
  3913  0F34  00B9               	movwf	??_scale
  3914  0F35  0839               	movf	??_scale,w
  3915  0F36  00A2               	movwf	___bmul@multiplicand
  3916  0F37  083E               	movf	scale@scl,w
  3917  0F38  00FB               	movwf	___awmod@dividend
  3918  0F39  01FC               	clrf	___awmod@dividend+1
  3919  0F3A  1BFB               	btfsc	___awmod@dividend,7
  3920  0F3B  03FC               	decf	___awmod@dividend+1,f
  3921  0F3C  300A               	movlw	10
  3922  0F3D  00F9               	movwf	___awmod@divisor
  3923  0F3E  3000               	movlw	0
  3924  0F3F  00FA               	movwf	___awmod@divisor+1
  3925  0F40  160A  118A  224C  120A  158A  	fcall	___awmod
  3926  0F45  0879               	movf	?___awmod,w
  3927  0F46  160A  118A  2108  120A  158A  	fcall	___bmul
  3928  0F4B  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3929  0F4C  0084               	movwf	4
  3930  0F4D  160A  118A  200A  120A  158A  	fcall	stringdir
  3931  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  3932  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  3933  0F54  00A6               	movwf	___ftmul@f1
  3934  0F55  160A  118A  200A  120A  158A  	fcall	stringdir
  3935  0F5A  00A7               	movwf	___ftmul@f1+1
  3936  0F5B  160A  118A  200A  120A  158A  	fcall	stringdir
  3937  0F60  00A8               	movwf	___ftmul@f1+2
  3938  0F61  083B               	movf	_scale$661,w
  3939  0F62  00A9               	movwf	___ftmul@f2
  3940  0F63  083C               	movf	_scale$661+1,w
  3941  0F64  00AA               	movwf	___ftmul@f2+1
  3942  0F65  083D               	movf	_scale$661+2,w
  3943  0F66  00AB               	movwf	___ftmul@f2+2
  3944  0F67  160A  118A  272D   	fcall	___ftmul
  3945  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  3946  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  3947  0F6C  0826               	movf	?___ftmul,w
  3948  0F6D  00B6               	movwf	?_scale
  3949  0F6E  0827               	movf	?___ftmul+1,w
  3950  0F6F  00B7               	movwf	?_scale+1
  3951  0F70  0828               	movf	?___ftmul+2,w
  3952  0F71  00B8               	movwf	?_scale+2
  3953  0F72  0008               	return
  3954  0F73                     l3244:	
  3955                           
  3956                           ;doprnt.c: 438: else if(scl > 10)
  3957  0F73  083E               	movf	scale@scl,w
  3958  0F74  3A80               	xorlw	128
  3959  0F75  3E75               	addlw	-139
  3960  0F76  1C03               	skipc
  3961  0F77  2FE1               	goto	l3250
  3962                           
  3963                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3964  0F78  3003               	movlw	3
  3965  0F79  00B9               	movwf	??_scale
  3966  0F7A  0839               	movf	??_scale,w
  3967  0F7B  00A2               	movwf	___bmul@multiplicand
  3968  0F7C  083E               	movf	scale@scl,w
  3969  0F7D  00FB               	movwf	___awmod@dividend
  3970  0F7E  01FC               	clrf	___awmod@dividend+1
  3971  0F7F  1BFB               	btfsc	___awmod@dividend,7
  3972  0F80  03FC               	decf	___awmod@dividend+1,f
  3973  0F81  300A               	movlw	10
  3974  0F82  00F9               	movwf	___awmod@divisor
  3975  0F83  3000               	movlw	0
  3976  0F84  00FA               	movwf	___awmod@divisor+1
  3977  0F85  160A  118A  224C  120A  158A  	fcall	___awmod
  3978  0F8A  0879               	movf	?___awmod,w
  3979  0F8B  160A  118A  2108  120A  158A  	fcall	___bmul
  3980  0F90  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3981  0F91  0084               	movwf	4
  3982  0F92  160A  118A  200A  120A  158A  	fcall	stringdir
  3983  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  3984  0F98  1303               	bcf	3,6	;RP1=0, select bank0
  3985  0F99  00A6               	movwf	___ftmul@f1
  3986  0F9A  160A  118A  200A  120A  158A  	fcall	stringdir
  3987  0F9F  00A7               	movwf	___ftmul@f1+1
  3988  0FA0  160A  118A  200A  120A  158A  	fcall	stringdir
  3989  0FA5  00A8               	movwf	___ftmul@f1+2
  3990  0FA6  3003               	movlw	3
  3991  0FA7  00BA               	movwf	??_scale+1
  3992  0FA8  083A               	movf	??_scale+1,w
  3993  0FA9  00A2               	movwf	___bmul@multiplicand
  3994  0FAA  300A               	movlw	10
  3995  0FAB  00F0               	movwf	___awdiv@divisor
  3996  0FAC  3000               	movlw	0
  3997  0FAD  00F1               	movwf	___awdiv@divisor+1
  3998  0FAE  083E               	movf	scale@scl,w
  3999  0FAF  00F2               	movwf	___awdiv@dividend
  4000  0FB0  01F3               	clrf	___awdiv@dividend+1
  4001  0FB1  1BF2               	btfsc	___awdiv@dividend,7
  4002  0FB2  03F3               	decf	___awdiv@dividend+1,f
  4003  0FB3  160A  118A  22EA  120A  158A  	fcall	___awdiv
  4004  0FB8  0870               	movf	?___awdiv,w
  4005  0FB9  3E09               	addlw	9
  4006  0FBA  160A  118A  2108  120A  158A  	fcall	___bmul
  4007  0FBF  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  4008  0FC0  0084               	movwf	4
  4009  0FC1  160A  118A  200A  120A  158A  	fcall	stringdir
  4010  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  4011  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  4012  0FC8  00A9               	movwf	___ftmul@f2
  4013  0FC9  160A  118A  200A  120A  158A  	fcall	stringdir
  4014  0FCE  00AA               	movwf	___ftmul@f2+1
  4015  0FCF  160A  118A  200A  120A  158A  	fcall	stringdir
  4016  0FD4  00AB               	movwf	___ftmul@f2+2
  4017  0FD5  160A  118A  272D   	fcall	___ftmul
  4018  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  4019  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  4020  0FDA  0826               	movf	?___ftmul,w
  4021  0FDB  00B6               	movwf	?_scale
  4022  0FDC  0827               	movf	?___ftmul+1,w
  4023  0FDD  00B7               	movwf	?_scale+1
  4024  0FDE  0828               	movf	?___ftmul+2,w
  4025  0FDF  00B8               	movwf	?_scale+2
  4026  0FE0  0008               	return
  4027  0FE1                     l3250:	
  4028                           
  4029                           ;doprnt.c: 440: return _powers_[scl];
  4030  0FE1  3003               	movlw	3
  4031  0FE2  00B9               	movwf	??_scale
  4032  0FE3  0839               	movf	??_scale,w
  4033  0FE4  00A2               	movwf	___bmul@multiplicand
  4034  0FE5  083E               	movf	scale@scl,w
  4035  0FE6  160A  118A  2108  120A  158A  	fcall	___bmul
  4036  0FEB  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  4037  0FEC  0084               	movwf	4
  4038  0FED  160A  118A  200A  120A  158A  	fcall	stringdir
  4039  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  4040  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  4041  0FF4  00B6               	movwf	?_scale
  4042  0FF5  160A  118A  200A  120A  158A  	fcall	stringdir
  4043  0FFA  00B7               	movwf	?_scale+1
  4044  0FFB  160A  118A  200A   	fcall	stringdir
  4045  0FFE  00B8               	movwf	?_scale+2
  4046  0FFF  0008               	return
  4047  1000                     __end_of_scale:	
  4048                           
  4049                           	psect	text3
  4050  10D5                     __ptext3:	
  4051 ;; *************** function _isdigit *****************
  4052 ;; Defined at:
  4053 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  4054 ;; Parameters:    Size  Location     Type
  4055 ;;  c               1    wreg     unsigned char 
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  c               1    1[COMMON] unsigned char 
  4058 ;; Return value:  Size  Location     Type
  4059 ;;		None               void
  4060 ;; Registers used:
  4061 ;;		wreg, status,2, status,0
  4062 ;; Tracked objects:
  4063 ;;		On entry : 0/0
  4064 ;;		On exit  : 0/0
  4065 ;;		Unchanged: 0/0
  4066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4067 ;;      Params:         0       0       0       0       0
  4068 ;;      Locals:         2       0       0       0       0
  4069 ;;      Temps:          0       0       0       0       0
  4070 ;;      Totals:         2       0       0       0       0
  4071 ;;Total ram usage:        2 bytes
  4072 ;; Hardware stack levels used:    1
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_sprintf
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           
  4081                           ;psect for function _isdigit
  4082  10D5                     _isdigit:	
  4083                           
  4084                           ;incstack = 0
  4085                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4086                           ;isdigit@c stored from wreg
  4087  10D5  00F1               	movwf	isdigit@c
  4088  10D6  01F0               	clrf	_isdigit$438
  4089  10D7  303A               	movlw	58
  4090  10D8  0271               	subwf	isdigit@c,w
  4091  10D9  1803               	skipnc
  4092  10DA  28E1               	goto	l3262
  4093  10DB  3030               	movlw	48
  4094  10DC  0271               	subwf	isdigit@c,w
  4095  10DD  1C03               	skipc
  4096  10DE  28E1               	goto	l3262
  4097  10DF  01F0               	clrf	_isdigit$438
  4098  10E0  0AF0               	incf	_isdigit$438,f
  4099  10E1                     l3262:	
  4100  10E1  0C70               	rrf	_isdigit$438,w
  4101  10E2  0008               	return
  4102  10E3                     __end_of_isdigit:	
  4103                           
  4104                           	psect	text4
  4105  0BCB                     __ptext4:	
  4106 ;; *************** function _fround *****************
  4107 ;; Defined at:
  4108 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;  prec            1    wreg     unsigned char 
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;  prec            1   37[BANK0 ] unsigned char 
  4113 ;; Return value:  Size  Location     Type
  4114 ;;                  3   22[BANK0 ] unsigned char 
  4115 ;; Registers used:
  4116 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4117 ;; Tracked objects:
  4118 ;;		On entry : 0/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4122 ;;      Params:         0       3       0       0       0
  4123 ;;      Locals:         0       7       0       0       0
  4124 ;;      Temps:          0       6       0       0       0
  4125 ;;      Totals:         0      16       0       0       0
  4126 ;;Total ram usage:       16 bytes
  4127 ;; Hardware stack levels used:    1
  4128 ;; Hardware stack levels required when called:    2
  4129 ;; This function calls:
  4130 ;;		___awdiv
  4131 ;;		___awmod
  4132 ;;		___bmul
  4133 ;;		___ftmul
  4134 ;; This function is called by:
  4135 ;;		_sprintf
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           
  4140                           ;psect for function _fround
  4141  0BCB                     _fround:	
  4142                           
  4143                           ;incstack = 0
  4144                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4145                           ;fround@prec stored from wreg
  4146  0BCB  1283               	bcf	3,5	;RP0=0, select bank0
  4147  0BCC  1303               	bcf	3,6	;RP1=0, select bank0
  4148  0BCD  00C5               	movwf	fround@prec
  4149                           
  4150                           ;doprnt.c: 413: if(prec>=110)
  4151  0BCE  306E               	movlw	110
  4152  0BCF  0245               	subwf	fround@prec,w
  4153  0BD0  1C03               	skipc
  4154  0BD1  2CA9               	goto	l3202
  4155                           
  4156                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4157  0BD2  3003               	movlw	3
  4158  0BD3  00B9               	movwf	??_fround
  4159  0BD4  0839               	movf	??_fround,w
  4160  0BD5  00A2               	movwf	___bmul@multiplicand
  4161  0BD6  300A               	movlw	10
  4162  0BD7  00F0               	movwf	___awdiv@divisor
  4163  0BD8  3000               	movlw	0
  4164  0BD9  00F1               	movwf	___awdiv@divisor+1
  4165  0BDA  0845               	movf	fround@prec,w
  4166  0BDB  00BA               	movwf	??_fround+1
  4167  0BDC  01BB               	clrf	??_fround+2
  4168  0BDD  083A               	movf	??_fround+1,w
  4169  0BDE  00FB               	movwf	___awmod@dividend
  4170  0BDF  083B               	movf	??_fround+2,w
  4171  0BE0  00FC               	movwf	___awmod@dividend+1
  4172  0BE1  3064               	movlw	100
  4173  0BE2  00F9               	movwf	___awmod@divisor
  4174  0BE3  3000               	movlw	0
  4175  0BE4  00FA               	movwf	___awmod@divisor+1
  4176  0BE5  160A  118A  224C  120A  158A  	fcall	___awmod
  4177  0BEA  087A               	movf	?___awmod+1,w
  4178  0BEB  00F3               	movwf	___awdiv@dividend+1
  4179  0BEC  0879               	movf	?___awmod,w
  4180  0BED  00F2               	movwf	___awdiv@dividend
  4181  0BEE  160A  118A  22EA  120A  158A  	fcall	___awdiv
  4182  0BF3  0870               	movf	?___awdiv,w
  4183  0BF4  3E09               	addlw	9
  4184  0BF5  160A  118A  2108  120A  158A  	fcall	___bmul
  4185  0BFA  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4186  0BFB  0084               	movwf	4
  4187  0BFC  160A  118A  200A  120A  158A  	fcall	stringdir
  4188  0C01  1283               	bcf	3,5	;RP0=0, select bank0
  4189  0C02  1303               	bcf	3,6	;RP1=0, select bank0
  4190  0C03  00A6               	movwf	___ftmul@f1
  4191  0C04  160A  118A  200A  120A  158A  	fcall	stringdir
  4192  0C09  00A7               	movwf	___ftmul@f1+1
  4193  0C0A  160A  118A  200A  120A  158A  	fcall	stringdir
  4194  0C0F  00A8               	movwf	___ftmul@f1+2
  4195  0C10  3003               	movlw	3
  4196  0C11  00BC               	movwf	??_fround+3
  4197  0C12  083C               	movf	??_fround+3,w
  4198  0C13  00A2               	movwf	___bmul@multiplicand
  4199  0C14  3064               	movlw	100
  4200  0C15  00F0               	movwf	___awdiv@divisor
  4201  0C16  3000               	movlw	0
  4202  0C17  00F1               	movwf	___awdiv@divisor+1
  4203  0C18  0845               	movf	fround@prec,w
  4204  0C19  00BD               	movwf	??_fround+4
  4205  0C1A  01BE               	clrf	??_fround+5
  4206  0C1B  083D               	movf	??_fround+4,w
  4207  0C1C  00F2               	movwf	___awdiv@dividend
  4208  0C1D  083E               	movf	??_fround+5,w
  4209  0C1E  00F3               	movwf	___awdiv@dividend+1
  4210  0C1F  160A  118A  22EA  120A  158A  	fcall	___awdiv
  4211  0C24  0870               	movf	?___awdiv,w
  4212  0C25  3E12               	addlw	18
  4213  0C26  160A  118A  2108  120A  158A  	fcall	___bmul
  4214  0C2B  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4215  0C2C  0084               	movwf	4
  4216  0C2D  160A  118A  200A  120A  158A  	fcall	stringdir
  4217  0C32  1283               	bcf	3,5	;RP0=0, select bank0
  4218  0C33  1303               	bcf	3,6	;RP1=0, select bank0
  4219  0C34  00A9               	movwf	___ftmul@f2
  4220  0C35  160A  118A  200A  120A  158A  	fcall	stringdir
  4221  0C3A  00AA               	movwf	___ftmul@f2+1
  4222  0C3B  160A  118A  200A  120A  158A  	fcall	stringdir
  4223  0C40  00AB               	movwf	___ftmul@f2+2
  4224  0C41  160A  118A  272D  120A  158A  	fcall	___ftmul
  4225  0C46  1283               	bcf	3,5	;RP0=0, select bank0
  4226  0C47  1303               	bcf	3,6	;RP1=0, select bank0
  4227  0C48  0826               	movf	?___ftmul,w
  4228  0C49  00C2               	movwf	_fround$659
  4229  0C4A  0827               	movf	?___ftmul+1,w
  4230  0C4B  00C3               	movwf	_fround$659+1
  4231  0C4C  0828               	movf	?___ftmul+2,w
  4232  0C4D  00C4               	movwf	_fround$659+2
  4233                           
  4234                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4235  0C4E  3003               	movlw	3
  4236  0C4F  00B9               	movwf	??_fround
  4237  0C50  0839               	movf	??_fround,w
  4238  0C51  00A2               	movwf	___bmul@multiplicand
  4239  0C52  0845               	movf	fround@prec,w
  4240  0C53  00BA               	movwf	??_fround+1
  4241  0C54  01BB               	clrf	??_fround+2
  4242  0C55  083A               	movf	??_fround+1,w
  4243  0C56  00FB               	movwf	___awmod@dividend
  4244  0C57  083B               	movf	??_fround+2,w
  4245  0C58  00FC               	movwf	___awmod@dividend+1
  4246  0C59  300A               	movlw	10
  4247  0C5A  00F9               	movwf	___awmod@divisor
  4248  0C5B  3000               	movlw	0
  4249  0C5C  00FA               	movwf	___awmod@divisor+1
  4250  0C5D  160A  118A  224C  120A  158A  	fcall	___awmod
  4251  0C62  0879               	movf	?___awmod,w
  4252  0C63  160A  118A  2108  120A  158A  	fcall	___bmul
  4253  0C68  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4254  0C69  0084               	movwf	4
  4255  0C6A  160A  118A  200A  120A  158A  	fcall	stringdir
  4256  0C6F  1283               	bcf	3,5	;RP0=0, select bank0
  4257  0C70  1303               	bcf	3,6	;RP1=0, select bank0
  4258  0C71  00A6               	movwf	___ftmul@f1
  4259  0C72  160A  118A  200A  120A  158A  	fcall	stringdir
  4260  0C77  00A7               	movwf	___ftmul@f1+1
  4261  0C78  160A  118A  200A  120A  158A  	fcall	stringdir
  4262  0C7D  00A8               	movwf	___ftmul@f1+2
  4263  0C7E  0842               	movf	_fround$659,w
  4264  0C7F  00A9               	movwf	___ftmul@f2
  4265  0C80  0843               	movf	_fround$659+1,w
  4266  0C81  00AA               	movwf	___ftmul@f2+1
  4267  0C82  0844               	movf	_fround$659+2,w
  4268  0C83  00AB               	movwf	___ftmul@f2+2
  4269  0C84  160A  118A  272D  120A  158A  	fcall	___ftmul
  4270  0C89  1283               	bcf	3,5	;RP0=0, select bank0
  4271  0C8A  1303               	bcf	3,6	;RP1=0, select bank0
  4272  0C8B  0826               	movf	?___ftmul,w
  4273  0C8C  00BF               	movwf	_fround$660
  4274  0C8D  0827               	movf	?___ftmul+1,w
  4275  0C8E  00C0               	movwf	_fround$660+1
  4276  0C8F  0828               	movf	?___ftmul+2,w
  4277  0C90  00C1               	movwf	_fround$660+2
  4278                           
  4279                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4280  0C91  3000               	movlw	0
  4281  0C92  00A6               	movwf	___ftmul@f1
  4282  0C93  3000               	movlw	0
  4283  0C94  00A7               	movwf	___ftmul@f1+1
  4284  0C95  303F               	movlw	63
  4285  0C96  00A8               	movwf	___ftmul@f1+2
  4286  0C97  083F               	movf	_fround$660,w
  4287  0C98  00A9               	movwf	___ftmul@f2
  4288  0C99  0840               	movf	_fround$660+1,w
  4289  0C9A  00AA               	movwf	___ftmul@f2+1
  4290  0C9B  0841               	movf	_fround$660+2,w
  4291  0C9C  00AB               	movwf	___ftmul@f2+2
  4292  0C9D  160A  118A  272D   	fcall	___ftmul
  4293  0CA0  1283               	bcf	3,5	;RP0=0, select bank0
  4294  0CA1  1303               	bcf	3,6	;RP1=0, select bank0
  4295  0CA2  0826               	movf	?___ftmul,w
  4296  0CA3  00B6               	movwf	?_fround
  4297  0CA4  0827               	movf	?___ftmul+1,w
  4298  0CA5  00B7               	movwf	?_fround+1
  4299  0CA6  0828               	movf	?___ftmul+2,w
  4300  0CA7  00B8               	movwf	?_fround+2
  4301  0CA8  0008               	return
  4302  0CA9                     l3202:	
  4303                           
  4304                           ;doprnt.c: 415: else if(prec > 10)
  4305  0CA9  300B               	movlw	11
  4306  0CAA  0245               	subwf	fround@prec,w
  4307  0CAB  1C03               	skipc
  4308  0CAC  2D33               	goto	l3210
  4309                           
  4310                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4311  0CAD  3003               	movlw	3
  4312  0CAE  00B9               	movwf	??_fround
  4313  0CAF  0839               	movf	??_fround,w
  4314  0CB0  00A2               	movwf	___bmul@multiplicand
  4315  0CB1  0845               	movf	fround@prec,w
  4316  0CB2  00BA               	movwf	??_fround+1
  4317  0CB3  01BB               	clrf	??_fround+2
  4318  0CB4  083A               	movf	??_fround+1,w
  4319  0CB5  00FB               	movwf	___awmod@dividend
  4320  0CB6  083B               	movf	??_fround+2,w
  4321  0CB7  00FC               	movwf	___awmod@dividend+1
  4322  0CB8  300A               	movlw	10
  4323  0CB9  00F9               	movwf	___awmod@divisor
  4324  0CBA  3000               	movlw	0
  4325  0CBB  00FA               	movwf	___awmod@divisor+1
  4326  0CBC  160A  118A  224C  120A  158A  	fcall	___awmod
  4327  0CC1  0879               	movf	?___awmod,w
  4328  0CC2  160A  118A  2108  120A  158A  	fcall	___bmul
  4329  0CC7  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4330  0CC8  0084               	movwf	4
  4331  0CC9  160A  118A  200A  120A  158A  	fcall	stringdir
  4332  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
  4333  0CCF  1303               	bcf	3,6	;RP1=0, select bank0
  4334  0CD0  00A6               	movwf	___ftmul@f1
  4335  0CD1  160A  118A  200A  120A  158A  	fcall	stringdir
  4336  0CD6  00A7               	movwf	___ftmul@f1+1
  4337  0CD7  160A  118A  200A  120A  158A  	fcall	stringdir
  4338  0CDC  00A8               	movwf	___ftmul@f1+2
  4339  0CDD  3003               	movlw	3
  4340  0CDE  00BC               	movwf	??_fround+3
  4341  0CDF  083C               	movf	??_fround+3,w
  4342  0CE0  00A2               	movwf	___bmul@multiplicand
  4343  0CE1  300A               	movlw	10
  4344  0CE2  00F0               	movwf	___awdiv@divisor
  4345  0CE3  3000               	movlw	0
  4346  0CE4  00F1               	movwf	___awdiv@divisor+1
  4347  0CE5  0845               	movf	fround@prec,w
  4348  0CE6  00BD               	movwf	??_fround+4
  4349  0CE7  01BE               	clrf	??_fround+5
  4350  0CE8  083D               	movf	??_fround+4,w
  4351  0CE9  00F2               	movwf	___awdiv@dividend
  4352  0CEA  083E               	movf	??_fround+5,w
  4353  0CEB  00F3               	movwf	___awdiv@dividend+1
  4354  0CEC  160A  118A  22EA  120A  158A  	fcall	___awdiv
  4355  0CF1  0870               	movf	?___awdiv,w
  4356  0CF2  3E09               	addlw	9
  4357  0CF3  160A  118A  2108  120A  158A  	fcall	___bmul
  4358  0CF8  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4359  0CF9  0084               	movwf	4
  4360  0CFA  160A  118A  200A  120A  158A  	fcall	stringdir
  4361  0CFF  1283               	bcf	3,5	;RP0=0, select bank0
  4362  0D00  1303               	bcf	3,6	;RP1=0, select bank0
  4363  0D01  00A9               	movwf	___ftmul@f2
  4364  0D02  160A  118A  200A  120A  158A  	fcall	stringdir
  4365  0D07  00AA               	movwf	___ftmul@f2+1
  4366  0D08  160A  118A  200A  120A  158A  	fcall	stringdir
  4367  0D0D  00AB               	movwf	___ftmul@f2+2
  4368  0D0E  160A  118A  272D  120A  158A  	fcall	___ftmul
  4369  0D13  1283               	bcf	3,5	;RP0=0, select bank0
  4370  0D14  1303               	bcf	3,6	;RP1=0, select bank0
  4371  0D15  0826               	movf	?___ftmul,w
  4372  0D16  00C2               	movwf	_fround$659
  4373  0D17  0827               	movf	?___ftmul+1,w
  4374  0D18  00C3               	movwf	_fround$659+1
  4375  0D19  0828               	movf	?___ftmul+2,w
  4376  0D1A  00C4               	movwf	_fround$659+2
  4377                           
  4378                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4379  0D1B  3000               	movlw	0
  4380  0D1C  00A6               	movwf	___ftmul@f1
  4381  0D1D  3000               	movlw	0
  4382  0D1E  00A7               	movwf	___ftmul@f1+1
  4383  0D1F  303F               	movlw	63
  4384  0D20  00A8               	movwf	___ftmul@f1+2
  4385  0D21  0842               	movf	_fround$659,w
  4386  0D22  00A9               	movwf	___ftmul@f2
  4387  0D23  0843               	movf	_fround$659+1,w
  4388  0D24  00AA               	movwf	___ftmul@f2+1
  4389  0D25  0844               	movf	_fround$659+2,w
  4390  0D26  00AB               	movwf	___ftmul@f2+2
  4391  0D27  160A  118A  272D   	fcall	___ftmul
  4392  0D2A  1283               	bcf	3,5	;RP0=0, select bank0
  4393  0D2B  1303               	bcf	3,6	;RP1=0, select bank0
  4394  0D2C  0826               	movf	?___ftmul,w
  4395  0D2D  00B6               	movwf	?_fround
  4396  0D2E  0827               	movf	?___ftmul+1,w
  4397  0D2F  00B7               	movwf	?_fround+1
  4398  0D30  0828               	movf	?___ftmul+2,w
  4399  0D31  00B8               	movwf	?_fround+2
  4400  0D32  0008               	return
  4401  0D33                     l3210:	
  4402                           
  4403                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4404  0D33  3000               	movlw	0
  4405  0D34  00A6               	movwf	___ftmul@f1
  4406  0D35  3000               	movlw	0
  4407  0D36  00A7               	movwf	___ftmul@f1+1
  4408  0D37  303F               	movlw	63
  4409  0D38  00A8               	movwf	___ftmul@f1+2
  4410  0D39  3003               	movlw	3
  4411  0D3A  00B9               	movwf	??_fround
  4412  0D3B  0839               	movf	??_fround,w
  4413  0D3C  00A2               	movwf	___bmul@multiplicand
  4414  0D3D  0845               	movf	fround@prec,w
  4415  0D3E  160A  118A  2108  120A  158A  	fcall	___bmul
  4416  0D43  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4417  0D44  0084               	movwf	4
  4418  0D45  160A  118A  200A  120A  158A  	fcall	stringdir
  4419  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  4420  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  4421  0D4C  00A9               	movwf	___ftmul@f2
  4422  0D4D  160A  118A  200A  120A  158A  	fcall	stringdir
  4423  0D52  00AA               	movwf	___ftmul@f2+1
  4424  0D53  160A  118A  200A  120A  158A  	fcall	stringdir
  4425  0D58  00AB               	movwf	___ftmul@f2+2
  4426  0D59  160A  118A  272D   	fcall	___ftmul
  4427  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  4428  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  4429  0D5E  0826               	movf	?___ftmul,w
  4430  0D5F  00B6               	movwf	?_fround
  4431  0D60  0827               	movf	?___ftmul+1,w
  4432  0D61  00B7               	movwf	?_fround+1
  4433  0D62  0828               	movf	?___ftmul+2,w
  4434  0D63  00B8               	movwf	?_fround+2
  4435  0D64  0008               	return
  4436  0D65                     __end_of_fround:	
  4437                           
  4438                           	psect	text5
  4439  1108                     __ptext5:	
  4440 ;; *************** function ___bmul *****************
  4441 ;; Defined at:
  4442 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul8.c"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  multiplier      1    wreg     unsigned char 
  4445 ;;  multiplicand    1    2[BANK0 ] unsigned char 
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;  multiplier      1    5[BANK0 ] unsigned char 
  4448 ;;  product         1    4[BANK0 ] unsigned char 
  4449 ;; Return value:  Size  Location     Type
  4450 ;;                  1    wreg      unsigned char 
  4451 ;; Registers used:
  4452 ;;		wreg, status,2, status,0
  4453 ;; Tracked objects:
  4454 ;;		On entry : 0/0
  4455 ;;		On exit  : 0/0
  4456 ;;		Unchanged: 0/0
  4457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4458 ;;      Params:         0       1       0       0       0
  4459 ;;      Locals:         0       2       0       0       0
  4460 ;;      Temps:          0       1       0       0       0
  4461 ;;      Totals:         0       4       0       0       0
  4462 ;;Total ram usage:        4 bytes
  4463 ;; Hardware stack levels used:    1
  4464 ;; This function calls:
  4465 ;;		Nothing
  4466 ;; This function is called by:
  4467 ;;		_fround
  4468 ;;		_scale
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           
  4473                           ;psect for function ___bmul
  4474  1108                     ___bmul:	
  4475                           
  4476                           ;incstack = 0
  4477                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4478                           ;___bmul@multiplier stored from wreg
  4479  1108  1283               	bcf	3,5	;RP0=0, select bank0
  4480  1109  1303               	bcf	3,6	;RP1=0, select bank0
  4481  110A  00A5               	movwf	___bmul@multiplier
  4482  110B  01A4               	clrf	___bmul@product
  4483  110C                     l2912:	
  4484  110C  1C25               	btfss	___bmul@multiplier,0
  4485  110D  2912               	goto	l2916
  4486  110E  0822               	movf	___bmul@multiplicand,w
  4487  110F  00A3               	movwf	??___bmul
  4488  1110  0823               	movf	??___bmul,w
  4489  1111  07A4               	addwf	___bmul@product,f
  4490  1112                     l2916:	
  4491  1112  1003               	clrc
  4492  1113  0DA2               	rlf	___bmul@multiplicand,f
  4493  1114  1003               	clrc
  4494  1115  0CA5               	rrf	___bmul@multiplier,f
  4495  1116  0825               	movf	___bmul@multiplier,w
  4496  1117  1D03               	btfss	3,2
  4497  1118  290C               	goto	l2912
  4498  1119  0824               	movf	___bmul@product,w
  4499  111A  0008               	return
  4500  111B                     __end_of___bmul:	
  4501                           
  4502                           	psect	text6
  4503  124C                     __ptext6:	
  4504 ;; *************** function ___awmod *****************
  4505 ;; Defined at:
  4506 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  divisor         2    9[COMMON] int 
  4509 ;;  dividend        2   11[COMMON] int 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;  sign            1    1[BANK0 ] unsigned char 
  4512 ;;  counter         1    0[BANK0 ] unsigned char 
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  2    9[COMMON] int 
  4515 ;; Registers used:
  4516 ;;		wreg, status,2, status,0
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4522 ;;      Params:         4       0       0       0       0
  4523 ;;      Locals:         0       2       0       0       0
  4524 ;;      Temps:          1       0       0       0       0
  4525 ;;      Totals:         5       2       0       0       0
  4526 ;;Total ram usage:        7 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; This function calls:
  4529 ;;		Nothing
  4530 ;; This function is called by:
  4531 ;;		_main
  4532 ;;		_fround
  4533 ;;		_scale
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           
  4538                           ;psect for function ___awmod
  4539  124C                     ___awmod:	
  4540                           
  4541                           ;incstack = 0
  4542                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4543  124C  1283               	bcf	3,5	;RP0=0, select bank0
  4544  124D  1303               	bcf	3,6	;RP1=0, select bank0
  4545  124E  01A1               	clrf	___awmod@sign
  4546  124F  1FFC               	btfss	___awmod@dividend+1,7
  4547  1250  2A58               	goto	l2976
  4548  1251  09FB               	comf	___awmod@dividend,f
  4549  1252  09FC               	comf	___awmod@dividend+1,f
  4550  1253  0AFB               	incf	___awmod@dividend,f
  4551  1254  1903               	skipnz
  4552  1255  0AFC               	incf	___awmod@dividend+1,f
  4553  1256  01A1               	clrf	___awmod@sign
  4554  1257  0AA1               	incf	___awmod@sign,f
  4555  1258                     l2976:	
  4556  1258  1FFA               	btfss	___awmod@divisor+1,7
  4557  1259  2A5F               	goto	l2980
  4558  125A  09F9               	comf	___awmod@divisor,f
  4559  125B  09FA               	comf	___awmod@divisor+1,f
  4560  125C  0AF9               	incf	___awmod@divisor,f
  4561  125D  1903               	skipnz
  4562  125E  0AFA               	incf	___awmod@divisor+1,f
  4563  125F                     l2980:	
  4564  125F  0879               	movf	___awmod@divisor,w
  4565  1260  047A               	iorwf	___awmod@divisor+1,w
  4566  1261  1903               	btfsc	3,2
  4567  1262  2A8C               	goto	l2998
  4568  1263  01A0               	clrf	___awmod@counter
  4569  1264  0AA0               	incf	___awmod@counter,f
  4570  1265                     l2988:	
  4571  1265  1BFA               	btfsc	___awmod@divisor+1,7
  4572  1266  2A73               	goto	l2990
  4573  1267  3001               	movlw	1
  4574  1268                     u4575:	
  4575  1268  1003               	clrc
  4576  1269  0DF9               	rlf	___awmod@divisor,f
  4577  126A  0DFA               	rlf	___awmod@divisor+1,f
  4578  126B  3EFF               	addlw	-1
  4579  126C  1D03               	skipz
  4580  126D  2A68               	goto	u4575
  4581  126E  3001               	movlw	1
  4582  126F  00FD               	movwf	??___awmod
  4583  1270  087D               	movf	??___awmod,w
  4584  1271  07A0               	addwf	___awmod@counter,f
  4585  1272  2A65               	goto	l2988
  4586  1273                     l2990:	
  4587  1273  087A               	movf	___awmod@divisor+1,w
  4588  1274  027C               	subwf	___awmod@dividend+1,w
  4589  1275  1D03               	skipz
  4590  1276  2A79               	goto	u4595
  4591  1277  0879               	movf	___awmod@divisor,w
  4592  1278  027B               	subwf	___awmod@dividend,w
  4593  1279                     u4595:	
  4594  1279  1C03               	skipc
  4595  127A  2A81               	goto	l2994
  4596  127B  0879               	movf	___awmod@divisor,w
  4597  127C  02FB               	subwf	___awmod@dividend,f
  4598  127D  087A               	movf	___awmod@divisor+1,w
  4599  127E  1C03               	skipc
  4600  127F  03FC               	decf	___awmod@dividend+1,f
  4601  1280  02FC               	subwf	___awmod@dividend+1,f
  4602  1281                     l2994:	
  4603  1281  3001               	movlw	1
  4604  1282                     u4605:	
  4605  1282  1003               	clrc
  4606  1283  0CFA               	rrf	___awmod@divisor+1,f
  4607  1284  0CF9               	rrf	___awmod@divisor,f
  4608  1285  3EFF               	addlw	-1
  4609  1286  1D03               	skipz
  4610  1287  2A82               	goto	u4605
  4611  1288  3001               	movlw	1
  4612  1289  02A0               	subwf	___awmod@counter,f
  4613  128A  1D03               	btfss	3,2
  4614  128B  2A73               	goto	l2990
  4615  128C                     l2998:	
  4616  128C  0821               	movf	___awmod@sign,w
  4617  128D  1903               	btfsc	3,2
  4618  128E  2A94               	goto	l3002
  4619  128F  09FB               	comf	___awmod@dividend,f
  4620  1290  09FC               	comf	___awmod@dividend+1,f
  4621  1291  0AFB               	incf	___awmod@dividend,f
  4622  1292  1903               	skipnz
  4623  1293  0AFC               	incf	___awmod@dividend+1,f
  4624  1294                     l3002:	
  4625  1294  087C               	movf	___awmod@dividend+1,w
  4626  1295  00FA               	movwf	?___awmod+1
  4627  1296  087B               	movf	___awmod@dividend,w
  4628  1297  00F9               	movwf	?___awmod
  4629  1298  0008               	return
  4630  1299                     __end_of___awmod:	
  4631                           
  4632                           	psect	text7
  4633  12EA                     __ptext7:	
  4634 ;; *************** function ___awdiv *****************
  4635 ;; Defined at:
  4636 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  divisor         2    0[COMMON] int 
  4639 ;;  dividend        2    2[COMMON] int 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  quotient        2    7[COMMON] int 
  4642 ;;  sign            1    6[COMMON] unsigned char 
  4643 ;;  counter         1    5[COMMON] unsigned char 
  4644 ;; Return value:  Size  Location     Type
  4645 ;;                  2    0[COMMON] int 
  4646 ;; Registers used:
  4647 ;;		wreg, status,2, status,0
  4648 ;; Tracked objects:
  4649 ;;		On entry : 0/0
  4650 ;;		On exit  : 0/0
  4651 ;;		Unchanged: 0/0
  4652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4653 ;;      Params:         4       0       0       0       0
  4654 ;;      Locals:         4       0       0       0       0
  4655 ;;      Temps:          1       0       0       0       0
  4656 ;;      Totals:         9       0       0       0       0
  4657 ;;Total ram usage:        9 bytes
  4658 ;; Hardware stack levels used:    1
  4659 ;; This function calls:
  4660 ;;		Nothing
  4661 ;; This function is called by:
  4662 ;;		_main
  4663 ;;		_fround
  4664 ;;		_scale
  4665 ;;		_sprintf
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           
  4670                           ;psect for function ___awdiv
  4671  12EA                     ___awdiv:	
  4672                           
  4673                           ;incstack = 0
  4674                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4675  12EA  01F6               	clrf	___awdiv@sign
  4676  12EB  1FF1               	btfss	___awdiv@divisor+1,7
  4677  12EC  2AF4               	goto	l2932
  4678  12ED  09F0               	comf	___awdiv@divisor,f
  4679  12EE  09F1               	comf	___awdiv@divisor+1,f
  4680  12EF  0AF0               	incf	___awdiv@divisor,f
  4681  12F0  1903               	skipnz
  4682  12F1  0AF1               	incf	___awdiv@divisor+1,f
  4683  12F2  01F6               	clrf	___awdiv@sign
  4684  12F3  0AF6               	incf	___awdiv@sign,f
  4685  12F4                     l2932:	
  4686  12F4  1FF3               	btfss	___awdiv@dividend+1,7
  4687  12F5  2AFF               	goto	l2938
  4688  12F6  09F2               	comf	___awdiv@dividend,f
  4689  12F7  09F3               	comf	___awdiv@dividend+1,f
  4690  12F8  0AF2               	incf	___awdiv@dividend,f
  4691  12F9  1903               	skipnz
  4692  12FA  0AF3               	incf	___awdiv@dividend+1,f
  4693  12FB  3001               	movlw	1
  4694  12FC  00F4               	movwf	??___awdiv
  4695  12FD  0874               	movf	??___awdiv,w
  4696  12FE  06F6               	xorwf	___awdiv@sign,f
  4697  12FF                     l2938:	
  4698  12FF  01F7               	clrf	___awdiv@quotient
  4699  1300  01F8               	clrf	___awdiv@quotient+1
  4700  1301  0870               	movf	___awdiv@divisor,w
  4701  1302  0471               	iorwf	___awdiv@divisor+1,w
  4702  1303  1903               	btfsc	3,2
  4703  1304  2B36               	goto	l2960
  4704  1305  01F5               	clrf	___awdiv@counter
  4705  1306  0AF5               	incf	___awdiv@counter,f
  4706  1307                     l2948:	
  4707  1307  1BF1               	btfsc	___awdiv@divisor+1,7
  4708  1308  2B15               	goto	l2950
  4709  1309  3001               	movlw	1
  4710  130A                     u4475:	
  4711  130A  1003               	clrc
  4712  130B  0DF0               	rlf	___awdiv@divisor,f
  4713  130C  0DF1               	rlf	___awdiv@divisor+1,f
  4714  130D  3EFF               	addlw	-1
  4715  130E  1D03               	skipz
  4716  130F  2B0A               	goto	u4475
  4717  1310  3001               	movlw	1
  4718  1311  00F4               	movwf	??___awdiv
  4719  1312  0874               	movf	??___awdiv,w
  4720  1313  07F5               	addwf	___awdiv@counter,f
  4721  1314  2B07               	goto	l2948
  4722  1315                     l2950:	
  4723  1315  3001               	movlw	1
  4724  1316                     u4495:	
  4725  1316  1003               	clrc
  4726  1317  0DF7               	rlf	___awdiv@quotient,f
  4727  1318  0DF8               	rlf	___awdiv@quotient+1,f
  4728  1319  3EFF               	addlw	-1
  4729  131A  1D03               	skipz
  4730  131B  2B16               	goto	u4495
  4731  131C  0871               	movf	___awdiv@divisor+1,w
  4732  131D  0273               	subwf	___awdiv@dividend+1,w
  4733  131E  1D03               	skipz
  4734  131F  2B22               	goto	u4505
  4735  1320  0870               	movf	___awdiv@divisor,w
  4736  1321  0272               	subwf	___awdiv@dividend,w
  4737  1322                     u4505:	
  4738  1322  1C03               	skipc
  4739  1323  2B2B               	goto	l2956
  4740  1324  0870               	movf	___awdiv@divisor,w
  4741  1325  02F2               	subwf	___awdiv@dividend,f
  4742  1326  0871               	movf	___awdiv@divisor+1,w
  4743  1327  1C03               	skipc
  4744  1328  03F3               	decf	___awdiv@dividend+1,f
  4745  1329  02F3               	subwf	___awdiv@dividend+1,f
  4746  132A  1477               	bsf	___awdiv@quotient,0
  4747  132B                     l2956:	
  4748  132B  3001               	movlw	1
  4749  132C                     u4515:	
  4750  132C  1003               	clrc
  4751  132D  0CF1               	rrf	___awdiv@divisor+1,f
  4752  132E  0CF0               	rrf	___awdiv@divisor,f
  4753  132F  3EFF               	addlw	-1
  4754  1330  1D03               	skipz
  4755  1331  2B2C               	goto	u4515
  4756  1332  3001               	movlw	1
  4757  1333  02F5               	subwf	___awdiv@counter,f
  4758  1334  1D03               	btfss	3,2
  4759  1335  2B15               	goto	l2950
  4760  1336                     l2960:	
  4761  1336  0876               	movf	___awdiv@sign,w
  4762  1337  1903               	btfsc	3,2
  4763  1338  2B3E               	goto	l2964
  4764  1339  09F7               	comf	___awdiv@quotient,f
  4765  133A  09F8               	comf	___awdiv@quotient+1,f
  4766  133B  0AF7               	incf	___awdiv@quotient,f
  4767  133C  1903               	skipnz
  4768  133D  0AF8               	incf	___awdiv@quotient+1,f
  4769  133E                     l2964:	
  4770  133E  0878               	movf	___awdiv@quotient+1,w
  4771  133F  00F1               	movwf	?___awdiv+1
  4772  1340  0877               	movf	___awdiv@quotient,w
  4773  1341  00F0               	movwf	?___awdiv
  4774  1342  0008               	return
  4775  1343                     __end_of___awdiv:	
  4776                           
  4777                           	psect	text8
  4778  166A                     __ptext8:	
  4779 ;; *************** function __tdiv_to_l_ *****************
  4780 ;; Defined at:
  4781 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdivl.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;  f1              3    0[COMMON] float 
  4784 ;;  f2              3    3[COMMON] float 
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;  quot            4    0[BANK0 ] unsigned long 
  4787 ;;  exp1            1    5[BANK0 ] unsigned char 
  4788 ;;  cntr            1    4[BANK0 ] unsigned char 
  4789 ;; Return value:  Size  Location     Type
  4790 ;;                  4    0[COMMON] unsigned long 
  4791 ;; Registers used:
  4792 ;;		wreg, status,2, status,0
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4798 ;;      Params:         6       0       0       0       0
  4799 ;;      Locals:         0       6       0       0       0
  4800 ;;      Temps:          4       0       0       0       0
  4801 ;;      Totals:        10       6       0       0       0
  4802 ;;Total ram usage:       16 bytes
  4803 ;; Hardware stack levels used:    1
  4804 ;; This function calls:
  4805 ;;		Nothing
  4806 ;; This function is called by:
  4807 ;;		_sprintf
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           
  4812                           ;psect for function __tdiv_to_l_
  4813  166A                     __tdiv_to_l_:	
  4814                           
  4815                           ;incstack = 0
  4816                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  4817  166A  0870               	movf	__tdiv_to_l_@f1,w
  4818  166B  00F6               	movwf	??__tdiv_to_l_
  4819  166C  0871               	movf	__tdiv_to_l_@f1+1,w
  4820  166D  00F7               	movwf	??__tdiv_to_l_+1
  4821  166E  0872               	movf	__tdiv_to_l_@f1+2,w
  4822  166F  00F8               	movwf	??__tdiv_to_l_+2
  4823  1670  1003               	clrc
  4824  1671  0D77               	rlf	??__tdiv_to_l_+1,w
  4825  1672  0D78               	rlf	??__tdiv_to_l_+2,w
  4826  1673  00F9               	movwf	??__tdiv_to_l_+3
  4827  1674  0879               	movf	??__tdiv_to_l_+3,w
  4828  1675  1283               	bcf	3,5	;RP0=0, select bank0
  4829  1676  1303               	bcf	3,6	;RP1=0, select bank0
  4830  1677  00A5               	movwf	__tdiv_to_l_@exp1
  4831  1678  0825               	movf	__tdiv_to_l_@exp1,w
  4832  1679  1D03               	btfss	3,2
  4833  167A  2E84               	goto	l3272
  4834  167B  3000               	movlw	0
  4835  167C  00F3               	movwf	?__tdiv_to_l_+3
  4836  167D  3000               	movlw	0
  4837  167E  00F2               	movwf	?__tdiv_to_l_+2
  4838  167F  3000               	movlw	0
  4839  1680  00F1               	movwf	?__tdiv_to_l_+1
  4840  1681  3000               	movlw	0
  4841  1682  00F0               	movwf	?__tdiv_to_l_
  4842  1683  0008               	return
  4843  1684                     l3272:	
  4844  1684  0873               	movf	__tdiv_to_l_@f2,w
  4845  1685  00F6               	movwf	??__tdiv_to_l_
  4846  1686  0874               	movf	__tdiv_to_l_@f2+1,w
  4847  1687  00F7               	movwf	??__tdiv_to_l_+1
  4848  1688  0875               	movf	__tdiv_to_l_@f2+2,w
  4849  1689  00F8               	movwf	??__tdiv_to_l_+2
  4850  168A  1003               	clrc
  4851  168B  0D77               	rlf	??__tdiv_to_l_+1,w
  4852  168C  0D78               	rlf	??__tdiv_to_l_+2,w
  4853  168D  00F9               	movwf	??__tdiv_to_l_+3
  4854  168E  0879               	movf	??__tdiv_to_l_+3,w
  4855  168F  00A4               	movwf	__tdiv_to_l_@cntr
  4856  1690  0824               	movf	__tdiv_to_l_@cntr,w
  4857  1691  1D03               	btfss	3,2
  4858  1692  2E9C               	goto	l552
  4859  1693  3000               	movlw	0
  4860  1694  00F3               	movwf	?__tdiv_to_l_+3
  4861  1695  3000               	movlw	0
  4862  1696  00F2               	movwf	?__tdiv_to_l_+2
  4863  1697  3000               	movlw	0
  4864  1698  00F1               	movwf	?__tdiv_to_l_+1
  4865  1699  3000               	movlw	0
  4866  169A  00F0               	movwf	?__tdiv_to_l_
  4867  169B  0008               	return
  4868  169C                     l552:	
  4869  169C  17F1               	bsf	__tdiv_to_l_@f1+1,7
  4870  169D  30FF               	movlw	255
  4871  169E  05F0               	andwf	__tdiv_to_l_@f1,f
  4872  169F  30FF               	movlw	255
  4873  16A0  05F1               	andwf	__tdiv_to_l_@f1+1,f
  4874  16A1  3000               	movlw	0
  4875  16A2  05F2               	andwf	__tdiv_to_l_@f1+2,f
  4876  16A3  17F4               	bsf	__tdiv_to_l_@f2+1,7
  4877  16A4  30FF               	movlw	255
  4878  16A5  05F3               	andwf	__tdiv_to_l_@f2,f
  4879  16A6  30FF               	movlw	255
  4880  16A7  05F4               	andwf	__tdiv_to_l_@f2+1,f
  4881  16A8  3000               	movlw	0
  4882  16A9  05F5               	andwf	__tdiv_to_l_@f2+2,f
  4883  16AA  3000               	movlw	0
  4884  16AB  00A3               	movwf	__tdiv_to_l_@quot+3
  4885  16AC  3000               	movlw	0
  4886  16AD  00A2               	movwf	__tdiv_to_l_@quot+2
  4887  16AE  3000               	movlw	0
  4888  16AF  00A1               	movwf	__tdiv_to_l_@quot+1
  4889  16B0  3000               	movlw	0
  4890  16B1  00A0               	movwf	__tdiv_to_l_@quot
  4891  16B2  307F               	movlw	127
  4892  16B3  02A5               	subwf	__tdiv_to_l_@exp1,f
  4893  16B4  3098               	movlw	152
  4894  16B5  0724               	addwf	__tdiv_to_l_@cntr,w
  4895  16B6  00F6               	movwf	??__tdiv_to_l_
  4896  16B7  0876               	movf	??__tdiv_to_l_,w
  4897  16B8  02A5               	subwf	__tdiv_to_l_@exp1,f
  4898  16B9  3018               	movlw	24
  4899  16BA  00F6               	movwf	??__tdiv_to_l_
  4900  16BB  0876               	movf	??__tdiv_to_l_,w
  4901  16BC  00A4               	movwf	__tdiv_to_l_@cntr
  4902  16BD                     l3286:	
  4903  16BD  3001               	movlw	1
  4904  16BE  00F6               	movwf	??__tdiv_to_l_
  4905  16BF                     u5225:	
  4906  16BF  1003               	clrc
  4907  16C0  0DA0               	rlf	__tdiv_to_l_@quot,f
  4908  16C1  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  4909  16C2  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  4910  16C3  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  4911  16C4  0BF6               	decfsz	??__tdiv_to_l_,f
  4912  16C5  2EBF               	goto	u5225
  4913  16C6  0875               	movf	__tdiv_to_l_@f2+2,w
  4914  16C7  0272               	subwf	__tdiv_to_l_@f1+2,w
  4915  16C8  1D03               	skipz
  4916  16C9  2ED0               	goto	u5235
  4917  16CA  0874               	movf	__tdiv_to_l_@f2+1,w
  4918  16CB  0271               	subwf	__tdiv_to_l_@f1+1,w
  4919  16CC  1D03               	skipz
  4920  16CD  2ED0               	goto	u5235
  4921  16CE  0873               	movf	__tdiv_to_l_@f2,w
  4922  16CF  0270               	subwf	__tdiv_to_l_@f1,w
  4923  16D0                     u5235:	
  4924  16D0  1C03               	skipc
  4925  16D1  2EDD               	goto	l3294
  4926  16D2  0873               	movf	__tdiv_to_l_@f2,w
  4927  16D3  02F0               	subwf	__tdiv_to_l_@f1,f
  4928  16D4  0874               	movf	__tdiv_to_l_@f2+1,w
  4929  16D5  1C03               	skipc
  4930  16D6  0F74               	incfsz	__tdiv_to_l_@f2+1,w
  4931  16D7  02F1               	subwf	__tdiv_to_l_@f1+1,f
  4932  16D8  0875               	movf	__tdiv_to_l_@f2+2,w
  4933  16D9  1C03               	skipc
  4934  16DA  0A75               	incf	__tdiv_to_l_@f2+2,w
  4935  16DB  02F2               	subwf	__tdiv_to_l_@f1+2,f
  4936  16DC  1420               	bsf	__tdiv_to_l_@quot,0
  4937  16DD                     l3294:	
  4938  16DD  3001               	movlw	1
  4939  16DE                     u5245:	
  4940  16DE  1003               	clrc
  4941  16DF  0DF0               	rlf	__tdiv_to_l_@f1,f
  4942  16E0  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  4943  16E1  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  4944  16E2  3EFF               	addlw	-1
  4945  16E3  1D03               	skipz
  4946  16E4  2EDE               	goto	u5245
  4947  16E5  3001               	movlw	1
  4948  16E6  02A4               	subwf	__tdiv_to_l_@cntr,f
  4949  16E7  1D03               	btfss	3,2
  4950  16E8  2EBD               	goto	l3286
  4951  16E9  1FA5               	btfss	__tdiv_to_l_@exp1,7
  4952  16EA  2F09               	goto	l3306
  4953  16EB  0825               	movf	__tdiv_to_l_@exp1,w
  4954  16EC  3A80               	xorlw	128
  4955  16ED  3E97               	addlw	151
  4956  16EE  1803               	skipnc
  4957  16EF  2EF9               	goto	l3304
  4958  16F0  3000               	movlw	0
  4959  16F1  00F3               	movwf	?__tdiv_to_l_+3
  4960  16F2  3000               	movlw	0
  4961  16F3  00F2               	movwf	?__tdiv_to_l_+2
  4962  16F4  3000               	movlw	0
  4963  16F5  00F1               	movwf	?__tdiv_to_l_+1
  4964  16F6  3000               	movlw	0
  4965  16F7  00F0               	movwf	?__tdiv_to_l_
  4966  16F8  0008               	return
  4967  16F9                     l3304:	
  4968  16F9  3001               	movlw	1
  4969  16FA                     u5285:	
  4970  16FA  1003               	clrc
  4971  16FB  0CA3               	rrf	__tdiv_to_l_@quot+3,f
  4972  16FC  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  4973  16FD  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  4974  16FE  0CA0               	rrf	__tdiv_to_l_@quot,f
  4975  16FF  3EFF               	addlw	-1
  4976  1700  1D03               	skipz
  4977  1701  2EFA               	goto	u5285
  4978  1702  3001               	movlw	1
  4979  1703  00F6               	movwf	??__tdiv_to_l_
  4980  1704  0876               	movf	??__tdiv_to_l_,w
  4981  1705  07A5               	addwf	__tdiv_to_l_@exp1,f
  4982  1706  1903               	btfsc	3,2
  4983  1707  2F24               	goto	l3314
  4984  1708  2EF9               	goto	l3304
  4985  1709                     l3306:	
  4986  1709  3018               	movlw	24
  4987  170A  0225               	subwf	__tdiv_to_l_@exp1,w
  4988  170B  1C03               	skipc
  4989  170C  2F21               	goto	l562
  4990  170D  3000               	movlw	0
  4991  170E  00F3               	movwf	?__tdiv_to_l_+3
  4992  170F  3000               	movlw	0
  4993  1710  00F2               	movwf	?__tdiv_to_l_+2
  4994  1711  3000               	movlw	0
  4995  1712  00F1               	movwf	?__tdiv_to_l_+1
  4996  1713  3000               	movlw	0
  4997  1714  00F0               	movwf	?__tdiv_to_l_
  4998  1715  0008               	return
  4999  1716                     l3312:	
  5000  1716  3001               	movlw	1
  5001  1717  00F6               	movwf	??__tdiv_to_l_
  5002  1718                     u5315:	
  5003  1718  1003               	clrc
  5004  1719  0DA0               	rlf	__tdiv_to_l_@quot,f
  5005  171A  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  5006  171B  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  5007  171C  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  5008  171D  0BF6               	decfsz	??__tdiv_to_l_,f
  5009  171E  2F18               	goto	u5315
  5010  171F  3001               	movlw	1
  5011  1720  02A5               	subwf	__tdiv_to_l_@exp1,f
  5012  1721                     l562:	
  5013  1721  0825               	movf	__tdiv_to_l_@exp1,w
  5014  1722  1D03               	btfss	3,2
  5015  1723  2F16               	goto	l3312
  5016  1724                     l3314:	
  5017  1724  0823               	movf	__tdiv_to_l_@quot+3,w
  5018  1725  00F3               	movwf	?__tdiv_to_l_+3
  5019  1726  0822               	movf	__tdiv_to_l_@quot+2,w
  5020  1727  00F2               	movwf	?__tdiv_to_l_+2
  5021  1728  0821               	movf	__tdiv_to_l_@quot+1,w
  5022  1729  00F1               	movwf	?__tdiv_to_l_+1
  5023  172A  0820               	movf	__tdiv_to_l_@quot,w
  5024  172B  00F0               	movwf	?__tdiv_to_l_
  5025  172C  0008               	return
  5026  172D                     __end_of__tdiv_to_l_:	
  5027                           
  5028                           	psect	text9
  5029  0A99                     __ptext9:	
  5030 ;; *************** function __div_to_l_ *****************
  5031 ;; Defined at:
  5032 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fldivl.c"
  5033 ;; Parameters:    Size  Location     Type
  5034 ;;  f1              3    0[COMMON] unsigned long 
  5035 ;;  f2              3    3[COMMON] unsigned long 
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  quot            4    0[BANK0 ] unsigned long 
  5038 ;;  exp1            1    5[BANK0 ] unsigned char 
  5039 ;;  cntr            1    4[BANK0 ] unsigned char 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  4    0[COMMON] unsigned long 
  5042 ;; Registers used:
  5043 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5049 ;;      Params:         6       0       0       0       0
  5050 ;;      Locals:         0       6       0       0       0
  5051 ;;      Temps:          8       0       0       0       0
  5052 ;;      Totals:        14       6       0       0       0
  5053 ;;Total ram usage:       20 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_sprintf
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           
  5063                           ;psect for function __div_to_l_
  5064  0A99                     __div_to_l_:	
  5065                           
  5066                           ;incstack = 0
  5067                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  5068  0A99  3070               	movlw	low (__div_to_l_@f1| 0)
  5069  0A9A  0084               	movwf	4
  5070  0A9B  0800               	movf	0,w
  5071  0A9C  00F6               	movwf	??__div_to_l_
  5072  0A9D  0A84               	incf	4,f
  5073  0A9E  0800               	movf	0,w
  5074  0A9F  00F7               	movwf	??__div_to_l_+1
  5075  0AA0  0A84               	incf	4,f
  5076  0AA1  0800               	movf	0,w
  5077  0AA2  00F8               	movwf	??__div_to_l_+2
  5078  0AA3  0A84               	incf	4,f
  5079  0AA4  0800               	movf	0,w
  5080  0AA5  00F9               	movwf	??__div_to_l_+3
  5081  0AA6  1003               	clrc
  5082  0AA7  0D78               	rlf	??__div_to_l_+2,w
  5083  0AA8  0D79               	rlf	??__div_to_l_+3,w
  5084  0AA9  00FA               	movwf	??__div_to_l_+4
  5085  0AAA  087A               	movf	??__div_to_l_+4,w
  5086  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  5087  0AAC  1303               	bcf	3,6	;RP1=0, select bank0
  5088  0AAD  00A5               	movwf	__div_to_l_@exp1
  5089  0AAE  0825               	movf	__div_to_l_@exp1,w
  5090  0AAF  1D03               	btfss	3,2
  5091  0AB0  2ABA               	goto	l3324
  5092  0AB1  3000               	movlw	0
  5093  0AB2  00F3               	movwf	?__div_to_l_+3
  5094  0AB3  3000               	movlw	0
  5095  0AB4  00F2               	movwf	?__div_to_l_+2
  5096  0AB5  3000               	movlw	0
  5097  0AB6  00F1               	movwf	?__div_to_l_+1
  5098  0AB7  3000               	movlw	0
  5099  0AB8  00F0               	movwf	?__div_to_l_
  5100  0AB9  0008               	return
  5101  0ABA                     l3324:	
  5102  0ABA  3073               	movlw	low (__div_to_l_@f2| 0)
  5103  0ABB  0084               	movwf	4
  5104  0ABC  0800               	movf	0,w
  5105  0ABD  00F6               	movwf	??__div_to_l_
  5106  0ABE  0A84               	incf	4,f
  5107  0ABF  0800               	movf	0,w
  5108  0AC0  00F7               	movwf	??__div_to_l_+1
  5109  0AC1  0A84               	incf	4,f
  5110  0AC2  0800               	movf	0,w
  5111  0AC3  00F8               	movwf	??__div_to_l_+2
  5112  0AC4  0A84               	incf	4,f
  5113  0AC5  0800               	movf	0,w
  5114  0AC6  00F9               	movwf	??__div_to_l_+3
  5115  0AC7  1003               	clrc
  5116  0AC8  0D78               	rlf	??__div_to_l_+2,w
  5117  0AC9  0D79               	rlf	??__div_to_l_+3,w
  5118  0ACA  00FA               	movwf	??__div_to_l_+4
  5119  0ACB  087A               	movf	??__div_to_l_+4,w
  5120  0ACC  00A4               	movwf	__div_to_l_@cntr
  5121  0ACD  0824               	movf	__div_to_l_@cntr,w
  5122  0ACE  1D03               	btfss	3,2
  5123  0ACF  2AD9               	goto	l3330
  5124  0AD0  3000               	movlw	0
  5125  0AD1  00F3               	movwf	?__div_to_l_+3
  5126  0AD2  3000               	movlw	0
  5127  0AD3  00F2               	movwf	?__div_to_l_+2
  5128  0AD4  3000               	movlw	0
  5129  0AD5  00F1               	movwf	?__div_to_l_+1
  5130  0AD6  3000               	movlw	0
  5131  0AD7  00F0               	movwf	?__div_to_l_
  5132  0AD8  0008               	return
  5133  0AD9                     l3330:	
  5134  0AD9  3070               	movlw	low (__div_to_l_@f1| 0)
  5135  0ADA  0084               	movwf	4
  5136  0ADB  3000               	movlw	0
  5137  0ADC  0480               	iorwf	0,f
  5138  0ADD  0A84               	incf	4,f
  5139  0ADE  3000               	movlw	0
  5140  0ADF  0480               	iorwf	0,f
  5141  0AE0  0A84               	incf	4,f
  5142  0AE1  3080               	movlw	128
  5143  0AE2  0480               	iorwf	0,f
  5144  0AE3  0A84               	incf	4,f
  5145  0AE4  3000               	movlw	0
  5146  0AE5  0480               	iorwf	0,f
  5147  0AE6  3070               	movlw	low (__div_to_l_@f1| 0)
  5148  0AE7  0084               	movwf	4
  5149  0AE8  30FF               	movlw	255
  5150  0AE9  0580               	andwf	0,f
  5151  0AEA  0A84               	incf	4,f
  5152  0AEB  30FF               	movlw	255
  5153  0AEC  0580               	andwf	0,f
  5154  0AED  0A84               	incf	4,f
  5155  0AEE  30FF               	movlw	255
  5156  0AEF  0580               	andwf	0,f
  5157  0AF0  0A84               	incf	4,f
  5158  0AF1  3000               	movlw	0
  5159  0AF2  0580               	andwf	0,f
  5160  0AF3  3073               	movlw	low (__div_to_l_@f2| 0)
  5161  0AF4  0084               	movwf	4
  5162  0AF5  3000               	movlw	0
  5163  0AF6  0480               	iorwf	0,f
  5164  0AF7  0A84               	incf	4,f
  5165  0AF8  3000               	movlw	0
  5166  0AF9  0480               	iorwf	0,f
  5167  0AFA  0A84               	incf	4,f
  5168  0AFB  3080               	movlw	128
  5169  0AFC  0480               	iorwf	0,f
  5170  0AFD  0A84               	incf	4,f
  5171  0AFE  3000               	movlw	0
  5172  0AFF  0480               	iorwf	0,f
  5173  0B00  3073               	movlw	low (__div_to_l_@f2| 0)
  5174  0B01  0084               	movwf	4
  5175  0B02  30FF               	movlw	255
  5176  0B03  0580               	andwf	0,f
  5177  0B04  0A84               	incf	4,f
  5178  0B05  30FF               	movlw	255
  5179  0B06  0580               	andwf	0,f
  5180  0B07  0A84               	incf	4,f
  5181  0B08  30FF               	movlw	255
  5182  0B09  0580               	andwf	0,f
  5183  0B0A  0A84               	incf	4,f
  5184  0B0B  3000               	movlw	0
  5185  0B0C  0580               	andwf	0,f
  5186  0B0D  3000               	movlw	0
  5187  0B0E  00A3               	movwf	__div_to_l_@quot+3
  5188  0B0F  3000               	movlw	0
  5189  0B10  00A2               	movwf	__div_to_l_@quot+2
  5190  0B11  3000               	movlw	0
  5191  0B12  00A1               	movwf	__div_to_l_@quot+1
  5192  0B13  3000               	movlw	0
  5193  0B14  00A0               	movwf	__div_to_l_@quot
  5194  0B15  307F               	movlw	127
  5195  0B16  02A5               	subwf	__div_to_l_@exp1,f
  5196  0B17  30A0               	movlw	160
  5197  0B18  0724               	addwf	__div_to_l_@cntr,w
  5198  0B19  00F6               	movwf	??__div_to_l_
  5199  0B1A  0876               	movf	??__div_to_l_,w
  5200  0B1B  02A5               	subwf	__div_to_l_@exp1,f
  5201  0B1C  3020               	movlw	32
  5202  0B1D  00F6               	movwf	??__div_to_l_
  5203  0B1E  0876               	movf	??__div_to_l_,w
  5204  0B1F  00A4               	movwf	__div_to_l_@cntr
  5205  0B20                     l3340:	
  5206  0B20  3001               	movlw	1
  5207  0B21  00F6               	movwf	??__div_to_l_
  5208  0B22                     u5355:	
  5209  0B22  1003               	clrc
  5210  0B23  0DA0               	rlf	__div_to_l_@quot,f
  5211  0B24  0DA1               	rlf	__div_to_l_@quot+1,f
  5212  0B25  0DA2               	rlf	__div_to_l_@quot+2,f
  5213  0B26  0DA3               	rlf	__div_to_l_@quot+3,f
  5214  0B27  0BF6               	decfsz	??__div_to_l_,f
  5215  0B28  2B22               	goto	u5355
  5216  0B29  3073               	movlw	low (__div_to_l_@f2| 0)
  5217  0B2A  0084               	movwf	4
  5218  0B2B  0800               	movf	0,w
  5219  0B2C  00F6               	movwf	??__div_to_l_
  5220  0B2D  0A84               	incf	4,f
  5221  0B2E  0800               	movf	0,w
  5222  0B2F  00F7               	movwf	??__div_to_l_+1
  5223  0B30  0A84               	incf	4,f
  5224  0B31  0800               	movf	0,w
  5225  0B32  00F8               	movwf	??__div_to_l_+2
  5226  0B33  0A84               	incf	4,f
  5227  0B34  0800               	movf	0,w
  5228  0B35  00F9               	movwf	??__div_to_l_+3
  5229  0B36  3070               	movlw	low (__div_to_l_@f1| 0)
  5230  0B37  0084               	movwf	4
  5231  0B38  0800               	movf	0,w
  5232  0B39  00FA               	movwf	??__div_to_l_+4
  5233  0B3A  0A84               	incf	4,f
  5234  0B3B  0800               	movf	0,w
  5235  0B3C  00FB               	movwf	??__div_to_l_+5
  5236  0B3D  0A84               	incf	4,f
  5237  0B3E  0800               	movf	0,w
  5238  0B3F  00FC               	movwf	??__div_to_l_+6
  5239  0B40  0A84               	incf	4,f
  5240  0B41  0800               	movf	0,w
  5241  0B42  00FD               	movwf	??__div_to_l_+7
  5242  0B43  0879               	movf	??__div_to_l_+3,w
  5243  0B44  027D               	subwf	??__div_to_l_+7,w
  5244  0B45  1D03               	skipz
  5245  0B46  2B51               	goto	u5365
  5246  0B47  0878               	movf	??__div_to_l_+2,w
  5247  0B48  027C               	subwf	??__div_to_l_+6,w
  5248  0B49  1D03               	skipz
  5249  0B4A  2B51               	goto	u5365
  5250  0B4B  0877               	movf	??__div_to_l_+1,w
  5251  0B4C  027B               	subwf	??__div_to_l_+5,w
  5252  0B4D  1D03               	skipz
  5253  0B4E  2B51               	goto	u5365
  5254  0B4F  0876               	movf	??__div_to_l_,w
  5255  0B50  027A               	subwf	??__div_to_l_+4,w
  5256  0B51                     u5365:	
  5257  0B51  1C03               	skipc
  5258  0B52  2B76               	goto	l475
  5259  0B53  3073               	movlw	low (__div_to_l_@f2| 0)
  5260  0B54  0084               	movwf	4
  5261  0B55  0800               	movf	0,w
  5262  0B56  00F6               	movwf	??__div_to_l_
  5263  0B57  0A84               	incf	4,f
  5264  0B58  0800               	movf	0,w
  5265  0B59  00F7               	movwf	??__div_to_l_+1
  5266  0B5A  0A84               	incf	4,f
  5267  0B5B  0800               	movf	0,w
  5268  0B5C  00F8               	movwf	??__div_to_l_+2
  5269  0B5D  0A84               	incf	4,f
  5270  0B5E  0800               	movf	0,w
  5271  0B5F  00F9               	movwf	??__div_to_l_+3
  5272  0B60  3070               	movlw	low (__div_to_l_@f1| 0)
  5273  0B61  0084               	movwf	4
  5274  0B62  0876               	movf	??__div_to_l_,w
  5275  0B63  0280               	subwf	0,f
  5276  0B64  0A84               	incf	4,f
  5277  0B65  0877               	movf	??__div_to_l_+1,w
  5278  0B66  1C03               	skipc
  5279  0B67  0F77               	incfsz	??__div_to_l_+1,w
  5280  0B68  0280               	subwf	0,f
  5281  0B69  0A84               	incf	4,f
  5282  0B6A  0878               	movf	??__div_to_l_+2,w
  5283  0B6B  1C03               	skipc
  5284  0B6C  0F78               	incfsz	??__div_to_l_+2,w
  5285  0B6D  0280               	subwf	0,f
  5286  0B6E  0A84               	incf	4,f
  5287  0B6F  0879               	movf	??__div_to_l_+3,w
  5288  0B70  1C03               	skipc
  5289  0B71  0A79               	incf	??__div_to_l_+3,w
  5290  0B72  0280               	subwf	0,f
  5291  0B73  3003               	movlw	3
  5292  0B74  0284               	subwf	4,f
  5293  0B75  1420               	bsf	__div_to_l_@quot,0
  5294  0B76                     l475:	
  5295  0B76  3070               	movlw	low (__div_to_l_@f1| 0)
  5296  0B77  0084               	movwf	4
  5297  0B78  1003               	clrc
  5298  0B79  0D80               	rlf	0,f
  5299  0B7A  0A84               	incf	4,f
  5300  0B7B  0D80               	rlf	0,f
  5301  0B7C  0A84               	incf	4,f
  5302  0B7D  0D80               	rlf	0,f
  5303  0B7E  0A84               	incf	4,f
  5304  0B7F  0D80               	rlf	0,f
  5305  0B80  0384               	decf	4,f
  5306  0B81  0384               	decf	4,f
  5307  0B82  0384               	decf	4,f
  5308  0B83  3001               	movlw	1
  5309  0B84  02A4               	subwf	__div_to_l_@cntr,f
  5310  0B85  1D03               	btfss	3,2
  5311  0B86  2B20               	goto	l3340
  5312  0B87  1FA5               	btfss	__div_to_l_@exp1,7
  5313  0B88  2BA7               	goto	l3358
  5314  0B89  0825               	movf	__div_to_l_@exp1,w
  5315  0B8A  3A80               	xorlw	128
  5316  0B8B  3E9F               	addlw	159
  5317  0B8C  1803               	skipnc
  5318  0B8D  2B97               	goto	l3356
  5319  0B8E  3000               	movlw	0
  5320  0B8F  00F3               	movwf	?__div_to_l_+3
  5321  0B90  3000               	movlw	0
  5322  0B91  00F2               	movwf	?__div_to_l_+2
  5323  0B92  3000               	movlw	0
  5324  0B93  00F1               	movwf	?__div_to_l_+1
  5325  0B94  3000               	movlw	0
  5326  0B95  00F0               	movwf	?__div_to_l_
  5327  0B96  0008               	return
  5328  0B97                     l3356:	
  5329  0B97  3001               	movlw	1
  5330  0B98                     u5405:	
  5331  0B98  1003               	clrc
  5332  0B99  0CA3               	rrf	__div_to_l_@quot+3,f
  5333  0B9A  0CA2               	rrf	__div_to_l_@quot+2,f
  5334  0B9B  0CA1               	rrf	__div_to_l_@quot+1,f
  5335  0B9C  0CA0               	rrf	__div_to_l_@quot,f
  5336  0B9D  3EFF               	addlw	-1
  5337  0B9E  1D03               	skipz
  5338  0B9F  2B98               	goto	u5405
  5339  0BA0  3001               	movlw	1
  5340  0BA1  00F6               	movwf	??__div_to_l_
  5341  0BA2  0876               	movf	??__div_to_l_,w
  5342  0BA3  07A5               	addwf	__div_to_l_@exp1,f
  5343  0BA4  1903               	btfsc	3,2
  5344  0BA5  2BC2               	goto	l3366
  5345  0BA6  2B97               	goto	l3356
  5346  0BA7                     l3358:	
  5347  0BA7  3020               	movlw	32
  5348  0BA8  0225               	subwf	__div_to_l_@exp1,w
  5349  0BA9  1C03               	skipc
  5350  0BAA  2BBF               	goto	l483
  5351  0BAB  3000               	movlw	0
  5352  0BAC  00F3               	movwf	?__div_to_l_+3
  5353  0BAD  3000               	movlw	0
  5354  0BAE  00F2               	movwf	?__div_to_l_+2
  5355  0BAF  3000               	movlw	0
  5356  0BB0  00F1               	movwf	?__div_to_l_+1
  5357  0BB1  3000               	movlw	0
  5358  0BB2  00F0               	movwf	?__div_to_l_
  5359  0BB3  0008               	return
  5360  0BB4                     l3364:	
  5361  0BB4  3001               	movlw	1
  5362  0BB5  00F6               	movwf	??__div_to_l_
  5363  0BB6                     u5435:	
  5364  0BB6  1003               	clrc
  5365  0BB7  0DA0               	rlf	__div_to_l_@quot,f
  5366  0BB8  0DA1               	rlf	__div_to_l_@quot+1,f
  5367  0BB9  0DA2               	rlf	__div_to_l_@quot+2,f
  5368  0BBA  0DA3               	rlf	__div_to_l_@quot+3,f
  5369  0BBB  0BF6               	decfsz	??__div_to_l_,f
  5370  0BBC  2BB6               	goto	u5435
  5371  0BBD  3001               	movlw	1
  5372  0BBE  02A5               	subwf	__div_to_l_@exp1,f
  5373  0BBF                     l483:	
  5374  0BBF  0825               	movf	__div_to_l_@exp1,w
  5375  0BC0  1D03               	btfss	3,2
  5376  0BC1  2BB4               	goto	l3364
  5377  0BC2                     l3366:	
  5378  0BC2  0823               	movf	__div_to_l_@quot+3,w
  5379  0BC3  00F3               	movwf	?__div_to_l_+3
  5380  0BC4  0822               	movf	__div_to_l_@quot+2,w
  5381  0BC5  00F2               	movwf	?__div_to_l_+2
  5382  0BC6  0821               	movf	__div_to_l_@quot+1,w
  5383  0BC7  00F1               	movwf	?__div_to_l_+1
  5384  0BC8  0820               	movf	__div_to_l_@quot,w
  5385  0BC9  00F0               	movwf	?__div_to_l_
  5386  0BCA  0008               	return
  5387  0BCB                     __end_of__div_to_l_:	
  5388                           
  5389                           	psect	text10
  5390  1182                     __ptext10:	
  5391 ;; *************** function ___wmul *****************
  5392 ;; Defined at:
  5393 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;  multiplier      2    0[COMMON] unsigned int 
  5396 ;;  multiplicand    2    2[COMMON] unsigned int 
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;  product         2    4[COMMON] unsigned int 
  5399 ;; Return value:  Size  Location     Type
  5400 ;;                  2    0[COMMON] unsigned int 
  5401 ;; Registers used:
  5402 ;;		wreg, status,2, status,0
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5408 ;;      Params:         4       0       0       0       0
  5409 ;;      Locals:         2       0       0       0       0
  5410 ;;      Temps:          0       0       0       0       0
  5411 ;;      Totals:         6       0       0       0       0
  5412 ;;Total ram usage:        6 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; This function calls:
  5415 ;;		Nothing
  5416 ;; This function is called by:
  5417 ;;		_sprintf
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           
  5422                           ;psect for function ___wmul
  5423  1182                     ___wmul:	
  5424                           
  5425                           ;incstack = 0
  5426                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5427  1182  01F4               	clrf	___wmul@product
  5428  1183  01F5               	clrf	___wmul@product+1
  5429  1184                     l3372:	
  5430  1184  1C70               	btfss	___wmul@multiplier,0
  5431  1185  298C               	goto	l317
  5432  1186  0872               	movf	___wmul@multiplicand,w
  5433  1187  07F4               	addwf	___wmul@product,f
  5434  1188  1803               	skipnc
  5435  1189  0AF5               	incf	___wmul@product+1,f
  5436  118A  0873               	movf	___wmul@multiplicand+1,w
  5437  118B  07F5               	addwf	___wmul@product+1,f
  5438  118C                     l317:	
  5439  118C  3001               	movlw	1
  5440  118D                     u5465:	
  5441  118D  1003               	clrc
  5442  118E  0DF2               	rlf	___wmul@multiplicand,f
  5443  118F  0DF3               	rlf	___wmul@multiplicand+1,f
  5444  1190  3EFF               	addlw	-1
  5445  1191  1D03               	skipz
  5446  1192  298D               	goto	u5465
  5447  1193  3001               	movlw	1
  5448  1194                     u5475:	
  5449  1194  1003               	clrc
  5450  1195  0CF1               	rrf	___wmul@multiplier+1,f
  5451  1196  0CF0               	rrf	___wmul@multiplier,f
  5452  1197  3EFF               	addlw	-1
  5453  1198  1D03               	skipz
  5454  1199  2994               	goto	u5475
  5455  119A  0870               	movf	___wmul@multiplier,w
  5456  119B  0471               	iorwf	___wmul@multiplier+1,w
  5457  119C  1D03               	btfss	3,2
  5458  119D  2984               	goto	l3372
  5459  119E  0875               	movf	___wmul@product+1,w
  5460  119F  00F1               	movwf	?___wmul+1
  5461  11A0  0874               	movf	___wmul@product,w
  5462  11A1  00F0               	movwf	?___wmul
  5463  11A2  0008               	return
  5464  11A3                     __end_of___wmul:	
  5465                           
  5466                           	psect	text11
  5467  11F1                     __ptext11:	
  5468 ;; *************** function ___lltoft *****************
  5469 ;; Defined at:
  5470 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  c               4    8[COMMON] unsigned long 
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;  exp             1   13[COMMON] unsigned char 
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  3    8[COMMON] float 
  5477 ;; Registers used:
  5478 ;;		wreg, status,2, status,0, pclath, cstack
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5484 ;;      Params:         4       0       0       0       0
  5485 ;;      Locals:         1       0       0       0       0
  5486 ;;      Temps:          1       0       0       0       0
  5487 ;;      Totals:         6       0       0       0       0
  5488 ;;Total ram usage:        6 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; Hardware stack levels required when called:    1
  5491 ;; This function calls:
  5492 ;;		___ftpack
  5493 ;; This function is called by:
  5494 ;;		_sprintf
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498                           
  5499                           ;psect for function ___lltoft
  5500  11F1                     ___lltoft:	
  5501                           
  5502                           ;incstack = 0
  5503                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5504  11F1  308E               	movlw	142
  5505  11F2  00FC               	movwf	??___lltoft
  5506  11F3  087C               	movf	??___lltoft,w
  5507  11F4  00FD               	movwf	___lltoft@exp
  5508  11F5                     l3552:	
  5509  11F5  30FF               	movlw	255
  5510  11F6  057B               	andwf	___lltoft@c+3,w
  5511  11F7  1903               	btfsc	3,2
  5512  11F8  2A07               	goto	l3554
  5513  11F9  3001               	movlw	1
  5514  11FA                     u5875:	
  5515  11FA  1003               	clrc
  5516  11FB  0CFB               	rrf	___lltoft@c+3,f
  5517  11FC  0CFA               	rrf	___lltoft@c+2,f
  5518  11FD  0CF9               	rrf	___lltoft@c+1,f
  5519  11FE  0CF8               	rrf	___lltoft@c,f
  5520  11FF  3EFF               	addlw	-1
  5521  1200  1D03               	skipz
  5522  1201  29FA               	goto	u5875
  5523  1202  3001               	movlw	1
  5524  1203  00FC               	movwf	??___lltoft
  5525  1204  087C               	movf	??___lltoft,w
  5526  1205  07FD               	addwf	___lltoft@exp,f
  5527  1206  29F5               	goto	l3552
  5528  1207                     l3554:	
  5529  1207  0878               	movf	___lltoft@c,w
  5530  1208  00F0               	movwf	___ftpack@arg
  5531  1209  0879               	movf	___lltoft@c+1,w
  5532  120A  00F1               	movwf	___ftpack@arg+1
  5533  120B  087A               	movf	___lltoft@c+2,w
  5534  120C  00F2               	movwf	___ftpack@arg+2
  5535  120D  087D               	movf	___lltoft@exp,w
  5536  120E  00FC               	movwf	??___lltoft
  5537  120F  087C               	movf	??___lltoft,w
  5538  1210  00F3               	movwf	___ftpack@exp
  5539  1211  01F4               	clrf	___ftpack@sign
  5540  1212  160A  118A  23A0   	fcall	___ftpack
  5541  1215  0870               	movf	?___ftpack,w
  5542  1216  00F8               	movwf	?___lltoft
  5543  1217  0871               	movf	?___ftpack+1,w
  5544  1218  00F9               	movwf	?___lltoft+1
  5545  1219  0872               	movf	?___ftpack+2,w
  5546  121A  00FA               	movwf	?___lltoft+2
  5547  121B  0008               	return
  5548  121C                     __end_of___lltoft:	
  5549                           
  5550                           	psect	text12
  5551  0003                     __ptext12:	
  5552 ;; *************** function ___llmod *****************
  5553 ;; Defined at:
  5554 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  5555 ;; Parameters:    Size  Location     Type
  5556 ;;  divisor         4    0[BANK0 ] unsigned long 
  5557 ;;  dividend        4    4[BANK0 ] unsigned long 
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;  counter         1    9[BANK0 ] unsigned char 
  5560 ;; Return value:  Size  Location     Type
  5561 ;;                  4    0[BANK0 ] unsigned long 
  5562 ;; Registers used:
  5563 ;;		wreg, status,2, status,0
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5569 ;;      Params:         0       8       0       0       0
  5570 ;;      Locals:         0       1       0       0       0
  5571 ;;      Temps:          0       1       0       0       0
  5572 ;;      Totals:         0      10       0       0       0
  5573 ;;Total ram usage:       10 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; This function calls:
  5576 ;;		Nothing
  5577 ;; This function is called by:
  5578 ;;		_sprintf
  5579 ;; This function uses a non-reentrant model
  5580 ;;
  5581                           
  5582                           
  5583                           ;psect for function ___llmod
  5584  0003                     ___llmod:	
  5585                           
  5586                           ;incstack = 0
  5587                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5588  0003  1283               	bcf	3,5	;RP0=0, select bank0
  5589  0004  1303               	bcf	3,6	;RP1=0, select bank0
  5590  0005  0823               	movf	___llmod@divisor+3,w
  5591  0006  0422               	iorwf	___llmod@divisor+2,w
  5592  0007  0421               	iorwf	___llmod@divisor+1,w
  5593  0008  0420               	iorwf	___llmod@divisor,w
  5594  0009  1903               	skipnz
  5595  000A  2848               	goto	l3544
  5596  000B  01A9               	clrf	___llmod@counter
  5597  000C  0AA9               	incf	___llmod@counter,f
  5598  000D                     l3534:	
  5599  000D  1BA3               	btfsc	___llmod@divisor+3,7
  5600  000E  281D               	goto	l3536
  5601  000F  3001               	movlw	1
  5602  0010  00A8               	movwf	??___llmod
  5603  0011                     u5825:	
  5604  0011  1003               	clrc
  5605  0012  0DA0               	rlf	___llmod@divisor,f
  5606  0013  0DA1               	rlf	___llmod@divisor+1,f
  5607  0014  0DA2               	rlf	___llmod@divisor+2,f
  5608  0015  0DA3               	rlf	___llmod@divisor+3,f
  5609  0016  0BA8               	decfsz	??___llmod,f
  5610  0017  2811               	goto	u5825
  5611  0018  3001               	movlw	1
  5612  0019  00A8               	movwf	??___llmod
  5613  001A  0828               	movf	??___llmod,w
  5614  001B  07A9               	addwf	___llmod@counter,f
  5615  001C  280D               	goto	l3534
  5616  001D                     l3536:	
  5617  001D  0823               	movf	___llmod@divisor+3,w
  5618  001E  0227               	subwf	___llmod@dividend+3,w
  5619  001F  1D03               	skipz
  5620  0020  282B               	goto	u5845
  5621  0021  0822               	movf	___llmod@divisor+2,w
  5622  0022  0226               	subwf	___llmod@dividend+2,w
  5623  0023  1D03               	skipz
  5624  0024  282B               	goto	u5845
  5625  0025  0821               	movf	___llmod@divisor+1,w
  5626  0026  0225               	subwf	___llmod@dividend+1,w
  5627  0027  1D03               	skipz
  5628  0028  282B               	goto	u5845
  5629  0029  0820               	movf	___llmod@divisor,w
  5630  002A  0224               	subwf	___llmod@dividend,w
  5631  002B                     u5845:	
  5632  002B  1C03               	skipc
  5633  002C  283B               	goto	l3540
  5634  002D  0820               	movf	___llmod@divisor,w
  5635  002E  02A4               	subwf	___llmod@dividend,f
  5636  002F  0821               	movf	___llmod@divisor+1,w
  5637  0030  1C03               	skipc
  5638  0031  0F21               	incfsz	___llmod@divisor+1,w
  5639  0032  02A5               	subwf	___llmod@dividend+1,f
  5640  0033  0822               	movf	___llmod@divisor+2,w
  5641  0034  1C03               	skipc
  5642  0035  0F22               	incfsz	___llmod@divisor+2,w
  5643  0036  02A6               	subwf	___llmod@dividend+2,f
  5644  0037  0823               	movf	___llmod@divisor+3,w
  5645  0038  1C03               	skipc
  5646  0039  0F23               	incfsz	___llmod@divisor+3,w
  5647  003A  02A7               	subwf	___llmod@dividend+3,f
  5648  003B                     l3540:	
  5649  003B  3001               	movlw	1
  5650  003C                     u5855:	
  5651  003C  1003               	clrc
  5652  003D  0CA3               	rrf	___llmod@divisor+3,f
  5653  003E  0CA2               	rrf	___llmod@divisor+2,f
  5654  003F  0CA1               	rrf	___llmod@divisor+1,f
  5655  0040  0CA0               	rrf	___llmod@divisor,f
  5656  0041  3EFF               	addlw	-1
  5657  0042  1D03               	skipz
  5658  0043  283C               	goto	u5855
  5659  0044  3001               	movlw	1
  5660  0045  02A9               	subwf	___llmod@counter,f
  5661  0046  1D03               	btfss	3,2
  5662  0047  281D               	goto	l3536
  5663  0048                     l3544:	
  5664  0048  0827               	movf	___llmod@dividend+3,w
  5665  0049  00A3               	movwf	?___llmod+3
  5666  004A  0826               	movf	___llmod@dividend+2,w
  5667  004B  00A2               	movwf	?___llmod+2
  5668  004C  0825               	movf	___llmod@dividend+1,w
  5669  004D  00A1               	movwf	?___llmod+1
  5670  004E  0824               	movf	___llmod@dividend,w
  5671  004F  00A0               	movwf	?___llmod
  5672  0050  0008               	return
  5673  0051                     __end_of___llmod:	
  5674                           
  5675                           	psect	text13
  5676  0809                     __ptext13:	
  5677 ;; *************** function ___lldiv *****************
  5678 ;; Defined at:
  5679 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  divisor         4    0[COMMON] unsigned long 
  5682 ;;  dividend        4    4[COMMON] unsigned long 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  quotient        4    9[COMMON] unsigned long 
  5685 ;;  counter         1   13[COMMON] unsigned char 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  4    0[COMMON] unsigned long 
  5688 ;; Registers used:
  5689 ;;		wreg, status,2, status,0
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5695 ;;      Params:         8       0       0       0       0
  5696 ;;      Locals:         5       0       0       0       0
  5697 ;;      Temps:          1       0       0       0       0
  5698 ;;      Totals:        14       0       0       0       0
  5699 ;;Total ram usage:       14 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; This function calls:
  5702 ;;		Nothing
  5703 ;; This function is called by:
  5704 ;;		_sprintf
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           
  5709                           ;psect for function ___lldiv
  5710  0809                     ___lldiv:	
  5711                           
  5712                           ;incstack = 0
  5713                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5714  0809  3000               	movlw	0
  5715  080A  00FC               	movwf	___lldiv@quotient+3
  5716  080B  3000               	movlw	0
  5717  080C  00FB               	movwf	___lldiv@quotient+2
  5718  080D  3000               	movlw	0
  5719  080E  00FA               	movwf	___lldiv@quotient+1
  5720  080F  3000               	movlw	0
  5721  0810  00F9               	movwf	___lldiv@quotient
  5722  0811  0873               	movf	___lldiv@divisor+3,w
  5723  0812  0472               	iorwf	___lldiv@divisor+2,w
  5724  0813  0471               	iorwf	___lldiv@divisor+1,w
  5725  0814  0470               	iorwf	___lldiv@divisor,w
  5726  0815  1903               	skipnz
  5727  0816  285E               	goto	l3524
  5728  0817  01FD               	clrf	___lldiv@counter
  5729  0818  0AFD               	incf	___lldiv@counter,f
  5730  0819                     l3510:	
  5731  0819  1BF3               	btfsc	___lldiv@divisor+3,7
  5732  081A  2829               	goto	l3512
  5733  081B  3001               	movlw	1
  5734  081C  00F8               	movwf	??___lldiv
  5735  081D                     u5755:	
  5736  081D  1003               	clrc
  5737  081E  0DF0               	rlf	___lldiv@divisor,f
  5738  081F  0DF1               	rlf	___lldiv@divisor+1,f
  5739  0820  0DF2               	rlf	___lldiv@divisor+2,f
  5740  0821  0DF3               	rlf	___lldiv@divisor+3,f
  5741  0822  0BF8               	decfsz	??___lldiv,f
  5742  0823  281D               	goto	u5755
  5743  0824  3001               	movlw	1
  5744  0825  00F8               	movwf	??___lldiv
  5745  0826  0878               	movf	??___lldiv,w
  5746  0827  07FD               	addwf	___lldiv@counter,f
  5747  0828  2819               	goto	l3510
  5748  0829                     l3512:	
  5749  0829  3001               	movlw	1
  5750  082A  00F8               	movwf	??___lldiv
  5751  082B                     u5775:	
  5752  082B  1003               	clrc
  5753  082C  0DF9               	rlf	___lldiv@quotient,f
  5754  082D  0DFA               	rlf	___lldiv@quotient+1,f
  5755  082E  0DFB               	rlf	___lldiv@quotient+2,f
  5756  082F  0DFC               	rlf	___lldiv@quotient+3,f
  5757  0830  0BF8               	decfsz	??___lldiv,f
  5758  0831  282B               	goto	u5775
  5759  0832  0873               	movf	___lldiv@divisor+3,w
  5760  0833  0277               	subwf	___lldiv@dividend+3,w
  5761  0834  1D03               	skipz
  5762  0835  2840               	goto	u5785
  5763  0836  0872               	movf	___lldiv@divisor+2,w
  5764  0837  0276               	subwf	___lldiv@dividend+2,w
  5765  0838  1D03               	skipz
  5766  0839  2840               	goto	u5785
  5767  083A  0871               	movf	___lldiv@divisor+1,w
  5768  083B  0275               	subwf	___lldiv@dividend+1,w
  5769  083C  1D03               	skipz
  5770  083D  2840               	goto	u5785
  5771  083E  0870               	movf	___lldiv@divisor,w
  5772  083F  0274               	subwf	___lldiv@dividend,w
  5773  0840                     u5785:	
  5774  0840  1C03               	skipc
  5775  0841  2851               	goto	l3520
  5776  0842  0870               	movf	___lldiv@divisor,w
  5777  0843  02F4               	subwf	___lldiv@dividend,f
  5778  0844  0871               	movf	___lldiv@divisor+1,w
  5779  0845  1C03               	skipc
  5780  0846  0F71               	incfsz	___lldiv@divisor+1,w
  5781  0847  02F5               	subwf	___lldiv@dividend+1,f
  5782  0848  0872               	movf	___lldiv@divisor+2,w
  5783  0849  1C03               	skipc
  5784  084A  0F72               	incfsz	___lldiv@divisor+2,w
  5785  084B  02F6               	subwf	___lldiv@dividend+2,f
  5786  084C  0873               	movf	___lldiv@divisor+3,w
  5787  084D  1C03               	skipc
  5788  084E  0F73               	incfsz	___lldiv@divisor+3,w
  5789  084F  02F7               	subwf	___lldiv@dividend+3,f
  5790  0850  1479               	bsf	___lldiv@quotient,0
  5791  0851                     l3520:	
  5792  0851  3001               	movlw	1
  5793  0852                     u5795:	
  5794  0852  1003               	clrc
  5795  0853  0CF3               	rrf	___lldiv@divisor+3,f
  5796  0854  0CF2               	rrf	___lldiv@divisor+2,f
  5797  0855  0CF1               	rrf	___lldiv@divisor+1,f
  5798  0856  0CF0               	rrf	___lldiv@divisor,f
  5799  0857  3EFF               	addlw	-1
  5800  0858  1D03               	skipz
  5801  0859  2852               	goto	u5795
  5802  085A  3001               	movlw	1
  5803  085B  02FD               	subwf	___lldiv@counter,f
  5804  085C  1D03               	btfss	3,2
  5805  085D  2829               	goto	l3512
  5806  085E                     l3524:	
  5807  085E  087C               	movf	___lldiv@quotient+3,w
  5808  085F  00F3               	movwf	?___lldiv+3
  5809  0860  087B               	movf	___lldiv@quotient+2,w
  5810  0861  00F2               	movwf	?___lldiv+2
  5811  0862  087A               	movf	___lldiv@quotient+1,w
  5812  0863  00F1               	movwf	?___lldiv+1
  5813  0864  0879               	movf	___lldiv@quotient,w
  5814  0865  00F0               	movwf	?___lldiv
  5815  0866  0008               	return
  5816  0867                     __end_of___lldiv:	
  5817                           
  5818                           	psect	text14
  5819  1495                     __ptext14:	
  5820 ;; *************** function ___fttol *****************
  5821 ;; Defined at:
  5822 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  f1              3   31[BANK0 ] float 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;  lval            4   40[BANK0 ] unsigned long 
  5827 ;;  exp1            1   44[BANK0 ] unsigned char 
  5828 ;;  sign1           1   39[BANK0 ] unsigned char 
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  4   31[BANK0 ] long 
  5831 ;; Registers used:
  5832 ;;		wreg, status,2, status,0
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5838 ;;      Params:         0       4       0       0       0
  5839 ;;      Locals:         0       6       0       0       0
  5840 ;;      Temps:          0       4       0       0       0
  5841 ;;      Totals:         0      14       0       0       0
  5842 ;;Total ram usage:       14 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; This function calls:
  5845 ;;		Nothing
  5846 ;; This function is called by:
  5847 ;;		_sprintf
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           
  5852                           ;psect for function ___fttol
  5853  1495                     ___fttol:	
  5854                           
  5855                           ;incstack = 0
  5856                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5857  1495  1283               	bcf	3,5	;RP0=0, select bank0
  5858  1496  1303               	bcf	3,6	;RP1=0, select bank0
  5859  1497  083F               	movf	___fttol@f1,w
  5860  1498  00C3               	movwf	??___fttol
  5861  1499  0840               	movf	___fttol@f1+1,w
  5862  149A  00C4               	movwf	??___fttol+1
  5863  149B  0841               	movf	___fttol@f1+2,w
  5864  149C  00C5               	movwf	??___fttol+2
  5865  149D  1003               	clrc
  5866  149E  0D44               	rlf	??___fttol+1,w
  5867  149F  0D45               	rlf	??___fttol+2,w
  5868  14A0  00C6               	movwf	??___fttol+3
  5869  14A1  0846               	movf	??___fttol+3,w
  5870  14A2  00CC               	movwf	___fttol@exp1
  5871  14A3  084C               	movf	___fttol@exp1,w
  5872  14A4  1D03               	btfss	3,2
  5873  14A5  2CAF               	goto	l3468
  5874  14A6  3000               	movlw	0
  5875  14A7  00C2               	movwf	?___fttol+3
  5876  14A8  3000               	movlw	0
  5877  14A9  00C1               	movwf	?___fttol+2
  5878  14AA  3000               	movlw	0
  5879  14AB  00C0               	movwf	?___fttol+1
  5880  14AC  3000               	movlw	0
  5881  14AD  00BF               	movwf	?___fttol
  5882  14AE  0008               	return
  5883  14AF                     l3468:	
  5884  14AF  083F               	movf	___fttol@f1,w
  5885  14B0  00C3               	movwf	??___fttol
  5886  14B1  0840               	movf	___fttol@f1+1,w
  5887  14B2  00C4               	movwf	??___fttol+1
  5888  14B3  0841               	movf	___fttol@f1+2,w
  5889  14B4  00C5               	movwf	??___fttol+2
  5890  14B5  3017               	movlw	23
  5891  14B6                     u5655:	
  5892  14B6  1003               	clrc
  5893  14B7  0CC5               	rrf	??___fttol+2,f
  5894  14B8  0CC4               	rrf	??___fttol+1,f
  5895  14B9  0CC3               	rrf	??___fttol,f
  5896  14BA  3EFF               	addlw	-1
  5897  14BB  1D03               	skipz
  5898  14BC  2CB6               	goto	u5655
  5899  14BD  0843               	movf	??___fttol,w
  5900  14BE  00C6               	movwf	??___fttol+3
  5901  14BF  0846               	movf	??___fttol+3,w
  5902  14C0  00C7               	movwf	___fttol@sign1
  5903  14C1  17C0               	bsf	___fttol@f1+1,7
  5904  14C2  30FF               	movlw	255
  5905  14C3  05BF               	andwf	___fttol@f1,f
  5906  14C4  30FF               	movlw	255
  5907  14C5  05C0               	andwf	___fttol@f1+1,f
  5908  14C6  3000               	movlw	0
  5909  14C7  05C1               	andwf	___fttol@f1+2,f
  5910  14C8  083F               	movf	___fttol@f1,w
  5911  14C9  00C8               	movwf	___fttol@lval
  5912  14CA  0840               	movf	___fttol@f1+1,w
  5913  14CB  00C9               	movwf	___fttol@lval+1
  5914  14CC  0841               	movf	___fttol@f1+2,w
  5915  14CD  00CA               	movwf	___fttol@lval+2
  5916  14CE  01CB               	clrf	___fttol@lval+3
  5917  14CF  308E               	movlw	142
  5918  14D0  02CC               	subwf	___fttol@exp1,f
  5919  14D1  1FCC               	btfss	___fttol@exp1,7
  5920  14D2  2CF1               	goto	l3488
  5921  14D3  084C               	movf	___fttol@exp1,w
  5922  14D4  3A80               	xorlw	128
  5923  14D5  3E8F               	addlw	143
  5924  14D6  1803               	skipnc
  5925  14D7  2CE1               	goto	l3486
  5926  14D8  3000               	movlw	0
  5927  14D9  00C2               	movwf	?___fttol+3
  5928  14DA  3000               	movlw	0
  5929  14DB  00C1               	movwf	?___fttol+2
  5930  14DC  3000               	movlw	0
  5931  14DD  00C0               	movwf	?___fttol+1
  5932  14DE  3000               	movlw	0
  5933  14DF  00BF               	movwf	?___fttol
  5934  14E0  0008               	return
  5935  14E1                     l3486:	
  5936  14E1  3001               	movlw	1
  5937  14E2                     u5685:	
  5938  14E2  1003               	clrc
  5939  14E3  0CCB               	rrf	___fttol@lval+3,f
  5940  14E4  0CCA               	rrf	___fttol@lval+2,f
  5941  14E5  0CC9               	rrf	___fttol@lval+1,f
  5942  14E6  0CC8               	rrf	___fttol@lval,f
  5943  14E7  3EFF               	addlw	-1
  5944  14E8  1D03               	skipz
  5945  14E9  2CE2               	goto	u5685
  5946  14EA  3001               	movlw	1
  5947  14EB  00C3               	movwf	??___fttol
  5948  14EC  0843               	movf	??___fttol,w
  5949  14ED  07CC               	addwf	___fttol@exp1,f
  5950  14EE  1903               	btfsc	3,2
  5951  14EF  2D0C               	goto	l3496
  5952  14F0  2CE1               	goto	l3486
  5953  14F1                     l3488:	
  5954  14F1  3018               	movlw	24
  5955  14F2  024C               	subwf	___fttol@exp1,w
  5956  14F3  1C03               	skipc
  5957  14F4  2D09               	goto	l603
  5958  14F5  3000               	movlw	0
  5959  14F6  00C2               	movwf	?___fttol+3
  5960  14F7  3000               	movlw	0
  5961  14F8  00C1               	movwf	?___fttol+2
  5962  14F9  3000               	movlw	0
  5963  14FA  00C0               	movwf	?___fttol+1
  5964  14FB  3000               	movlw	0
  5965  14FC  00BF               	movwf	?___fttol
  5966  14FD  0008               	return
  5967  14FE                     l3494:	
  5968  14FE  3001               	movlw	1
  5969  14FF  00C3               	movwf	??___fttol
  5970  1500                     u5715:	
  5971  1500  1003               	clrc
  5972  1501  0DC8               	rlf	___fttol@lval,f
  5973  1502  0DC9               	rlf	___fttol@lval+1,f
  5974  1503  0DCA               	rlf	___fttol@lval+2,f
  5975  1504  0DCB               	rlf	___fttol@lval+3,f
  5976  1505  0BC3               	decfsz	??___fttol,f
  5977  1506  2D00               	goto	u5715
  5978  1507  3001               	movlw	1
  5979  1508  02CC               	subwf	___fttol@exp1,f
  5980  1509                     l603:	
  5981  1509  084C               	movf	___fttol@exp1,w
  5982  150A  1D03               	btfss	3,2
  5983  150B  2CFE               	goto	l3494
  5984  150C                     l3496:	
  5985  150C  0847               	movf	___fttol@sign1,w
  5986  150D  1903               	btfsc	3,2
  5987  150E  2D1A               	goto	l3500
  5988  150F  09C8               	comf	___fttol@lval,f
  5989  1510  09C9               	comf	___fttol@lval+1,f
  5990  1511  09CA               	comf	___fttol@lval+2,f
  5991  1512  09CB               	comf	___fttol@lval+3,f
  5992  1513  0AC8               	incf	___fttol@lval,f
  5993  1514  1903               	skipnz
  5994  1515  0AC9               	incf	___fttol@lval+1,f
  5995  1516  1903               	skipnz
  5996  1517  0ACA               	incf	___fttol@lval+2,f
  5997  1518  1903               	skipnz
  5998  1519  0ACB               	incf	___fttol@lval+3,f
  5999  151A                     l3500:	
  6000  151A  084B               	movf	___fttol@lval+3,w
  6001  151B  00C2               	movwf	?___fttol+3
  6002  151C  084A               	movf	___fttol@lval+2,w
  6003  151D  00C1               	movwf	?___fttol+2
  6004  151E  0849               	movf	___fttol@lval+1,w
  6005  151F  00C0               	movwf	?___fttol+1
  6006  1520  0848               	movf	___fttol@lval,w
  6007  1521  00BF               	movwf	?___fttol
  6008  1522  0008               	return
  6009  1523                     __end_of___fttol:	
  6010                           
  6011                           	psect	text15
  6012  1161                     __ptext15:	
  6013 ;; *************** function ___ftsub *****************
  6014 ;; Defined at:
  6015 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;  f2              3   51[BANK0 ] float 
  6018 ;;  f1              3   54[BANK0 ] float 
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;		None
  6021 ;; Return value:  Size  Location     Type
  6022 ;;                  3   51[BANK0 ] float 
  6023 ;; Registers used:
  6024 ;;		wreg, status,2, status,0, pclath, cstack
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6030 ;;      Params:         0       6       0       0       0
  6031 ;;      Locals:         0       0       0       0       0
  6032 ;;      Temps:          0       0       0       0       0
  6033 ;;      Totals:         0       6       0       0       0
  6034 ;;Total ram usage:        6 bytes
  6035 ;; Hardware stack levels used:    1
  6036 ;; Hardware stack levels required when called:    2
  6037 ;; This function calls:
  6038 ;;		___ftadd
  6039 ;; This function is called by:
  6040 ;;		_sprintf
  6041 ;; This function uses a non-reentrant model
  6042 ;;
  6043                           
  6044                           
  6045                           ;psect for function ___ftsub
  6046  1161                     ___ftsub:	
  6047                           
  6048                           ;incstack = 0
  6049                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6050  1161  1283               	bcf	3,5	;RP0=0, select bank0
  6051  1162  1303               	bcf	3,6	;RP1=0, select bank0
  6052  1163  0855               	movf	___ftsub@f2+2,w
  6053  1164  0454               	iorwf	___ftsub@f2+1,w
  6054  1165  0453               	iorwf	___ftsub@f2,w
  6055  1166  1903               	skipnz
  6056  1167  296A               	goto	l3458
  6057  1168  3080               	movlw	128
  6058  1169  06D5               	xorwf	___ftsub@f2+2,f
  6059  116A                     l3458:	
  6060  116A  0856               	movf	___ftsub@f1,w
  6061  116B  00C6               	movwf	___ftadd@f1
  6062  116C  0857               	movf	___ftsub@f1+1,w
  6063  116D  00C7               	movwf	___ftadd@f1+1
  6064  116E  0858               	movf	___ftsub@f1+2,w
  6065  116F  00C8               	movwf	___ftadd@f1+2
  6066  1170  0853               	movf	___ftsub@f2,w
  6067  1171  00C9               	movwf	___ftadd@f2
  6068  1172  0854               	movf	___ftsub@f2+1,w
  6069  1173  00CA               	movwf	___ftadd@f2+1
  6070  1174  0855               	movf	___ftsub@f2+2,w
  6071  1175  00CB               	movwf	___ftadd@f2+2
  6072  1176  120A  158A  2067   	fcall	___ftadd
  6073  1179  1283               	bcf	3,5	;RP0=0, select bank0
  6074  117A  1303               	bcf	3,6	;RP1=0, select bank0
  6075  117B  0846               	movf	?___ftadd,w
  6076  117C  00D3               	movwf	?___ftsub
  6077  117D  0847               	movf	?___ftadd+1,w
  6078  117E  00D4               	movwf	?___ftsub+1
  6079  117F  0848               	movf	?___ftadd+2,w
  6080  1180  00D5               	movwf	?___ftsub+2
  6081  1181  0008               	return
  6082  1182                     __end_of___ftsub:	
  6083                           
  6084                           	psect	text16
  6085  0867                     __ptext16:	
  6086 ;; *************** function ___ftadd *****************
  6087 ;; Defined at:
  6088 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;  f1              3   38[BANK0 ] float 
  6091 ;;  f2              3   41[BANK0 ] float 
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;  exp1            1   50[BANK0 ] unsigned char 
  6094 ;;  exp2            1   49[BANK0 ] unsigned char 
  6095 ;;  sign            1   48[BANK0 ] unsigned char 
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  3   38[BANK0 ] float 
  6098 ;; Registers used:
  6099 ;;		wreg, status,2, status,0, pclath, cstack
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6105 ;;      Params:         0       6       0       0       0
  6106 ;;      Locals:         0       3       0       0       0
  6107 ;;      Temps:          0       4       0       0       0
  6108 ;;      Totals:         0      13       0       0       0
  6109 ;;Total ram usage:       13 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:    1
  6112 ;; This function calls:
  6113 ;;		___ftpack
  6114 ;; This function is called by:
  6115 ;;		_sprintf
  6116 ;;		___ftsub
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           
  6121                           ;psect for function ___ftadd
  6122  0867                     ___ftadd:	
  6123                           
  6124                           ;incstack = 0
  6125                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6126  0867  1283               	bcf	3,5	;RP0=0, select bank0
  6127  0868  1303               	bcf	3,6	;RP1=0, select bank0
  6128  0869  0846               	movf	___ftadd@f1,w
  6129  086A  00CC               	movwf	??___ftadd
  6130  086B  0847               	movf	___ftadd@f1+1,w
  6131  086C  00CD               	movwf	??___ftadd+1
  6132  086D  0848               	movf	___ftadd@f1+2,w
  6133  086E  00CE               	movwf	??___ftadd+2
  6134  086F  1003               	clrc
  6135  0870  0D4D               	rlf	??___ftadd+1,w
  6136  0871  0D4E               	rlf	??___ftadd+2,w
  6137  0872  00CF               	movwf	??___ftadd+3
  6138  0873  084F               	movf	??___ftadd+3,w
  6139  0874  00D2               	movwf	___ftadd@exp1
  6140  0875  0849               	movf	___ftadd@f2,w
  6141  0876  00CC               	movwf	??___ftadd
  6142  0877  084A               	movf	___ftadd@f2+1,w
  6143  0878  00CD               	movwf	??___ftadd+1
  6144  0879  084B               	movf	___ftadd@f2+2,w
  6145  087A  00CE               	movwf	??___ftadd+2
  6146  087B  1003               	clrc
  6147  087C  0D4D               	rlf	??___ftadd+1,w
  6148  087D  0D4E               	rlf	??___ftadd+2,w
  6149  087E  00CF               	movwf	??___ftadd+3
  6150  087F  084F               	movf	??___ftadd+3,w
  6151  0880  00D1               	movwf	___ftadd@exp2
  6152  0881  0852               	movf	___ftadd@exp1,w
  6153  0882  1903               	btfsc	3,2
  6154  0883  2890               	goto	l3012
  6155  0884  0851               	movf	___ftadd@exp2,w
  6156  0885  0252               	subwf	___ftadd@exp1,w
  6157  0886  1803               	skipnc
  6158  0887  2897               	goto	l3016
  6159  0888  0352               	decf	___ftadd@exp1,w
  6160  0889  3AFF               	xorlw	255
  6161  088A  0751               	addwf	___ftadd@exp2,w
  6162  088B  00CC               	movwf	??___ftadd
  6163  088C  3019               	movlw	25
  6164  088D  024C               	subwf	??___ftadd,w
  6165  088E  1C03               	skipc
  6166  088F  2897               	goto	l3016
  6167  0890                     l3012:	
  6168  0890  0849               	movf	___ftadd@f2,w
  6169  0891  00C6               	movwf	?___ftadd
  6170  0892  084A               	movf	___ftadd@f2+1,w
  6171  0893  00C7               	movwf	?___ftadd+1
  6172  0894  084B               	movf	___ftadd@f2+2,w
  6173  0895  00C8               	movwf	?___ftadd+2
  6174  0896  0008               	return
  6175  0897                     l3016:	
  6176  0897  0851               	movf	___ftadd@exp2,w
  6177  0898  1903               	btfsc	3,2
  6178  0899  0008               	return
  6179  089A  0852               	movf	___ftadd@exp1,w
  6180  089B  0251               	subwf	___ftadd@exp2,w
  6181  089C  1803               	skipnc
  6182  089D  28A6               	goto	l3022
  6183  089E  0351               	decf	___ftadd@exp2,w
  6184  089F  3AFF               	xorlw	255
  6185  08A0  0752               	addwf	___ftadd@exp1,w
  6186  08A1  00CC               	movwf	??___ftadd
  6187  08A2  3019               	movlw	25
  6188  08A3  024C               	subwf	??___ftadd,w
  6189  08A4  1803               	btfsc	3,0
  6190  08A5  0008               	return
  6191  08A6                     l3022:	
  6192  08A6  3006               	movlw	6
  6193  08A7  00CC               	movwf	??___ftadd
  6194  08A8  084C               	movf	??___ftadd,w
  6195  08A9  00D0               	movwf	___ftadd@sign
  6196  08AA  1BC8               	btfsc	___ftadd@f1+2,7
  6197  08AB  17D0               	bsf	___ftadd@sign,7
  6198  08AC  1BCB               	btfsc	___ftadd@f2+2,7
  6199  08AD  1750               	bsf	___ftadd@sign,6
  6200  08AE  17C7               	bsf	___ftadd@f1+1,7
  6201  08AF  30FF               	movlw	255
  6202  08B0  05C6               	andwf	___ftadd@f1,f
  6203  08B1  30FF               	movlw	255
  6204  08B2  05C7               	andwf	___ftadd@f1+1,f
  6205  08B3  3000               	movlw	0
  6206  08B4  05C8               	andwf	___ftadd@f1+2,f
  6207  08B5  17CA               	bsf	___ftadd@f2+1,7
  6208  08B6  30FF               	movlw	255
  6209  08B7  05C9               	andwf	___ftadd@f2,f
  6210  08B8  30FF               	movlw	255
  6211  08B9  05CA               	andwf	___ftadd@f2+1,f
  6212  08BA  3000               	movlw	0
  6213  08BB  05CB               	andwf	___ftadd@f2+2,f
  6214  08BC  0851               	movf	___ftadd@exp2,w
  6215  08BD  0252               	subwf	___ftadd@exp1,w
  6216  08BE  1803               	skipnc
  6217  08BF  28E6               	goto	l3044
  6218  08C0                     l3034:	
  6219  08C0  3001               	movlw	1
  6220  08C1                     u4725:	
  6221  08C1  1003               	clrc
  6222  08C2  0DC9               	rlf	___ftadd@f2,f
  6223  08C3  0DCA               	rlf	___ftadd@f2+1,f
  6224  08C4  0DCB               	rlf	___ftadd@f2+2,f
  6225  08C5  3EFF               	addlw	-1
  6226  08C6  1D03               	skipz
  6227  08C7  28C1               	goto	u4725
  6228  08C8  3001               	movlw	1
  6229  08C9  02D1               	subwf	___ftadd@exp2,f
  6230  08CA  0851               	movf	___ftadd@exp2,w
  6231  08CB  0652               	xorwf	___ftadd@exp1,w
  6232  08CC  1903               	skipnz
  6233  08CD  28E1               	goto	l3042
  6234  08CE  3001               	movlw	1
  6235  08CF  02D0               	subwf	___ftadd@sign,f
  6236  08D0  0850               	movf	___ftadd@sign,w
  6237  08D1  3907               	andlw	7
  6238  08D2  1903               	btfsc	3,2
  6239  08D3  28E1               	goto	l3042
  6240  08D4  28C0               	goto	l3034
  6241  08D5                     l3040:	
  6242  08D5  3001               	movlw	1
  6243  08D6                     u4755:	
  6244  08D6  1003               	clrc
  6245  08D7  0CC8               	rrf	___ftadd@f1+2,f
  6246  08D8  0CC7               	rrf	___ftadd@f1+1,f
  6247  08D9  0CC6               	rrf	___ftadd@f1,f
  6248  08DA  3EFF               	addlw	-1
  6249  08DB  1D03               	skipz
  6250  08DC  28D6               	goto	u4755
  6251  08DD  3001               	movlw	1
  6252  08DE  00CC               	movwf	??___ftadd
  6253  08DF  084C               	movf	??___ftadd,w
  6254  08E0  07D2               	addwf	___ftadd@exp1,f
  6255  08E1                     l3042:	
  6256  08E1  0852               	movf	___ftadd@exp1,w
  6257  08E2  0651               	xorwf	___ftadd@exp2,w
  6258  08E3  1903               	btfsc	3,2
  6259  08E4  290F               	goto	l526
  6260  08E5  28D5               	goto	l3040
  6261  08E6                     l3044:	
  6262  08E6  0852               	movf	___ftadd@exp1,w
  6263  08E7  0251               	subwf	___ftadd@exp2,w
  6264  08E8  1803               	skipnc
  6265  08E9  290F               	goto	l526
  6266  08EA                     l3046:	
  6267  08EA  3001               	movlw	1
  6268  08EB                     u4785:	
  6269  08EB  1003               	clrc
  6270  08EC  0DC6               	rlf	___ftadd@f1,f
  6271  08ED  0DC7               	rlf	___ftadd@f1+1,f
  6272  08EE  0DC8               	rlf	___ftadd@f1+2,f
  6273  08EF  3EFF               	addlw	-1
  6274  08F0  1D03               	skipz
  6275  08F1  28EB               	goto	u4785
  6276  08F2  3001               	movlw	1
  6277  08F3  02D2               	subwf	___ftadd@exp1,f
  6278  08F4  0851               	movf	___ftadd@exp2,w
  6279  08F5  0652               	xorwf	___ftadd@exp1,w
  6280  08F6  1903               	skipnz
  6281  08F7  290B               	goto	l3054
  6282  08F8  3001               	movlw	1
  6283  08F9  02D0               	subwf	___ftadd@sign,f
  6284  08FA  0850               	movf	___ftadd@sign,w
  6285  08FB  3907               	andlw	7
  6286  08FC  1903               	btfsc	3,2
  6287  08FD  290B               	goto	l3054
  6288  08FE  28EA               	goto	l3046
  6289  08FF                     l3052:	
  6290  08FF  3001               	movlw	1
  6291  0900                     u4815:	
  6292  0900  1003               	clrc
  6293  0901  0CCB               	rrf	___ftadd@f2+2,f
  6294  0902  0CCA               	rrf	___ftadd@f2+1,f
  6295  0903  0CC9               	rrf	___ftadd@f2,f
  6296  0904  3EFF               	addlw	-1
  6297  0905  1D03               	skipz
  6298  0906  2900               	goto	u4815
  6299  0907  3001               	movlw	1
  6300  0908  00CC               	movwf	??___ftadd
  6301  0909  084C               	movf	??___ftadd,w
  6302  090A  07D1               	addwf	___ftadd@exp2,f
  6303  090B                     l3054:	
  6304  090B  0852               	movf	___ftadd@exp1,w
  6305  090C  0651               	xorwf	___ftadd@exp2,w
  6306  090D  1D03               	skipz
  6307  090E  28FF               	goto	l3052
  6308  090F                     l526:	
  6309  090F  1FD0               	btfss	___ftadd@sign,7
  6310  0910  2921               	goto	l3058
  6311  0911  30FF               	movlw	255
  6312  0912  06C6               	xorwf	___ftadd@f1,f
  6313  0913  30FF               	movlw	255
  6314  0914  06C7               	xorwf	___ftadd@f1+1,f
  6315  0915  30FF               	movlw	255
  6316  0916  06C8               	xorwf	___ftadd@f1+2,f
  6317  0917  3001               	movlw	1
  6318  0918  07C6               	addwf	___ftadd@f1,f
  6319  0919  3000               	movlw	0
  6320  091A  1803               	skipnc
  6321  091B  3001               	movlw	1
  6322  091C  07C7               	addwf	___ftadd@f1+1,f
  6323  091D  3000               	movlw	0
  6324  091E  1803               	skipnc
  6325  091F  3001               	movlw	1
  6326  0920  07C8               	addwf	___ftadd@f1+2,f
  6327  0921                     l3058:	
  6328  0921  1F50               	btfss	___ftadd@sign,6
  6329  0922  2933               	goto	l3062
  6330  0923  30FF               	movlw	255
  6331  0924  06C9               	xorwf	___ftadd@f2,f
  6332  0925  30FF               	movlw	255
  6333  0926  06CA               	xorwf	___ftadd@f2+1,f
  6334  0927  30FF               	movlw	255
  6335  0928  06CB               	xorwf	___ftadd@f2+2,f
  6336  0929  3001               	movlw	1
  6337  092A  07C9               	addwf	___ftadd@f2,f
  6338  092B  3000               	movlw	0
  6339  092C  1803               	skipnc
  6340  092D  3001               	movlw	1
  6341  092E  07CA               	addwf	___ftadd@f2+1,f
  6342  092F  3000               	movlw	0
  6343  0930  1803               	skipnc
  6344  0931  3001               	movlw	1
  6345  0932  07CB               	addwf	___ftadd@f2+2,f
  6346  0933                     l3062:	
  6347  0933  01D0               	clrf	___ftadd@sign
  6348  0934  0846               	movf	___ftadd@f1,w
  6349  0935  07C9               	addwf	___ftadd@f2,f
  6350  0936  0847               	movf	___ftadd@f1+1,w
  6351  0937  1103               	clrz
  6352  0938  1803               	skipnc
  6353  0939  0A47               	incf	___ftadd@f1+1,w
  6354  093A  1D03               	btfss	3,2
  6355  093B  07CA               	addwf	___ftadd@f2+1,f
  6356  093C  0848               	movf	___ftadd@f1+2,w
  6357  093D  1103               	clrz
  6358  093E  1803               	skipnc
  6359  093F  0A48               	incf	___ftadd@f1+2,w
  6360  0940  1D03               	btfss	3,2
  6361  0941  07CB               	addwf	___ftadd@f2+2,f
  6362  0942  1FCB               	btfss	___ftadd@f2+2,7
  6363  0943  2956               	goto	l3072
  6364  0944  30FF               	movlw	255
  6365  0945  06C9               	xorwf	___ftadd@f2,f
  6366  0946  30FF               	movlw	255
  6367  0947  06CA               	xorwf	___ftadd@f2+1,f
  6368  0948  30FF               	movlw	255
  6369  0949  06CB               	xorwf	___ftadd@f2+2,f
  6370  094A  3001               	movlw	1
  6371  094B  07C9               	addwf	___ftadd@f2,f
  6372  094C  3000               	movlw	0
  6373  094D  1803               	skipnc
  6374  094E  3001               	movlw	1
  6375  094F  07CA               	addwf	___ftadd@f2+1,f
  6376  0950  3000               	movlw	0
  6377  0951  1803               	skipnc
  6378  0952  3001               	movlw	1
  6379  0953  07CB               	addwf	___ftadd@f2+2,f
  6380  0954  01D0               	clrf	___ftadd@sign
  6381  0955  0AD0               	incf	___ftadd@sign,f
  6382  0956                     l3072:	
  6383  0956  0849               	movf	___ftadd@f2,w
  6384  0957  00F0               	movwf	___ftpack@arg
  6385  0958  084A               	movf	___ftadd@f2+1,w
  6386  0959  00F1               	movwf	___ftpack@arg+1
  6387  095A  084B               	movf	___ftadd@f2+2,w
  6388  095B  00F2               	movwf	___ftpack@arg+2
  6389  095C  0852               	movf	___ftadd@exp1,w
  6390  095D  00CC               	movwf	??___ftadd
  6391  095E  084C               	movf	??___ftadd,w
  6392  095F  00F3               	movwf	___ftpack@exp
  6393  0960  0850               	movf	___ftadd@sign,w
  6394  0961  00CD               	movwf	??___ftadd+1
  6395  0962  084D               	movf	??___ftadd+1,w
  6396  0963  00F4               	movwf	___ftpack@sign
  6397  0964  160A  118A  23A0   	fcall	___ftpack
  6398  0967  0870               	movf	?___ftpack,w
  6399  0968  1283               	bcf	3,5	;RP0=0, select bank0
  6400  0969  1303               	bcf	3,6	;RP1=0, select bank0
  6401  096A  00C6               	movwf	?___ftadd
  6402  096B  0871               	movf	?___ftpack+1,w
  6403  096C  00C7               	movwf	?___ftadd+1
  6404  096D  0872               	movf	?___ftpack+2,w
  6405  096E  00C8               	movwf	?___ftadd+2
  6406  096F  0008               	return
  6407  0970                     __end_of___ftadd:	
  6408                           
  6409                           	psect	text17
  6410  0801                     __ptext17:	
  6411 ;; *************** function ___ftneg *****************
  6412 ;; Defined at:
  6413 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;  f1              3    0[COMMON] float 
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;		None
  6418 ;; Return value:  Size  Location     Type
  6419 ;;                  3    0[COMMON] float 
  6420 ;; Registers used:
  6421 ;;		wreg
  6422 ;; Tracked objects:
  6423 ;;		On entry : 0/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6427 ;;      Params:         3       0       0       0       0
  6428 ;;      Locals:         0       0       0       0       0
  6429 ;;      Temps:          0       0       0       0       0
  6430 ;;      Totals:         3       0       0       0       0
  6431 ;;Total ram usage:        3 bytes
  6432 ;; Hardware stack levels used:    1
  6433 ;; This function calls:
  6434 ;;		Nothing
  6435 ;; This function is called by:
  6436 ;;		_sprintf
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           
  6441                           ;psect for function ___ftneg
  6442  0801                     ___ftneg:	
  6443                           
  6444                           ;incstack = 0
  6445                           ; Regs used in ___ftneg: [wreg]
  6446  0801  0872               	movf	___ftneg@f1+2,w
  6447  0802  0471               	iorwf	___ftneg@f1+1,w
  6448  0803  0470               	iorwf	___ftneg@f1,w
  6449  0804  1903               	skipnz
  6450  0805  0008               	return
  6451  0806  3080               	movlw	128
  6452  0807  06F2               	xorwf	___ftneg@f1+2,f
  6453  0808  0008               	return
  6454  0809                     __end_of___ftneg:	
  6455                           
  6456                           	psect	text18
  6457  1343                     __ptext18:	
  6458 ;; *************** function ___ftge *****************
  6459 ;; Defined at:
  6460 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;  ff1             3    0[COMMON] float 
  6463 ;;  ff2             3    3[COMMON] float 
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;		None
  6466 ;; Return value:  Size  Location     Type
  6467 ;;		None               void
  6468 ;; Registers used:
  6469 ;;		wreg, status,2, status,0
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6475 ;;      Params:         6       0       0       0       0
  6476 ;;      Locals:         0       0       0       0       0
  6477 ;;      Temps:          6       0       0       0       0
  6478 ;;      Totals:        12       0       0       0       0
  6479 ;;Total ram usage:       12 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; This function calls:
  6482 ;;		Nothing
  6483 ;; This function is called by:
  6484 ;;		_sprintf
  6485 ;; This function uses a non-reentrant model
  6486 ;;
  6487                           
  6488                           
  6489                           ;psect for function ___ftge
  6490  1343                     ___ftge:	
  6491                           
  6492                           ;incstack = 0
  6493                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6494  1343  1FF2               	btfss	___ftge@ff1+2,7
  6495  1344  2B6A               	goto	l3430
  6496  1345  3000               	movlw	0
  6497  1346  00F6               	movwf	??___ftge
  6498  1347  3000               	movlw	0
  6499  1348  00F7               	movwf	??___ftge+1
  6500  1349  3080               	movlw	128
  6501  134A  00F8               	movwf	??___ftge+2
  6502  134B  0970               	comf	___ftge@ff1,w
  6503  134C  00F9               	movwf	??___ftge+3
  6504  134D  0971               	comf	___ftge@ff1+1,w
  6505  134E  00FA               	movwf	??___ftge+4
  6506  134F  0972               	comf	___ftge@ff1+2,w
  6507  1350  00FB               	movwf	??___ftge+5
  6508  1351  0AF9               	incf	??___ftge+3,f
  6509  1352  1903               	skipnz
  6510  1353  0AFA               	incf	??___ftge+4,f
  6511  1354  1903               	skipnz
  6512  1355  0AFB               	incf	??___ftge+5,f
  6513  1356  0879               	movf	??___ftge+3,w
  6514  1357  07F6               	addwf	??___ftge,f
  6515  1358  087A               	movf	??___ftge+4,w
  6516  1359  1803               	skipnc
  6517  135A  0F7A               	incfsz	??___ftge+4,w
  6518  135B  2B5D               	goto	u5581
  6519  135C  2B5E               	goto	u5582
  6520  135D                     u5581:	
  6521  135D  07F7               	addwf	??___ftge+1,f
  6522  135E                     u5582:	
  6523  135E  087B               	movf	??___ftge+5,w
  6524  135F  1803               	skipnc
  6525  1360  0F7B               	incfsz	??___ftge+5,w
  6526  1361  2B63               	goto	u5583
  6527  1362  2B64               	goto	u5584
  6528  1363                     u5583:	
  6529  1363  07F8               	addwf	??___ftge+2,f
  6530  1364                     u5584:	
  6531  1364  0876               	movf	??___ftge,w
  6532  1365  00F0               	movwf	___ftge@ff1
  6533  1366  0877               	movf	??___ftge+1,w
  6534  1367  00F1               	movwf	___ftge@ff1+1
  6535  1368  0878               	movf	??___ftge+2,w
  6536  1369  00F2               	movwf	___ftge@ff1+2
  6537  136A                     l3430:	
  6538  136A  1FF5               	btfss	___ftge@ff2+2,7
  6539  136B  2B91               	goto	l3434
  6540  136C  3000               	movlw	0
  6541  136D  00F6               	movwf	??___ftge
  6542  136E  3000               	movlw	0
  6543  136F  00F7               	movwf	??___ftge+1
  6544  1370  3080               	movlw	128
  6545  1371  00F8               	movwf	??___ftge+2
  6546  1372  0973               	comf	___ftge@ff2,w
  6547  1373  00F9               	movwf	??___ftge+3
  6548  1374  0974               	comf	___ftge@ff2+1,w
  6549  1375  00FA               	movwf	??___ftge+4
  6550  1376  0975               	comf	___ftge@ff2+2,w
  6551  1377  00FB               	movwf	??___ftge+5
  6552  1378  0AF9               	incf	??___ftge+3,f
  6553  1379  1903               	skipnz
  6554  137A  0AFA               	incf	??___ftge+4,f
  6555  137B  1903               	skipnz
  6556  137C  0AFB               	incf	??___ftge+5,f
  6557  137D  0879               	movf	??___ftge+3,w
  6558  137E  07F6               	addwf	??___ftge,f
  6559  137F  087A               	movf	??___ftge+4,w
  6560  1380  1803               	skipnc
  6561  1381  0F7A               	incfsz	??___ftge+4,w
  6562  1382  2B84               	goto	u5601
  6563  1383  2B85               	goto	u5602
  6564  1384                     u5601:	
  6565  1384  07F7               	addwf	??___ftge+1,f
  6566  1385                     u5602:	
  6567  1385  087B               	movf	??___ftge+5,w
  6568  1386  1803               	skipnc
  6569  1387  0F7B               	incfsz	??___ftge+5,w
  6570  1388  2B8A               	goto	u5603
  6571  1389  2B8B               	goto	u5604
  6572  138A                     u5603:	
  6573  138A  07F8               	addwf	??___ftge+2,f
  6574  138B                     u5604:	
  6575  138B  0876               	movf	??___ftge,w
  6576  138C  00F3               	movwf	___ftge@ff2
  6577  138D  0877               	movf	??___ftge+1,w
  6578  138E  00F4               	movwf	___ftge@ff2+1
  6579  138F  0878               	movf	??___ftge+2,w
  6580  1390  00F5               	movwf	___ftge@ff2+2
  6581  1391                     l3434:	
  6582  1391  3080               	movlw	128
  6583  1392  06F2               	xorwf	___ftge@ff1+2,f
  6584  1393  3080               	movlw	128
  6585  1394  06F5               	xorwf	___ftge@ff2+2,f
  6586  1395  0875               	movf	___ftge@ff2+2,w
  6587  1396  0272               	subwf	___ftge@ff1+2,w
  6588  1397  1D03               	skipz
  6589  1398  0008               	return
  6590  1399  0874               	movf	___ftge@ff2+1,w
  6591  139A  0271               	subwf	___ftge@ff1+1,w
  6592  139B  1D03               	skipz
  6593  139C  0008               	return
  6594  139D  0873               	movf	___ftge@ff2,w
  6595  139E  0270               	subwf	___ftge@ff1,w
  6596  139F  0008               	return
  6597  13A0                     __end_of___ftge:	
  6598                           
  6599                           	psect	text19
  6600  10E3                     __ptext19:	
  6601 ;; *************** function _lcd_printStringXY *****************
  6602 ;; Defined at:
  6603 ;;		line 200 in file "LCDlib.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;  str             2    8[COMMON] PTR unsigned char 
  6606 ;;		 -> main@bufferVoltage(80), main@buffer(20), STR_1(12), 
  6607 ;;  x               1   10[COMMON] unsigned char 
  6608 ;;  y               1   11[COMMON] unsigned char 
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;		None
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      void 
  6613 ;; Registers used:
  6614 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6620 ;;      Params:         4       0       0       0       0
  6621 ;;      Locals:         0       0       0       0       0
  6622 ;;      Temps:          1       0       0       0       0
  6623 ;;      Totals:         5       0       0       0       0
  6624 ;;Total ram usage:        5 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    3
  6627 ;; This function calls:
  6628 ;;		_lcd_gotoxy
  6629 ;;		_lcd_printString
  6630 ;; This function is called by:
  6631 ;;		_main
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           
  6636                           ;psect for function _lcd_printStringXY
  6637  10E3                     _lcd_printStringXY:	
  6638                           
  6639                           ;LCDlib.c: 202: lcd_gotoxy(x,y);
  6640                           
  6641                           ;incstack = 0
  6642                           ; Regs used in _lcd_printStringXY: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6643  10E3  087B               	movf	lcd_printStringXY@y,w
  6644  10E4  00FC               	movwf	??_lcd_printStringXY
  6645  10E5  087C               	movf	??_lcd_printStringXY,w
  6646  10E6  00F4               	movwf	lcd_gotoxy@y
  6647  10E7  087A               	movf	lcd_printStringXY@x,w
  6648  10E8  160A  118A  240C  160A  118A  	fcall	_lcd_gotoxy
  6649                           
  6650                           ;LCDlib.c: 203: lcd_printString(str);
  6651  10ED  0878               	movf	lcd_printStringXY@str,w
  6652  10EE  00F4               	movwf	lcd_printString@str
  6653  10EF  0879               	movf	lcd_printStringXY@str+1,w
  6654  10F0  00F5               	movwf	lcd_printString@str+1
  6655  10F1  160A  118A  21A3   	fcall	_lcd_printString
  6656  10F4  0008               	return
  6657  10F5                     __end_of_lcd_printStringXY:	
  6658                           
  6659                           	psect	text20
  6660  11A3                     __ptext20:	
  6661 ;; *************** function _lcd_printString *****************
  6662 ;; Defined at:
  6663 ;;		line 138 in file "LCDlib.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  str             2    4[COMMON] PTR unsigned char 
  6666 ;;		 -> main@bufferVoltage(80), main@buffer(20), STR_1(12), 
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;		None
  6669 ;; Return value:  Size  Location     Type
  6670 ;;                  1    wreg      void 
  6671 ;; Registers used:
  6672 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6673 ;; Tracked objects:
  6674 ;;		On entry : 0/0
  6675 ;;		On exit  : 0/0
  6676 ;;		Unchanged: 0/0
  6677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6678 ;;      Params:         2       0       0       0       0
  6679 ;;      Locals:         0       0       0       0       0
  6680 ;;      Temps:          0       0       0       0       0
  6681 ;;      Totals:         2       0       0       0       0
  6682 ;;Total ram usage:        2 bytes
  6683 ;; Hardware stack levels used:    1
  6684 ;; Hardware stack levels required when called:    2
  6685 ;; This function calls:
  6686 ;;		_lcd_char_out
  6687 ;; This function is called by:
  6688 ;;		_lcd_printStringXY
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           
  6693                           ;psect for function _lcd_printString
  6694  11A3                     _lcd_printString:	
  6695  11A3                     l3148:	
  6696                           ;LCDlib.c: 140: while((*str) != '\0')
  6697                           
  6698                           ;incstack = 0
  6699                           ; Regs used in _lcd_printString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6700                           
  6701  11A3  0875               	movf	lcd_printString@str+1,w
  6702  11A4  1283               	bcf	3,5	;RP0=0, select bank0
  6703  11A5  1303               	bcf	3,6	;RP1=0, select bank0
  6704  11A6  00FF               	movwf	127
  6705  11A7  0874               	movf	lcd_printString@str,w
  6706  11A8  0084               	movwf	4
  6707  11A9  160A  118A  2000  160A  118A  	fcall	stringtab
  6708  11AE  3A00               	xorlw	0
  6709  11AF  1903               	btfsc	3,2
  6710  11B0  0008               	return
  6711                           
  6712                           ;LCDlib.c: 141: {
  6713                           ;LCDlib.c: 142: lcd_char_out(*str);
  6714  11B1  0875               	movf	lcd_printString@str+1,w
  6715  11B2  1283               	bcf	3,5	;RP0=0, select bank0
  6716  11B3  1303               	bcf	3,6	;RP1=0, select bank0
  6717  11B4  00FF               	movwf	127
  6718  11B5  0874               	movf	lcd_printString@str,w
  6719  11B6  0084               	movwf	4
  6720  11B7  160A  118A  2000  160A  118A  	fcall	stringtab
  6721  11BC  160A  118A  21C6  160A  118A  	fcall	_lcd_char_out
  6722                           
  6723                           ;LCDlib.c: 143: str++;
  6724  11C1  3001               	movlw	1
  6725  11C2  07F4               	addwf	lcd_printString@str,f
  6726  11C3  1803               	skipnc
  6727  11C4  0AF5               	incf	lcd_printString@str+1,f
  6728  11C5  29A3               	goto	l3148
  6729  11C6                     __end_of_lcd_printString:	
  6730                           
  6731                           	psect	text21
  6732  11C6                     __ptext21:	
  6733 ;; *************** function _lcd_char_out *****************
  6734 ;; Defined at:
  6735 ;;		line 120 in file "LCDlib.c"
  6736 ;; Parameters:    Size  Location     Type
  6737 ;;  data            1    wreg     unsigned char 
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;  data            1    3[COMMON] unsigned char 
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  1    wreg      void 
  6742 ;; Registers used:
  6743 ;;		wreg, status,2, status,0, pclath, cstack
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6749 ;;      Params:         0       0       0       0       0
  6750 ;;      Locals:         1       0       0       0       0
  6751 ;;      Temps:          2       0       0       0       0
  6752 ;;      Totals:         3       0       0       0       0
  6753 ;;Total ram usage:        3 bytes
  6754 ;; Hardware stack levels used:    1
  6755 ;; Hardware stack levels required when called:    1
  6756 ;; This function calls:
  6757 ;;		_lcd_out
  6758 ;; This function is called by:
  6759 ;;		_lcd_printString
  6760 ;;		_lcd_simbol
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           
  6765                           ;psect for function _lcd_char_out
  6766  11C6                     _lcd_char_out:	
  6767                           
  6768                           ;incstack = 0
  6769                           ; Regs used in _lcd_char_out: [wreg+status,2+status,0+pclath+cstack]
  6770                           ;lcd_char_out@data stored from wreg
  6771  11C6  00F3               	movwf	lcd_char_out@data
  6772                           
  6773                           ;LCDlib.c: 122: (PORTBbits.RB0=1);
  6774  11C7  1283               	bcf	3,5	;RP0=0, select bank0
  6775  11C8  1303               	bcf	3,6	;RP1=0, select bank0
  6776  11C9  1406               	bsf	6,0	;volatile
  6777                           
  6778                           ;LCDlib.c: 123: lcd_out(data >> 4);
  6779  11CA  0873               	movf	lcd_char_out@data,w
  6780  11CB  00F1               	movwf	??_lcd_char_out
  6781  11CC  3004               	movlw	4
  6782  11CD                     u4415:	
  6783  11CD  1003               	clrc
  6784  11CE  0CF1               	rrf	??_lcd_char_out,f
  6785  11CF  3EFF               	addlw	-1
  6786  11D0  1D03               	skipz
  6787  11D1  29CD               	goto	u4415
  6788  11D2  0871               	movf	??_lcd_char_out,w
  6789  11D3  160A  118A  2147  160A  118A  	fcall	_lcd_out
  6790                           
  6791                           ;LCDlib.c: 124: (PORTBbits.RB2=1);
  6792  11D8  1283               	bcf	3,5	;RP0=0, select bank0
  6793  11D9  1303               	bcf	3,6	;RP1=0, select bank0
  6794  11DA  1506               	bsf	6,2	;volatile
  6795                           
  6796                           ;LCDlib.c: 125: (PORTBbits.RB2=0);
  6797  11DB  1106               	bcf	6,2	;volatile
  6798                           
  6799                           ;LCDlib.c: 126: lcd_out(data & 0x0F);
  6800  11DC  0873               	movf	lcd_char_out@data,w
  6801  11DD  390F               	andlw	15
  6802  11DE  160A  118A  2147  160A  118A  	fcall	_lcd_out
  6803                           
  6804                           ;LCDlib.c: 127: (PORTBbits.RB2=1);
  6805  11E3  1283               	bcf	3,5	;RP0=0, select bank0
  6806  11E4  1303               	bcf	3,6	;RP1=0, select bank0
  6807  11E5  1506               	bsf	6,2	;volatile
  6808                           
  6809                           ;LCDlib.c: 128: (PORTBbits.RB2=0);
  6810  11E6  1106               	bcf	6,2	;volatile
  6811                           
  6812                           ;LCDlib.c: 129: _delay((unsigned long)((4)*(8000000/4000.0)));
  6813  11E7  300B               	movlw	11
  6814  11E8  00F2               	movwf	??_lcd_char_out+1
  6815  11E9  3062               	movlw	98
  6816  11EA  00F1               	movwf	??_lcd_char_out
  6817  11EB                     u6397:	
  6818  11EB  0BF1               	decfsz	??_lcd_char_out,f
  6819  11EC  29EB               	goto	u6397
  6820  11ED  0BF2               	decfsz	??_lcd_char_out+1,f
  6821  11EE  29EB               	goto	u6397
  6822  11EF  0000               	nop
  6823  11F0  0008               	return
  6824  11F1                     __end_of_lcd_char_out:	
  6825                           
  6826                           	psect	text22
  6827  140C                     __ptext22:	
  6828 ;; *************** function _lcd_gotoxy *****************
  6829 ;; Defined at:
  6830 ;;		line 155 in file "LCDlib.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;  x               1    wreg     unsigned char 
  6833 ;;  y               1    4[COMMON] unsigned char 
  6834 ;; Auto vars:     Size  Location     Type
  6835 ;;  x               1    6[COMMON] unsigned char 
  6836 ;;  temp            1    7[COMMON] unsigned char 
  6837 ;; Return value:  Size  Location     Type
  6838 ;;                  1    wreg      void 
  6839 ;; Registers used:
  6840 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6841 ;; Tracked objects:
  6842 ;;		On entry : 0/0
  6843 ;;		On exit  : 0/0
  6844 ;;		Unchanged: 0/0
  6845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6846 ;;      Params:         1       0       0       0       0
  6847 ;;      Locals:         2       0       0       0       0
  6848 ;;      Temps:          1       0       0       0       0
  6849 ;;      Totals:         4       0       0       0       0
  6850 ;;Total ram usage:        4 bytes
  6851 ;; Hardware stack levels used:    1
  6852 ;; Hardware stack levels required when called:    2
  6853 ;; This function calls:
  6854 ;;		_lcd_com
  6855 ;; This function is called by:
  6856 ;;		_lcd_printStringXY
  6857 ;;		_lcd_simbol
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           
  6862                           ;psect for function _lcd_gotoxy
  6863  140C                     _lcd_gotoxy:	
  6864                           
  6865                           ;incstack = 0
  6866                           ; Regs used in _lcd_gotoxy: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6867                           ;lcd_gotoxy@x stored from wreg
  6868  140C  00F6               	movwf	lcd_gotoxy@x
  6869                           
  6870                           ;LCDlib.c: 157: if(x > 39) x = 39;
  6871  140D  3028               	movlw	40
  6872  140E  0276               	subwf	lcd_gotoxy@x,w
  6873  140F  1C03               	skipc
  6874  1410  2C15               	goto	l3156
  6875  1411  3027               	movlw	39
  6876  1412  00F5               	movwf	??_lcd_gotoxy
  6877  1413  0875               	movf	??_lcd_gotoxy,w
  6878  1414  00F6               	movwf	lcd_gotoxy@x
  6879  1415                     l3156:	
  6880                           ;LCDlib.c: 158: if(x < 0) x = 0;
  6881                           
  6882                           
  6883                           ;LCDlib.c: 159: if(y > 3) y = 3;
  6884  1415  3004               	movlw	4
  6885  1416  0274               	subwf	lcd_gotoxy@y,w
  6886  1417  1C03               	skipc
  6887  1418  2C1D               	goto	l72
  6888  1419  3003               	movlw	3
  6889  141A  00F5               	movwf	??_lcd_gotoxy
  6890  141B  0875               	movf	??_lcd_gotoxy,w
  6891  141C  00F4               	movwf	lcd_gotoxy@y
  6892  141D                     l72:	
  6893                           ;LCDlib.c: 160: if(y < 0) y = 0;
  6894                           
  6895                           
  6896                           ;LCDlib.c: 162: char temp = 0x00;
  6897  141D  01F7               	clrf	lcd_gotoxy@temp
  6898                           
  6899                           ;LCDlib.c: 164: (PORTBbits.RB0=0);
  6900  141E  1283               	bcf	3,5	;RP0=0, select bank0
  6901  141F  1303               	bcf	3,6	;RP1=0, select bank0
  6902  1420  1006               	bcf	6,0	;volatile
  6903                           
  6904                           ;LCDlib.c: 166: switch (y)
  6905  1421  2C86               	goto	l3190
  6906  1422                     l3164:	
  6907                           ;LCDlib.c: 167: {
  6908                           ;LCDlib.c: 168: case 0:
  6909                           
  6910                           
  6911                           ;LCDlib.c: 169: {
  6912                           ;LCDlib.c: 170: temp |= (0x80 + x);
  6913  1422  0876               	movf	lcd_gotoxy@x,w
  6914  1423  3E80               	addlw	128
  6915  1424  00F5               	movwf	??_lcd_gotoxy
  6916  1425  0875               	movf	??_lcd_gotoxy,w
  6917  1426  04F7               	iorwf	lcd_gotoxy@temp,f
  6918                           
  6919                           ;LCDlib.c: 171: lcd_com(temp >> 4);
  6920  1427  0877               	movf	lcd_gotoxy@temp,w
  6921  1428  00F5               	movwf	??_lcd_gotoxy
  6922  1429  3004               	movlw	4
  6923  142A                     u5075:	
  6924  142A  1003               	clrc
  6925  142B  0CF5               	rrf	??_lcd_gotoxy,f
  6926  142C  3EFF               	addlw	-1
  6927  142D  1D03               	skipz
  6928  142E  2C2A               	goto	u5075
  6929  142F  0875               	movf	??_lcd_gotoxy,w
  6930  1430  160A  118A  212F  160A  118A  	fcall	_lcd_com
  6931                           
  6932                           ;LCDlib.c: 172: lcd_com(temp & 0x0F);
  6933  1435  0877               	movf	lcd_gotoxy@temp,w
  6934  1436  390F               	andlw	15
  6935  1437  160A  118A  212F   	fcall	_lcd_com
  6936                           
  6937                           ;LCDlib.c: 173: break;
  6938  143A  0008               	return
  6939  143B                     l3170:	
  6940                           ;LCDlib.c: 174: }
  6941                           ;LCDlib.c: 175: case 1:
  6942                           
  6943                           
  6944                           ;LCDlib.c: 176: {
  6945                           ;LCDlib.c: 177: temp |= (0xC0 + x);
  6946  143B  0876               	movf	lcd_gotoxy@x,w
  6947  143C  3EC0               	addlw	192
  6948  143D  00F5               	movwf	??_lcd_gotoxy
  6949  143E  0875               	movf	??_lcd_gotoxy,w
  6950  143F  04F7               	iorwf	lcd_gotoxy@temp,f
  6951                           
  6952                           ;LCDlib.c: 178: lcd_com(temp >> 4);
  6953  1440  0877               	movf	lcd_gotoxy@temp,w
  6954  1441  00F5               	movwf	??_lcd_gotoxy
  6955  1442  3004               	movlw	4
  6956  1443                     u5085:	
  6957  1443  1003               	clrc
  6958  1444  0CF5               	rrf	??_lcd_gotoxy,f
  6959  1445  3EFF               	addlw	-1
  6960  1446  1D03               	skipz
  6961  1447  2C43               	goto	u5085
  6962  1448  0875               	movf	??_lcd_gotoxy,w
  6963  1449  160A  118A  212F  160A  118A  	fcall	_lcd_com
  6964                           
  6965                           ;LCDlib.c: 179: lcd_com(temp & 0x0F);
  6966  144E  0877               	movf	lcd_gotoxy@temp,w
  6967  144F  390F               	andlw	15
  6968  1450  160A  118A  212F   	fcall	_lcd_com
  6969                           
  6970                           ;LCDlib.c: 180: break;
  6971  1453  0008               	return
  6972  1454                     l3176:	
  6973                           ;LCDlib.c: 181: }
  6974                           ;LCDlib.c: 182: case 2:
  6975                           
  6976                           
  6977                           ;LCDlib.c: 183: {
  6978                           ;LCDlib.c: 184: temp |= (0x94 + x);
  6979  1454  0876               	movf	lcd_gotoxy@x,w
  6980  1455  3E94               	addlw	148
  6981  1456  00F5               	movwf	??_lcd_gotoxy
  6982  1457  0875               	movf	??_lcd_gotoxy,w
  6983  1458  04F7               	iorwf	lcd_gotoxy@temp,f
  6984                           
  6985                           ;LCDlib.c: 185: lcd_com(temp >> 4);
  6986  1459  0877               	movf	lcd_gotoxy@temp,w
  6987  145A  00F5               	movwf	??_lcd_gotoxy
  6988  145B  3004               	movlw	4
  6989  145C                     u5095:	
  6990  145C  1003               	clrc
  6991  145D  0CF5               	rrf	??_lcd_gotoxy,f
  6992  145E  3EFF               	addlw	-1
  6993  145F  1D03               	skipz
  6994  1460  2C5C               	goto	u5095
  6995  1461  0875               	movf	??_lcd_gotoxy,w
  6996  1462  160A  118A  212F  160A  118A  	fcall	_lcd_com
  6997                           
  6998                           ;LCDlib.c: 186: lcd_com(temp & 0x0F);
  6999  1467  0877               	movf	lcd_gotoxy@temp,w
  7000  1468  390F               	andlw	15
  7001  1469  160A  118A  212F   	fcall	_lcd_com
  7002                           
  7003                           ;LCDlib.c: 187: break;
  7004  146C  0008               	return
  7005  146D                     l3182:	
  7006                           ;LCDlib.c: 188: }
  7007                           ;LCDlib.c: 189: case 3:
  7008                           
  7009                           
  7010                           ;LCDlib.c: 190: {
  7011                           ;LCDlib.c: 191: temp |= (0xD4 + x);
  7012  146D  0876               	movf	lcd_gotoxy@x,w
  7013  146E  3ED4               	addlw	212
  7014  146F  00F5               	movwf	??_lcd_gotoxy
  7015  1470  0875               	movf	??_lcd_gotoxy,w
  7016  1471  04F7               	iorwf	lcd_gotoxy@temp,f
  7017                           
  7018                           ;LCDlib.c: 192: lcd_com(temp >> 4);
  7019  1472  0877               	movf	lcd_gotoxy@temp,w
  7020  1473  00F5               	movwf	??_lcd_gotoxy
  7021  1474  3004               	movlw	4
  7022  1475                     u5105:	
  7023  1475  1003               	clrc
  7024  1476  0CF5               	rrf	??_lcd_gotoxy,f
  7025  1477  3EFF               	addlw	-1
  7026  1478  1D03               	skipz
  7027  1479  2C75               	goto	u5105
  7028  147A  0875               	movf	??_lcd_gotoxy,w
  7029  147B  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7030                           
  7031                           ;LCDlib.c: 193: lcd_com(temp & 0x0F);
  7032  1480  0877               	movf	lcd_gotoxy@temp,w
  7033  1481  390F               	andlw	15
  7034  1482  160A  118A  212F   	fcall	_lcd_com
  7035                           
  7036                           ;LCDlib.c: 195: }
  7037                           ;LCDlib.c: 196: }
  7038                           
  7039                           ;LCDlib.c: 194: break;
  7040  1485  0008               	return
  7041  1486                     l3190:	
  7042  1486  0874               	movf	lcd_gotoxy@y,w
  7043                           
  7044                           ; Switch size 1, requested type "space"
  7045                           ; Number of cases is 4, Range of values is 0 to 3
  7046                           ; switch strategies available:
  7047                           ; Name         Instructions Cycles
  7048                           ; simple_byte           13     7 (average)
  7049                           ; direct_byte           20     8 (fixed)
  7050                           ; jumptable            260     6 (fixed)
  7051                           ;	Chosen strategy is simple_byte
  7052  1487  3A00               	xorlw	0	; case 0
  7053  1488  1903               	skipnz
  7054  1489  2C22               	goto	l3164
  7055  148A  3A01               	xorlw	1	; case 1
  7056  148B  1903               	skipnz
  7057  148C  2C3B               	goto	l3170
  7058  148D  3A03               	xorlw	3	; case 2
  7059  148E  1903               	skipnz
  7060  148F  2C54               	goto	l3176
  7061  1490  3A01               	xorlw	1	; case 3
  7062  1491  1903               	skipnz
  7063  1492  2C6D               	goto	l3182
  7064  1493  2C94               	goto	l79
  7065  1494                     l79:	
  7066  1494  0008               	return
  7067  1495                     __end_of_lcd_gotoxy:	
  7068                           
  7069                           	psect	text23
  7070  1523                     __ptext23:	
  7071 ;; *************** function _lcd_init *****************
  7072 ;; Defined at:
  7073 ;;		line 79 in file "LCDlib.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;  lcd             1    wreg     unsigned char 
  7076 ;; Auto vars:     Size  Location     Type
  7077 ;;  lcd             1    6[COMMON] unsigned char 
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  1    wreg      void 
  7080 ;; Registers used:
  7081 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7082 ;; Tracked objects:
  7083 ;;		On entry : 0/0
  7084 ;;		On exit  : 0/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7087 ;;      Params:         0       0       0       0       0
  7088 ;;      Locals:         1       0       0       0       0
  7089 ;;      Temps:          2       0       0       0       0
  7090 ;;      Totals:         3       0       0       0       0
  7091 ;;Total ram usage:        3 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; Hardware stack levels required when called:    2
  7094 ;; This function calls:
  7095 ;;		_lcd_com
  7096 ;; This function is called by:
  7097 ;;		_main
  7098 ;; This function uses a non-reentrant model
  7099 ;;
  7100                           
  7101                           
  7102                           ;psect for function _lcd_init
  7103  1523                     _lcd_init:	
  7104                           
  7105                           ;incstack = 0
  7106                           ; Regs used in _lcd_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7107                           ;lcd_init@lcd stored from wreg
  7108  1523  00F6               	movwf	lcd_init@lcd
  7109                           
  7110                           ;LCDlib.c: 81: TRISB=0x00;
  7111  1524  1683               	bsf	3,5	;RP0=1, select bank1
  7112  1525  1303               	bcf	3,6	;RP1=0, select bank1
  7113  1526  0186               	clrf	6	;volatile
  7114                           
  7115                           ;LCDlib.c: 82: TRISC=0x00;
  7116  1527  0187               	clrf	7	;volatile
  7117                           
  7118                           ;LCDlib.c: 84: switch (lcd)
  7119  1528  2D34               	goto	l3574
  7120  1529                     l3564:	
  7121                           ;LCDlib.c: 85: {
  7122                           ;LCDlib.c: 86: case 0: lcd = 0x0C; break;
  7123                           
  7124  1529  300C               	movlw	12
  7125  152A  2D30               	goto	L10
  7126  152B                     l3566:	
  7127                           ;LCDlib.c: 87: case 1: lcd = 0x0D; break;
  7128                           
  7129  152B  300D               	movlw	13
  7130  152C  2D30               	goto	L10
  7131  152D                     l3568:	
  7132                           ;LCDlib.c: 88: case 2: lcd = 0x0E; break;
  7133                           
  7134  152D  300E               	movlw	14
  7135  152E  2D30               	goto	L10
  7136  152F                     l3570:	
  7137                           ;LCDlib.c: 89: case 3: lcd = 0x0F; break;
  7138                           
  7139  152F  300F               	movlw	15
  7140  1530                     L10:	
  7141  1530  00F4               	movwf	??_lcd_init
  7142  1531  0874               	movf	??_lcd_init,w
  7143  1532  00F6               	movwf	lcd_init@lcd
  7144                           
  7145                           ;LCDlib.c: 90: }
  7146  1533  2D42               	goto	l3576
  7147  1534                     l3574:	
  7148  1534  0876               	movf	lcd_init@lcd,w
  7149                           
  7150                           ; Switch size 1, requested type "space"
  7151                           ; Number of cases is 4, Range of values is 0 to 3
  7152                           ; switch strategies available:
  7153                           ; Name         Instructions Cycles
  7154                           ; simple_byte           13     7 (average)
  7155                           ; direct_byte           20     8 (fixed)
  7156                           ; jumptable            260     6 (fixed)
  7157                           ;	Chosen strategy is simple_byte
  7158  1535  3A00               	xorlw	0	; case 0
  7159  1536  1903               	skipnz
  7160  1537  2D29               	goto	l3564
  7161  1538  3A01               	xorlw	1	; case 1
  7162  1539  1903               	skipnz
  7163  153A  2D2B               	goto	l3566
  7164  153B  3A03               	xorlw	3	; case 2
  7165  153C  1903               	skipnz
  7166  153D  2D2D               	goto	l3568
  7167  153E  3A01               	xorlw	1	; case 3
  7168  153F  1903               	skipnz
  7169  1540  2D2F               	goto	l3570
  7170  1541  2D42               	goto	l3576
  7171  1542                     l3576:	
  7172                           
  7173                           ;LCDlib.c: 92: _delay((unsigned long)((20)*(8000000/4000.0)));
  7174  1542  3034               	movlw	52
  7175  1543  00F5               	movwf	??_lcd_init+1
  7176  1544  30F1               	movlw	241
  7177  1545  00F4               	movwf	??_lcd_init
  7178  1546                     u6407:	
  7179  1546  0BF4               	decfsz	??_lcd_init,f
  7180  1547  2D46               	goto	u6407
  7181  1548  0BF5               	decfsz	??_lcd_init+1,f
  7182  1549  2D46               	goto	u6407
  7183  154A  2D4B               	nop2
  7184                           
  7185                           ;LCDlib.c: 94: lcd_com(0x03);
  7186  154B  3003               	movlw	3
  7187  154C  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7188                           
  7189                           ;LCDlib.c: 95: _delay((unsigned long)((40)*(8000000/4000000.0)));
  7190  1551  301A               	movlw	26
  7191  1552  00F4               	movwf	??_lcd_init
  7192  1553                     u6417:	
  7193  1553  0BF4               	decfsz	??_lcd_init,f
  7194  1554  2D53               	goto	u6417
  7195  1555  0000               	nop
  7196                           
  7197                           ;LCDlib.c: 96: lcd_com(0x03);
  7198  1556  3003               	movlw	3
  7199  1557  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7200                           
  7201                           ;LCDlib.c: 97: _delay((unsigned long)((40)*(8000000/4000000.0)));
  7202  155C  301A               	movlw	26
  7203  155D  00F4               	movwf	??_lcd_init
  7204  155E                     u6427:	
  7205  155E  0BF4               	decfsz	??_lcd_init,f
  7206  155F  2D5E               	goto	u6427
  7207  1560  0000               	nop
  7208                           
  7209                           ;LCDlib.c: 98: lcd_com(0x03);
  7210  1561  3003               	movlw	3
  7211  1562  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7212                           
  7213                           ;LCDlib.c: 99: _delay((unsigned long)((40)*(8000000/4000000.0)));
  7214  1567  301A               	movlw	26
  7215  1568  00F4               	movwf	??_lcd_init
  7216  1569                     u6437:	
  7217  1569  0BF4               	decfsz	??_lcd_init,f
  7218  156A  2D69               	goto	u6437
  7219  156B  0000               	nop
  7220                           
  7221                           ;LCDlib.c: 100: lcd_com(0x02);
  7222  156C  3002               	movlw	2
  7223  156D  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7224                           
  7225                           ;LCDlib.c: 101: _delay((unsigned long)((40)*(8000000/4000000.0)));
  7226  1572  301A               	movlw	26
  7227  1573  00F4               	movwf	??_lcd_init
  7228  1574                     u6447:	
  7229  1574  0BF4               	decfsz	??_lcd_init,f
  7230  1575  2D74               	goto	u6447
  7231  1576  0000               	nop
  7232                           
  7233                           ;LCDlib.c: 102: lcd_com(0x02);
  7234  1577  3002               	movlw	2
  7235  1578  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7236                           
  7237                           ;LCDlib.c: 103: lcd_com(0x08);
  7238  157D  3008               	movlw	8
  7239  157E  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7240                           
  7241                           ;LCDlib.c: 104: lcd_com(0x00);
  7242  1583  3000               	movlw	0
  7243  1584  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7244                           
  7245                           ;LCDlib.c: 105: lcd_com(0x08);
  7246  1589  3008               	movlw	8
  7247  158A  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7248                           
  7249                           ;LCDlib.c: 106: lcd_com(0x00);
  7250  158F  3000               	movlw	0
  7251  1590  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7252                           
  7253                           ;LCDlib.c: 107: lcd_com(0x01);
  7254  1595  3001               	movlw	1
  7255  1596  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7256                           
  7257                           ;LCDlib.c: 108: lcd_com(0x00);
  7258  159B  3000               	movlw	0
  7259  159C  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7260                           
  7261                           ;LCDlib.c: 109: lcd_com(0x06);
  7262  15A1  3006               	movlw	6
  7263  15A2  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7264                           
  7265                           ;LCDlib.c: 110: lcd_com(0x00);
  7266  15A7  3000               	movlw	0
  7267  15A8  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7268                           
  7269                           ;LCDlib.c: 111: lcd_com(lcd);
  7270  15AD  0876               	movf	lcd_init@lcd,w
  7271  15AE  160A  118A  212F   	fcall	_lcd_com
  7272  15B1  0008               	return
  7273  15B2                     __end_of_lcd_init:	
  7274                           
  7275                           	psect	text24
  7276  10CA                     __ptext24:	
  7277 ;; *************** function _lcd_clear *****************
  7278 ;; Defined at:
  7279 ;;		line 211 in file "LCDlib.c"
  7280 ;; Parameters:    Size  Location     Type
  7281 ;;		None
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;		None
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  1    wreg      void 
  7286 ;; Registers used:
  7287 ;;		wreg, status,2, status,0, pclath, cstack
  7288 ;; Tracked objects:
  7289 ;;		On entry : 0/0
  7290 ;;		On exit  : 0/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7293 ;;      Params:         0       0       0       0       0
  7294 ;;      Locals:         0       0       0       0       0
  7295 ;;      Temps:          0       0       0       0       0
  7296 ;;      Totals:         0       0       0       0       0
  7297 ;;Total ram usage:        0 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; Hardware stack levels required when called:    2
  7300 ;; This function calls:
  7301 ;;		_lcd_com
  7302 ;; This function is called by:
  7303 ;;		_main
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           
  7308                           ;psect for function _lcd_clear
  7309  10CA                     _lcd_clear:	
  7310                           
  7311                           ;LCDlib.c: 213: lcd_com(0x00);
  7312                           
  7313                           ;incstack = 0
  7314                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  7315  10CA  3000               	movlw	0
  7316  10CB  160A  118A  212F  160A  118A  	fcall	_lcd_com
  7317                           
  7318                           ;LCDlib.c: 214: lcd_com(0x01);
  7319  10D0  3001               	movlw	1
  7320  10D1  160A  118A  212F   	fcall	_lcd_com
  7321  10D4  0008               	return
  7322  10D5                     __end_of_lcd_clear:	
  7323                           
  7324                           	psect	text25
  7325  112F                     __ptext25:	
  7326 ;; *************** function _lcd_com *****************
  7327 ;; Defined at:
  7328 ;;		line 59 in file "LCDlib.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;  com             1    wreg     unsigned char 
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;  com             1    3[COMMON] unsigned char 
  7333 ;; Return value:  Size  Location     Type
  7334 ;;                  1    wreg      void 
  7335 ;; Registers used:
  7336 ;;		wreg, status,2, status,0, pclath, cstack
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7342 ;;      Params:         0       0       0       0       0
  7343 ;;      Locals:         1       0       0       0       0
  7344 ;;      Temps:          2       0       0       0       0
  7345 ;;      Totals:         3       0       0       0       0
  7346 ;;Total ram usage:        3 bytes
  7347 ;; Hardware stack levels used:    1
  7348 ;; Hardware stack levels required when called:    1
  7349 ;; This function calls:
  7350 ;;		_lcd_out
  7351 ;; This function is called by:
  7352 ;;		_lcd_init
  7353 ;;		_lcd_gotoxy
  7354 ;;		_lcd_clear
  7355 ;;		_lcd_simbol
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           
  7360                           ;psect for function _lcd_com
  7361  112F                     _lcd_com:	
  7362                           
  7363                           ;incstack = 0
  7364                           ; Regs used in _lcd_com: [wreg+status,2+status,0+pclath+cstack]
  7365                           ;lcd_com@com stored from wreg
  7366  112F  00F3               	movwf	lcd_com@com
  7367                           
  7368                           ;LCDlib.c: 61: (PORTBbits.RB0=0);
  7369  1130  1283               	bcf	3,5	;RP0=0, select bank0
  7370  1131  1303               	bcf	3,6	;RP1=0, select bank0
  7371  1132  1006               	bcf	6,0	;volatile
  7372                           
  7373                           ;LCDlib.c: 62: lcd_out(com);
  7374  1133  0873               	movf	lcd_com@com,w
  7375  1134  160A  118A  2147  160A  118A  	fcall	_lcd_out
  7376                           
  7377                           ;LCDlib.c: 63: (PORTBbits.RB2=1);
  7378  1139  1283               	bcf	3,5	;RP0=0, select bank0
  7379  113A  1303               	bcf	3,6	;RP1=0, select bank0
  7380  113B  1506               	bsf	6,2	;volatile
  7381                           
  7382                           ;LCDlib.c: 64: (PORTBbits.RB2=0);
  7383  113C  1106               	bcf	6,2	;volatile
  7384                           
  7385                           ;LCDlib.c: 65: _delay((unsigned long)((4)*(8000000/4000.0)));
  7386  113D  300B               	movlw	11
  7387  113E  00F2               	movwf	??_lcd_com+1
  7388  113F  3062               	movlw	98
  7389  1140  00F1               	movwf	??_lcd_com
  7390  1141                     u6457:	
  7391  1141  0BF1               	decfsz	??_lcd_com,f
  7392  1142  2941               	goto	u6457
  7393  1143  0BF2               	decfsz	??_lcd_com+1,f
  7394  1144  2941               	goto	u6457
  7395  1145  0000               	nop
  7396  1146  0008               	return
  7397  1147                     __end_of_lcd_com:	
  7398                           
  7399                           	psect	text26
  7400  1147                     __ptext26:	
  7401 ;; *************** function _lcd_out *****************
  7402 ;; Defined at:
  7403 ;;		line 9 in file "LCDlib.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;  data            1    wreg     unsigned char 
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;  data            1    0[COMMON] unsigned char 
  7408 ;; Return value:  Size  Location     Type
  7409 ;;                  1    wreg      void 
  7410 ;; Registers used:
  7411 ;;		wreg
  7412 ;; Tracked objects:
  7413 ;;		On entry : 0/0
  7414 ;;		On exit  : 0/0
  7415 ;;		Unchanged: 0/0
  7416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7417 ;;      Params:         0       0       0       0       0
  7418 ;;      Locals:         1       0       0       0       0
  7419 ;;      Temps:          0       0       0       0       0
  7420 ;;      Totals:         1       0       0       0       0
  7421 ;;Total ram usage:        1 bytes
  7422 ;; Hardware stack levels used:    1
  7423 ;; This function calls:
  7424 ;;		Nothing
  7425 ;; This function is called by:
  7426 ;;		_lcd_com
  7427 ;;		_lcd_char_out
  7428 ;; This function uses a non-reentrant model
  7429 ;;
  7430                           
  7431                           
  7432                           ;psect for function _lcd_out
  7433  1147                     _lcd_out:	
  7434                           
  7435                           ;incstack = 0
  7436                           ; Regs used in _lcd_out: [wreg]
  7437                           ;lcd_out@data stored from wreg
  7438  1147  00F0               	movwf	lcd_out@data
  7439                           
  7440                           ;LCDlib.c: 11: if(data&0x01)
  7441  1148  1C70               	btfss	lcd_out@data,0
  7442  1149  294E               	goto	l37
  7443                           
  7444                           ;LCDlib.c: 12: {
  7445                           ;LCDlib.c: 13: PORTCbits.RC4=1;
  7446  114A  1283               	bcf	3,5	;RP0=0, select bank0
  7447  114B  1303               	bcf	3,6	;RP1=0, select bank0
  7448  114C  1607               	bsf	7,4	;volatile
  7449                           
  7450                           ;LCDlib.c: 15: }
  7451  114D  2951               	goto	l38
  7452  114E                     l37:	
  7453                           
  7454                           ;LCDlib.c: 16: else
  7455                           ;LCDlib.c: 17: {
  7456                           ;LCDlib.c: 18: PORTCbits.RC4=0;
  7457  114E  1283               	bcf	3,5	;RP0=0, select bank0
  7458  114F  1303               	bcf	3,6	;RP1=0, select bank0
  7459  1150  1207               	bcf	7,4	;volatile
  7460  1151                     l38:	
  7461                           
  7462                           ;LCDlib.c: 19: }
  7463                           ;LCDlib.c: 21: if(data&0x02)
  7464  1151  1CF0               	btfss	lcd_out@data,1
  7465  1152  2955               	goto	l39
  7466                           
  7467                           ;LCDlib.c: 22: {
  7468                           ;LCDlib.c: 23: PORTCbits.RC5=1;
  7469  1153  1687               	bsf	7,5	;volatile
  7470                           
  7471                           ;LCDlib.c: 25: }
  7472  1154  2956               	goto	l40
  7473  1155                     l39:	
  7474                           
  7475                           ;LCDlib.c: 26: else
  7476                           ;LCDlib.c: 27: {
  7477                           ;LCDlib.c: 28: PORTCbits.RC5=0;
  7478  1155  1287               	bcf	7,5	;volatile
  7479  1156                     l40:	
  7480                           
  7481                           ;LCDlib.c: 29: }
  7482                           ;LCDlib.c: 31: if(data&0x04)
  7483  1156  1D70               	btfss	lcd_out@data,2
  7484  1157  295A               	goto	l41
  7485                           
  7486                           ;LCDlib.c: 32: {
  7487                           ;LCDlib.c: 33: PORTCbits.RC6=1;
  7488  1158  1707               	bsf	7,6	;volatile
  7489                           
  7490                           ;LCDlib.c: 35: }
  7491  1159  295B               	goto	l42
  7492  115A                     l41:	
  7493                           
  7494                           ;LCDlib.c: 36: else
  7495                           ;LCDlib.c: 37: {
  7496                           ;LCDlib.c: 38: PORTCbits.RC6=0;
  7497  115A  1307               	bcf	7,6	;volatile
  7498  115B                     l42:	
  7499                           
  7500                           ;LCDlib.c: 39: }
  7501                           ;LCDlib.c: 41: if(data&0x08)
  7502  115B  1DF0               	btfss	lcd_out@data,3
  7503  115C  295F               	goto	l43
  7504                           
  7505                           ;LCDlib.c: 42: {
  7506                           ;LCDlib.c: 43: PORTCbits.RC7=1;
  7507  115D  1787               	bsf	7,7	;volatile
  7508                           
  7509                           ;LCDlib.c: 45: }
  7510  115E  0008               	return
  7511  115F                     l43:	
  7512                           
  7513                           ;LCDlib.c: 46: else
  7514                           ;LCDlib.c: 47: {
  7515                           ;LCDlib.c: 48: PORTCbits.RC7=0;
  7516  115F  1387               	bcf	7,7	;volatile
  7517  1160  0008               	return
  7518  1161                     __end_of_lcd_out:	
  7519                           
  7520                           	psect	text27
  7521  1299                     __ptext27:	
  7522 ;; *************** function _Get_Voltage *****************
  7523 ;; Defined at:
  7524 ;;		line 66 in file "ADClib.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;  channel         1    wreg     unsigned char 
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;  channel         1   45[BANK0 ] unsigned char 
  7529 ;;  voltage         3   42[BANK0 ] float 
  7530 ;; Return value:  Size  Location     Type
  7531 ;;                  3   38[BANK0 ] float 
  7532 ;; Registers used:
  7533 ;;		wreg, status,2, status,0, pclath, cstack
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7539 ;;      Params:         0       4       0       0       0
  7540 ;;      Locals:         0       4       0       0       0
  7541 ;;      Temps:          0       0       0       0       0
  7542 ;;      Totals:         0       8       0       0       0
  7543 ;;Total ram usage:        8 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:    2
  7546 ;; This function calls:
  7547 ;;		_ADC_Read
  7548 ;;		___ftdiv
  7549 ;;		___ftmul
  7550 ;;		___lwtoft
  7551 ;; This function is called by:
  7552 ;;		_main
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           
  7557                           ;psect for function _Get_Voltage
  7558  1299                     _Get_Voltage:	
  7559                           
  7560                           ;incstack = 0
  7561                           ; Regs used in _Get_Voltage: [wreg+status,2+status,0+pclath+cstack]
  7562                           ;Get_Voltage@channel stored from wreg
  7563  1299  1283               	bcf	3,5	;RP0=0, select bank0
  7564  129A  1303               	bcf	3,6	;RP1=0, select bank0
  7565  129B  00CD               	movwf	Get_Voltage@channel
  7566                           
  7567                           ;ADClib.c: 68: float voltage=((ADC_Read(channel)*Vref)/1024.0);
  7568  129C  3000               	movlw	0
  7569  129D  00B6               	movwf	___ftdiv@f2
  7570  129E  3080               	movlw	128
  7571  129F  00B7               	movwf	___ftdiv@f2+1
  7572  12A0  3044               	movlw	68
  7573  12A1  00B8               	movwf	___ftdiv@f2+2
  7574  12A2  1683               	bsf	3,5	;RP0=1, select bank1
  7575  12A3  1303               	bcf	3,6	;RP1=0, select bank1
  7576  12A4  083B               	movf	_Vref^(0+128),w
  7577  12A5  1283               	bcf	3,5	;RP0=0, select bank0
  7578  12A6  1303               	bcf	3,6	;RP1=0, select bank0
  7579  12A7  00A6               	movwf	___ftmul@f1
  7580  12A8  1683               	bsf	3,5	;RP0=1, select bank1
  7581  12A9  1303               	bcf	3,6	;RP1=0, select bank1
  7582  12AA  083C               	movf	(_Vref+1)^(0+128),w
  7583  12AB  1283               	bcf	3,5	;RP0=0, select bank0
  7584  12AC  1303               	bcf	3,6	;RP1=0, select bank0
  7585  12AD  00A7               	movwf	___ftmul@f1+1
  7586  12AE  1683               	bsf	3,5	;RP0=1, select bank1
  7587  12AF  1303               	bcf	3,6	;RP1=0, select bank1
  7588  12B0  083D               	movf	(_Vref+2)^(0+128),w
  7589  12B1  1283               	bcf	3,5	;RP0=0, select bank0
  7590  12B2  1303               	bcf	3,6	;RP1=0, select bank0
  7591  12B3  00A8               	movwf	___ftmul@f1+2
  7592  12B4  084D               	movf	Get_Voltage@channel,w
  7593  12B5  160A  118A  221C  160A  118A  	fcall	_ADC_Read
  7594  12BA  0871               	movf	?_ADC_Read+1,w
  7595  12BB  00F9               	movwf	___lwtoft@c+1
  7596  12BC  0870               	movf	?_ADC_Read,w
  7597  12BD  00F8               	movwf	___lwtoft@c
  7598  12BE  160A  118A  211B  160A  118A  	fcall	___lwtoft
  7599  12C3  0878               	movf	?___lwtoft,w
  7600  12C4  1283               	bcf	3,5	;RP0=0, select bank0
  7601  12C5  1303               	bcf	3,6	;RP1=0, select bank0
  7602  12C6  00A9               	movwf	___ftmul@f2
  7603  12C7  0879               	movf	?___lwtoft+1,w
  7604  12C8  00AA               	movwf	___ftmul@f2+1
  7605  12C9  087A               	movf	?___lwtoft+2,w
  7606  12CA  00AB               	movwf	___ftmul@f2+2
  7607  12CB  160A  118A  272D  160A  118A  	fcall	___ftmul
  7608  12D0  1283               	bcf	3,5	;RP0=0, select bank0
  7609  12D1  1303               	bcf	3,6	;RP1=0, select bank0
  7610  12D2  0826               	movf	?___ftmul,w
  7611  12D3  00B9               	movwf	___ftdiv@f1
  7612  12D4  0827               	movf	?___ftmul+1,w
  7613  12D5  00BA               	movwf	___ftdiv@f1+1
  7614  12D6  0828               	movf	?___ftmul+2,w
  7615  12D7  00BB               	movwf	___ftdiv@f1+2
  7616  12D8  160A  118A  25B2   	fcall	___ftdiv
  7617  12DB  1283               	bcf	3,5	;RP0=0, select bank0
  7618  12DC  1303               	bcf	3,6	;RP1=0, select bank0
  7619  12DD  0836               	movf	?___ftdiv,w
  7620  12DE  00CA               	movwf	Get_Voltage@voltage
  7621  12DF  0837               	movf	?___ftdiv+1,w
  7622  12E0  00CB               	movwf	Get_Voltage@voltage+1
  7623  12E1  0838               	movf	?___ftdiv+2,w
  7624  12E2  00CC               	movwf	Get_Voltage@voltage+2
  7625                           
  7626                           ;ADClib.c: 70: return voltage;
  7627  12E3  084A               	movf	Get_Voltage@voltage,w
  7628  12E4  00C6               	movwf	?_Get_Voltage
  7629  12E5  084B               	movf	Get_Voltage@voltage+1,w
  7630  12E6  00C7               	movwf	?_Get_Voltage+1
  7631  12E7  084C               	movf	Get_Voltage@voltage+2,w
  7632  12E8  00C8               	movwf	?_Get_Voltage+2
  7633  12E9  0008               	return
  7634  12EA                     __end_of_Get_Voltage:	
  7635                           
  7636                           	psect	text28
  7637  111B                     __ptext28:	
  7638 ;; *************** function ___lwtoft *****************
  7639 ;; Defined at:
  7640 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwtoft.c"
  7641 ;; Parameters:    Size  Location     Type
  7642 ;;  c               2    8[COMMON] unsigned int 
  7643 ;; Auto vars:     Size  Location     Type
  7644 ;;		None
  7645 ;; Return value:  Size  Location     Type
  7646 ;;                  3    8[COMMON] float 
  7647 ;; Registers used:
  7648 ;;		wreg, status,2, status,0, pclath, cstack
  7649 ;; Tracked objects:
  7650 ;;		On entry : 0/0
  7651 ;;		On exit  : 0/0
  7652 ;;		Unchanged: 0/0
  7653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7654 ;;      Params:         3       0       0       0       0
  7655 ;;      Locals:         0       0       0       0       0
  7656 ;;      Temps:          1       0       0       0       0
  7657 ;;      Totals:         4       0       0       0       0
  7658 ;;Total ram usage:        4 bytes
  7659 ;; Hardware stack levels used:    1
  7660 ;; Hardware stack levels required when called:    1
  7661 ;; This function calls:
  7662 ;;		___ftpack
  7663 ;; This function is called by:
  7664 ;;		_Get_Voltage
  7665 ;; This function uses a non-reentrant model
  7666 ;;
  7667                           
  7668                           
  7669                           ;psect for function ___lwtoft
  7670  111B                     ___lwtoft:	
  7671                           
  7672                           ;incstack = 0
  7673                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  7674  111B  0878               	movf	___lwtoft@c,w
  7675  111C  00F0               	movwf	___ftpack@arg
  7676  111D  0879               	movf	___lwtoft@c+1,w
  7677  111E  00F1               	movwf	___ftpack@arg+1
  7678  111F  01F2               	clrf	___ftpack@arg+2
  7679  1120  308E               	movlw	142
  7680  1121  00FB               	movwf	??___lwtoft
  7681  1122  087B               	movf	??___lwtoft,w
  7682  1123  00F3               	movwf	___ftpack@exp
  7683  1124  01F4               	clrf	___ftpack@sign
  7684  1125  160A  118A  23A0   	fcall	___ftpack
  7685  1128  0870               	movf	?___ftpack,w
  7686  1129  00F8               	movwf	?___lwtoft
  7687  112A  0871               	movf	?___ftpack+1,w
  7688  112B  00F9               	movwf	?___lwtoft+1
  7689  112C  0872               	movf	?___ftpack+2,w
  7690  112D  00FA               	movwf	?___lwtoft+2
  7691  112E  0008               	return
  7692  112F                     __end_of___lwtoft:	
  7693                           
  7694                           	psect	text29
  7695  172D                     __ptext29:	
  7696 ;; *************** function ___ftmul *****************
  7697 ;; Defined at:
  7698 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;  f1              3    6[BANK0 ] float 
  7701 ;;  f2              3    9[BANK0 ] float 
  7702 ;; Auto vars:     Size  Location     Type
  7703 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
  7704 ;;  sign            1   21[BANK0 ] unsigned char 
  7705 ;;  cntr            1   20[BANK0 ] unsigned char 
  7706 ;;  exp             1   16[BANK0 ] unsigned char 
  7707 ;; Return value:  Size  Location     Type
  7708 ;;                  3    6[BANK0 ] float 
  7709 ;; Registers used:
  7710 ;;		wreg, status,2, status,0, pclath, cstack
  7711 ;; Tracked objects:
  7712 ;;		On entry : 0/0
  7713 ;;		On exit  : 0/0
  7714 ;;		Unchanged: 0/0
  7715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7716 ;;      Params:         0       6       0       0       0
  7717 ;;      Locals:         0       6       0       0       0
  7718 ;;      Temps:          0       4       0       0       0
  7719 ;;      Totals:         0      16       0       0       0
  7720 ;;Total ram usage:       16 bytes
  7721 ;; Hardware stack levels used:    1
  7722 ;; Hardware stack levels required when called:    1
  7723 ;; This function calls:
  7724 ;;		___ftpack
  7725 ;; This function is called by:
  7726 ;;		_Get_Voltage
  7727 ;;		_fround
  7728 ;;		_scale
  7729 ;;		_sprintf
  7730 ;; This function uses a non-reentrant model
  7731 ;;
  7732                           
  7733                           
  7734                           ;psect for function ___ftmul
  7735  172D                     ___ftmul:	
  7736                           
  7737                           ;incstack = 0
  7738                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7739  172D  1283               	bcf	3,5	;RP0=0, select bank0
  7740  172E  1303               	bcf	3,6	;RP1=0, select bank0
  7741  172F  0826               	movf	___ftmul@f1,w
  7742  1730  00AC               	movwf	??___ftmul
  7743  1731  0827               	movf	___ftmul@f1+1,w
  7744  1732  00AD               	movwf	??___ftmul+1
  7745  1733  0828               	movf	___ftmul@f1+2,w
  7746  1734  00AE               	movwf	??___ftmul+2
  7747  1735  1003               	clrc
  7748  1736  0D2D               	rlf	??___ftmul+1,w
  7749  1737  0D2E               	rlf	??___ftmul+2,w
  7750  1738  00AF               	movwf	??___ftmul+3
  7751  1739  082F               	movf	??___ftmul+3,w
  7752  173A  00B0               	movwf	___ftmul@exp
  7753  173B  0830               	movf	___ftmul@exp,w
  7754  173C  1D03               	btfss	3,2
  7755  173D  2F45               	goto	l3082
  7756  173E  3000               	movlw	0
  7757  173F  00A6               	movwf	?___ftmul
  7758  1740  3000               	movlw	0
  7759  1741  00A7               	movwf	?___ftmul+1
  7760  1742  3000               	movlw	0
  7761  1743  00A8               	movwf	?___ftmul+2
  7762  1744  0008               	return
  7763  1745                     l3082:	
  7764  1745  0829               	movf	___ftmul@f2,w
  7765  1746  00AC               	movwf	??___ftmul
  7766  1747  082A               	movf	___ftmul@f2+1,w
  7767  1748  00AD               	movwf	??___ftmul+1
  7768  1749  082B               	movf	___ftmul@f2+2,w
  7769  174A  00AE               	movwf	??___ftmul+2
  7770  174B  1003               	clrc
  7771  174C  0D2D               	rlf	??___ftmul+1,w
  7772  174D  0D2E               	rlf	??___ftmul+2,w
  7773  174E  00AF               	movwf	??___ftmul+3
  7774  174F  082F               	movf	??___ftmul+3,w
  7775  1750  00B5               	movwf	___ftmul@sign
  7776  1751  0835               	movf	___ftmul@sign,w
  7777  1752  1D03               	btfss	3,2
  7778  1753  2F5B               	goto	l3088
  7779  1754  3000               	movlw	0
  7780  1755  00A6               	movwf	?___ftmul
  7781  1756  3000               	movlw	0
  7782  1757  00A7               	movwf	?___ftmul+1
  7783  1758  3000               	movlw	0
  7784  1759  00A8               	movwf	?___ftmul+2
  7785  175A  0008               	return
  7786  175B                     l3088:	
  7787  175B  0835               	movf	___ftmul@sign,w
  7788  175C  3E7B               	addlw	123
  7789  175D  00AC               	movwf	??___ftmul
  7790  175E  082C               	movf	??___ftmul,w
  7791  175F  07B0               	addwf	___ftmul@exp,f
  7792  1760  0826               	movf	___ftmul@f1,w
  7793  1761  00AC               	movwf	??___ftmul
  7794  1762  0827               	movf	___ftmul@f1+1,w
  7795  1763  00AD               	movwf	??___ftmul+1
  7796  1764  0828               	movf	___ftmul@f1+2,w
  7797  1765  00AE               	movwf	??___ftmul+2
  7798  1766  3010               	movlw	16
  7799  1767                     u4895:	
  7800  1767  1003               	clrc
  7801  1768  0CAE               	rrf	??___ftmul+2,f
  7802  1769  0CAD               	rrf	??___ftmul+1,f
  7803  176A  0CAC               	rrf	??___ftmul,f
  7804  176B  3EFF               	addlw	-1
  7805  176C  1D03               	skipz
  7806  176D  2F67               	goto	u4895
  7807  176E  082C               	movf	??___ftmul,w
  7808  176F  00AF               	movwf	??___ftmul+3
  7809  1770  082F               	movf	??___ftmul+3,w
  7810  1771  00B5               	movwf	___ftmul@sign
  7811  1772  0829               	movf	___ftmul@f2,w
  7812  1773  00AC               	movwf	??___ftmul
  7813  1774  082A               	movf	___ftmul@f2+1,w
  7814  1775  00AD               	movwf	??___ftmul+1
  7815  1776  082B               	movf	___ftmul@f2+2,w
  7816  1777  00AE               	movwf	??___ftmul+2
  7817  1778  3010               	movlw	16
  7818  1779                     u4905:	
  7819  1779  1003               	clrc
  7820  177A  0CAE               	rrf	??___ftmul+2,f
  7821  177B  0CAD               	rrf	??___ftmul+1,f
  7822  177C  0CAC               	rrf	??___ftmul,f
  7823  177D  3EFF               	addlw	-1
  7824  177E  1D03               	skipz
  7825  177F  2F79               	goto	u4905
  7826  1780  082C               	movf	??___ftmul,w
  7827  1781  00AF               	movwf	??___ftmul+3
  7828  1782  082F               	movf	??___ftmul+3,w
  7829  1783  06B5               	xorwf	___ftmul@sign,f
  7830  1784  3080               	movlw	128
  7831  1785  00AC               	movwf	??___ftmul
  7832  1786  082C               	movf	??___ftmul,w
  7833  1787  05B5               	andwf	___ftmul@sign,f
  7834  1788  17A7               	bsf	___ftmul@f1+1,7
  7835  1789  17AA               	bsf	___ftmul@f2+1,7
  7836  178A  30FF               	movlw	255
  7837  178B  05A9               	andwf	___ftmul@f2,f
  7838  178C  30FF               	movlw	255
  7839  178D  05AA               	andwf	___ftmul@f2+1,f
  7840  178E  3000               	movlw	0
  7841  178F  05AB               	andwf	___ftmul@f2+2,f
  7842  1790  3000               	movlw	0
  7843  1791  00B1               	movwf	___ftmul@f3_as_product
  7844  1792  3000               	movlw	0
  7845  1793  00B2               	movwf	___ftmul@f3_as_product+1
  7846  1794  3000               	movlw	0
  7847  1795  00B3               	movwf	___ftmul@f3_as_product+2
  7848  1796  3007               	movlw	7
  7849  1797  00AC               	movwf	??___ftmul
  7850  1798  082C               	movf	??___ftmul,w
  7851  1799  00B4               	movwf	___ftmul@cntr
  7852  179A                     l3100:	
  7853  179A  1C26               	btfss	___ftmul@f1,0
  7854  179B  2FAA               	goto	l3104
  7855  179C  0829               	movf	___ftmul@f2,w
  7856  179D  07B1               	addwf	___ftmul@f3_as_product,f
  7857  179E  082A               	movf	___ftmul@f2+1,w
  7858  179F  1103               	clrz
  7859  17A0  1803               	skipnc
  7860  17A1  0A2A               	incf	___ftmul@f2+1,w
  7861  17A2  1D03               	btfss	3,2
  7862  17A3  07B2               	addwf	___ftmul@f3_as_product+1,f
  7863  17A4  082B               	movf	___ftmul@f2+2,w
  7864  17A5  1103               	clrz
  7865  17A6  1803               	skipnc
  7866  17A7  0A2B               	incf	___ftmul@f2+2,w
  7867  17A8  1D03               	btfss	3,2
  7868  17A9  07B3               	addwf	___ftmul@f3_as_product+2,f
  7869  17AA                     l3104:	
  7870  17AA  3001               	movlw	1
  7871  17AB                     u4935:	
  7872  17AB  1003               	clrc
  7873  17AC  0CA8               	rrf	___ftmul@f1+2,f
  7874  17AD  0CA7               	rrf	___ftmul@f1+1,f
  7875  17AE  0CA6               	rrf	___ftmul@f1,f
  7876  17AF  3EFF               	addlw	-1
  7877  17B0  1D03               	skipz
  7878  17B1  2FAB               	goto	u4935
  7879  17B2  3001               	movlw	1
  7880  17B3                     u4945:	
  7881  17B3  1003               	clrc
  7882  17B4  0DA9               	rlf	___ftmul@f2,f
  7883  17B5  0DAA               	rlf	___ftmul@f2+1,f
  7884  17B6  0DAB               	rlf	___ftmul@f2+2,f
  7885  17B7  3EFF               	addlw	-1
  7886  17B8  1D03               	skipz
  7887  17B9  2FB3               	goto	u4945
  7888  17BA  3001               	movlw	1
  7889  17BB  02B4               	subwf	___ftmul@cntr,f
  7890  17BC  1D03               	btfss	3,2
  7891  17BD  2F9A               	goto	l3100
  7892  17BE  3009               	movlw	9
  7893  17BF  00AC               	movwf	??___ftmul
  7894  17C0  082C               	movf	??___ftmul,w
  7895  17C1  00B4               	movwf	___ftmul@cntr
  7896  17C2                     l3112:	
  7897  17C2  1C26               	btfss	___ftmul@f1,0
  7898  17C3  2FD2               	goto	l3116
  7899  17C4  0829               	movf	___ftmul@f2,w
  7900  17C5  07B1               	addwf	___ftmul@f3_as_product,f
  7901  17C6  082A               	movf	___ftmul@f2+1,w
  7902  17C7  1103               	clrz
  7903  17C8  1803               	skipnc
  7904  17C9  0A2A               	incf	___ftmul@f2+1,w
  7905  17CA  1D03               	btfss	3,2
  7906  17CB  07B2               	addwf	___ftmul@f3_as_product+1,f
  7907  17CC  082B               	movf	___ftmul@f2+2,w
  7908  17CD  1103               	clrz
  7909  17CE  1803               	skipnc
  7910  17CF  0A2B               	incf	___ftmul@f2+2,w
  7911  17D0  1D03               	btfss	3,2
  7912  17D1  07B3               	addwf	___ftmul@f3_as_product+2,f
  7913  17D2                     l3116:	
  7914  17D2  3001               	movlw	1
  7915  17D3                     u4985:	
  7916  17D3  1003               	clrc
  7917  17D4  0CA8               	rrf	___ftmul@f1+2,f
  7918  17D5  0CA7               	rrf	___ftmul@f1+1,f
  7919  17D6  0CA6               	rrf	___ftmul@f1,f
  7920  17D7  3EFF               	addlw	-1
  7921  17D8  1D03               	skipz
  7922  17D9  2FD3               	goto	u4985
  7923  17DA  3001               	movlw	1
  7924  17DB                     u4995:	
  7925  17DB  1003               	clrc
  7926  17DC  0CB3               	rrf	___ftmul@f3_as_product+2,f
  7927  17DD  0CB2               	rrf	___ftmul@f3_as_product+1,f
  7928  17DE  0CB1               	rrf	___ftmul@f3_as_product,f
  7929  17DF  3EFF               	addlw	-1
  7930  17E0  1D03               	skipz
  7931  17E1  2FDB               	goto	u4995
  7932  17E2  3001               	movlw	1
  7933  17E3  02B4               	subwf	___ftmul@cntr,f
  7934  17E4  1D03               	btfss	3,2
  7935  17E5  2FC2               	goto	l3112
  7936  17E6  0831               	movf	___ftmul@f3_as_product,w
  7937  17E7  00F0               	movwf	___ftpack@arg
  7938  17E8  0832               	movf	___ftmul@f3_as_product+1,w
  7939  17E9  00F1               	movwf	___ftpack@arg+1
  7940  17EA  0833               	movf	___ftmul@f3_as_product+2,w
  7941  17EB  00F2               	movwf	___ftpack@arg+2
  7942  17EC  0830               	movf	___ftmul@exp,w
  7943  17ED  00AC               	movwf	??___ftmul
  7944  17EE  082C               	movf	??___ftmul,w
  7945  17EF  00F3               	movwf	___ftpack@exp
  7946  17F0  0835               	movf	___ftmul@sign,w
  7947  17F1  00AD               	movwf	??___ftmul+1
  7948  17F2  082D               	movf	??___ftmul+1,w
  7949  17F3  00F4               	movwf	___ftpack@sign
  7950  17F4  160A  118A  23A0   	fcall	___ftpack
  7951  17F7  0870               	movf	?___ftpack,w
  7952  17F8  1283               	bcf	3,5	;RP0=0, select bank0
  7953  17F9  1303               	bcf	3,6	;RP1=0, select bank0
  7954  17FA  00A6               	movwf	?___ftmul
  7955  17FB  0871               	movf	?___ftpack+1,w
  7956  17FC  00A7               	movwf	?___ftmul+1
  7957  17FD  0872               	movf	?___ftpack+2,w
  7958  17FE  00A8               	movwf	?___ftmul+2
  7959  17FF  0008               	return
  7960  1800                     __end_of___ftmul:	
  7961                           
  7962                           	psect	text30
  7963  15B2                     __ptext30:	
  7964 ;; *************** function ___ftdiv *****************
  7965 ;; Defined at:
  7966 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  7967 ;; Parameters:    Size  Location     Type
  7968 ;;  f2              3   22[BANK0 ] float 
  7969 ;;  f1              3   25[BANK0 ] float 
  7970 ;; Auto vars:     Size  Location     Type
  7971 ;;  f3              3   33[BANK0 ] float 
  7972 ;;  sign            1   37[BANK0 ] unsigned char 
  7973 ;;  exp             1   36[BANK0 ] unsigned char 
  7974 ;;  cntr            1   32[BANK0 ] unsigned char 
  7975 ;; Return value:  Size  Location     Type
  7976 ;;                  3   22[BANK0 ] float 
  7977 ;; Registers used:
  7978 ;;		wreg, status,2, status,0, pclath, cstack
  7979 ;; Tracked objects:
  7980 ;;		On entry : 0/0
  7981 ;;		On exit  : 0/0
  7982 ;;		Unchanged: 0/0
  7983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7984 ;;      Params:         0       6       0       0       0
  7985 ;;      Locals:         0       6       0       0       0
  7986 ;;      Temps:          0       4       0       0       0
  7987 ;;      Totals:         0      16       0       0       0
  7988 ;;Total ram usage:       16 bytes
  7989 ;; Hardware stack levels used:    1
  7990 ;; Hardware stack levels required when called:    1
  7991 ;; This function calls:
  7992 ;;		___ftpack
  7993 ;; This function is called by:
  7994 ;;		_Get_Voltage
  7995 ;; This function uses a non-reentrant model
  7996 ;;
  7997                           
  7998                           
  7999                           ;psect for function ___ftdiv
  8000  15B2                     ___ftdiv:	
  8001                           
  8002                           ;incstack = 0
  8003                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8004  15B2  1283               	bcf	3,5	;RP0=0, select bank0
  8005  15B3  1303               	bcf	3,6	;RP1=0, select bank0
  8006  15B4  0839               	movf	___ftdiv@f1,w
  8007  15B5  00BC               	movwf	??___ftdiv
  8008  15B6  083A               	movf	___ftdiv@f1+1,w
  8009  15B7  00BD               	movwf	??___ftdiv+1
  8010  15B8  083B               	movf	___ftdiv@f1+2,w
  8011  15B9  00BE               	movwf	??___ftdiv+2
  8012  15BA  1003               	clrc
  8013  15BB  0D3D               	rlf	??___ftdiv+1,w
  8014  15BC  0D3E               	rlf	??___ftdiv+2,w
  8015  15BD  00BF               	movwf	??___ftdiv+3
  8016  15BE  083F               	movf	??___ftdiv+3,w
  8017  15BF  00C4               	movwf	___ftdiv@exp
  8018  15C0  0844               	movf	___ftdiv@exp,w
  8019  15C1  1D03               	btfss	3,2
  8020  15C2  2DCA               	goto	l3390
  8021  15C3  3000               	movlw	0
  8022  15C4  00B6               	movwf	?___ftdiv
  8023  15C5  3000               	movlw	0
  8024  15C6  00B7               	movwf	?___ftdiv+1
  8025  15C7  3000               	movlw	0
  8026  15C8  00B8               	movwf	?___ftdiv+2
  8027  15C9  0008               	return
  8028  15CA                     l3390:	
  8029  15CA  0836               	movf	___ftdiv@f2,w
  8030  15CB  00BC               	movwf	??___ftdiv
  8031  15CC  0837               	movf	___ftdiv@f2+1,w
  8032  15CD  00BD               	movwf	??___ftdiv+1
  8033  15CE  0838               	movf	___ftdiv@f2+2,w
  8034  15CF  00BE               	movwf	??___ftdiv+2
  8035  15D0  1003               	clrc
  8036  15D1  0D3D               	rlf	??___ftdiv+1,w
  8037  15D2  0D3E               	rlf	??___ftdiv+2,w
  8038  15D3  00BF               	movwf	??___ftdiv+3
  8039  15D4  083F               	movf	??___ftdiv+3,w
  8040  15D5  00C5               	movwf	___ftdiv@sign
  8041  15D6  0845               	movf	___ftdiv@sign,w
  8042  15D7  1D03               	btfss	3,2
  8043  15D8  2DE0               	goto	l3396
  8044  15D9  3000               	movlw	0
  8045  15DA  00B6               	movwf	?___ftdiv
  8046  15DB  3000               	movlw	0
  8047  15DC  00B7               	movwf	?___ftdiv+1
  8048  15DD  3000               	movlw	0
  8049  15DE  00B8               	movwf	?___ftdiv+2
  8050  15DF  0008               	return
  8051  15E0                     l3396:	
  8052  15E0  3000               	movlw	0
  8053  15E1  00C1               	movwf	___ftdiv@f3
  8054  15E2  3000               	movlw	0
  8055  15E3  00C2               	movwf	___ftdiv@f3+1
  8056  15E4  3000               	movlw	0
  8057  15E5  00C3               	movwf	___ftdiv@f3+2
  8058  15E6  3089               	movlw	137
  8059  15E7  0745               	addwf	___ftdiv@sign,w
  8060  15E8  00BC               	movwf	??___ftdiv
  8061  15E9  083C               	movf	??___ftdiv,w
  8062  15EA  02C4               	subwf	___ftdiv@exp,f
  8063  15EB  0839               	movf	___ftdiv@f1,w
  8064  15EC  00BC               	movwf	??___ftdiv
  8065  15ED  083A               	movf	___ftdiv@f1+1,w
  8066  15EE  00BD               	movwf	??___ftdiv+1
  8067  15EF  083B               	movf	___ftdiv@f1+2,w
  8068  15F0  00BE               	movwf	??___ftdiv+2
  8069  15F1  3010               	movlw	16
  8070  15F2                     u5515:	
  8071  15F2  1003               	clrc
  8072  15F3  0CBE               	rrf	??___ftdiv+2,f
  8073  15F4  0CBD               	rrf	??___ftdiv+1,f
  8074  15F5  0CBC               	rrf	??___ftdiv,f
  8075  15F6  3EFF               	addlw	-1
  8076  15F7  1D03               	skipz
  8077  15F8  2DF2               	goto	u5515
  8078  15F9  083C               	movf	??___ftdiv,w
  8079  15FA  00BF               	movwf	??___ftdiv+3
  8080  15FB  083F               	movf	??___ftdiv+3,w
  8081  15FC  00C5               	movwf	___ftdiv@sign
  8082  15FD  0836               	movf	___ftdiv@f2,w
  8083  15FE  00BC               	movwf	??___ftdiv
  8084  15FF  0837               	movf	___ftdiv@f2+1,w
  8085  1600  00BD               	movwf	??___ftdiv+1
  8086  1601  0838               	movf	___ftdiv@f2+2,w
  8087  1602  00BE               	movwf	??___ftdiv+2
  8088  1603  3010               	movlw	16
  8089  1604                     u5525:	
  8090  1604  1003               	clrc
  8091  1605  0CBE               	rrf	??___ftdiv+2,f
  8092  1606  0CBD               	rrf	??___ftdiv+1,f
  8093  1607  0CBC               	rrf	??___ftdiv,f
  8094  1608  3EFF               	addlw	-1
  8095  1609  1D03               	skipz
  8096  160A  2E04               	goto	u5525
  8097  160B  083C               	movf	??___ftdiv,w
  8098  160C  00BF               	movwf	??___ftdiv+3
  8099  160D  083F               	movf	??___ftdiv+3,w
  8100  160E  06C5               	xorwf	___ftdiv@sign,f
  8101  160F  3080               	movlw	128
  8102  1610  00BC               	movwf	??___ftdiv
  8103  1611  083C               	movf	??___ftdiv,w
  8104  1612  05C5               	andwf	___ftdiv@sign,f
  8105  1613  17BA               	bsf	___ftdiv@f1+1,7
  8106  1614  30FF               	movlw	255
  8107  1615  05B9               	andwf	___ftdiv@f1,f
  8108  1616  30FF               	movlw	255
  8109  1617  05BA               	andwf	___ftdiv@f1+1,f
  8110  1618  3000               	movlw	0
  8111  1619  05BB               	andwf	___ftdiv@f1+2,f
  8112  161A  17B7               	bsf	___ftdiv@f2+1,7
  8113  161B  30FF               	movlw	255
  8114  161C  05B6               	andwf	___ftdiv@f2,f
  8115  161D  30FF               	movlw	255
  8116  161E  05B7               	andwf	___ftdiv@f2+1,f
  8117  161F  3000               	movlw	0
  8118  1620  05B8               	andwf	___ftdiv@f2+2,f
  8119  1621  3018               	movlw	24
  8120  1622  00BC               	movwf	??___ftdiv
  8121  1623  083C               	movf	??___ftdiv,w
  8122  1624  00C0               	movwf	___ftdiv@cntr
  8123  1625                     l3410:	
  8124  1625  3001               	movlw	1
  8125  1626                     u5535:	
  8126  1626  1003               	clrc
  8127  1627  0DC1               	rlf	___ftdiv@f3,f
  8128  1628  0DC2               	rlf	___ftdiv@f3+1,f
  8129  1629  0DC3               	rlf	___ftdiv@f3+2,f
  8130  162A  3EFF               	addlw	-1
  8131  162B  1D03               	skipz
  8132  162C  2E26               	goto	u5535
  8133  162D  0838               	movf	___ftdiv@f2+2,w
  8134  162E  023B               	subwf	___ftdiv@f1+2,w
  8135  162F  1D03               	skipz
  8136  1630  2E37               	goto	u5545
  8137  1631  0837               	movf	___ftdiv@f2+1,w
  8138  1632  023A               	subwf	___ftdiv@f1+1,w
  8139  1633  1D03               	skipz
  8140  1634  2E37               	goto	u5545
  8141  1635  0836               	movf	___ftdiv@f2,w
  8142  1636  0239               	subwf	___ftdiv@f1,w
  8143  1637                     u5545:	
  8144  1637  1C03               	skipc
  8145  1638  2E44               	goto	l3418
  8146  1639  0836               	movf	___ftdiv@f2,w
  8147  163A  02B9               	subwf	___ftdiv@f1,f
  8148  163B  0837               	movf	___ftdiv@f2+1,w
  8149  163C  1C03               	skipc
  8150  163D  0F37               	incfsz	___ftdiv@f2+1,w
  8151  163E  02BA               	subwf	___ftdiv@f1+1,f
  8152  163F  0838               	movf	___ftdiv@f2+2,w
  8153  1640  1C03               	skipc
  8154  1641  0A38               	incf	___ftdiv@f2+2,w
  8155  1642  02BB               	subwf	___ftdiv@f1+2,f
  8156  1643  1441               	bsf	___ftdiv@f3,0
  8157  1644                     l3418:	
  8158  1644  3001               	movlw	1
  8159  1645                     u5555:	
  8160  1645  1003               	clrc
  8161  1646  0DB9               	rlf	___ftdiv@f1,f
  8162  1647  0DBA               	rlf	___ftdiv@f1+1,f
  8163  1648  0DBB               	rlf	___ftdiv@f1+2,f
  8164  1649  3EFF               	addlw	-1
  8165  164A  1D03               	skipz
  8166  164B  2E45               	goto	u5555
  8167  164C  3001               	movlw	1
  8168  164D  02C0               	subwf	___ftdiv@cntr,f
  8169  164E  1D03               	btfss	3,2
  8170  164F  2E25               	goto	l3410
  8171  1650  0841               	movf	___ftdiv@f3,w
  8172  1651  00F0               	movwf	___ftpack@arg
  8173  1652  0842               	movf	___ftdiv@f3+1,w
  8174  1653  00F1               	movwf	___ftpack@arg+1
  8175  1654  0843               	movf	___ftdiv@f3+2,w
  8176  1655  00F2               	movwf	___ftpack@arg+2
  8177  1656  0844               	movf	___ftdiv@exp,w
  8178  1657  00BC               	movwf	??___ftdiv
  8179  1658  083C               	movf	??___ftdiv,w
  8180  1659  00F3               	movwf	___ftpack@exp
  8181  165A  0845               	movf	___ftdiv@sign,w
  8182  165B  00BD               	movwf	??___ftdiv+1
  8183  165C  083D               	movf	??___ftdiv+1,w
  8184  165D  00F4               	movwf	___ftpack@sign
  8185  165E  160A  118A  23A0   	fcall	___ftpack
  8186  1661  0870               	movf	?___ftpack,w
  8187  1662  1283               	bcf	3,5	;RP0=0, select bank0
  8188  1663  1303               	bcf	3,6	;RP1=0, select bank0
  8189  1664  00B6               	movwf	?___ftdiv
  8190  1665  0871               	movf	?___ftpack+1,w
  8191  1666  00B7               	movwf	?___ftdiv+1
  8192  1667  0872               	movf	?___ftpack+2,w
  8193  1668  00B8               	movwf	?___ftdiv+2
  8194  1669  0008               	return
  8195  166A                     __end_of___ftdiv:	
  8196                           
  8197                           	psect	text31
  8198  13A0                     __ptext31:	
  8199 ;; *************** function ___ftpack *****************
  8200 ;; Defined at:
  8201 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;  arg             3    0[COMMON] unsigned um
  8204 ;;  exp             1    3[COMMON] unsigned char 
  8205 ;;  sign            1    4[COMMON] unsigned char 
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;		None
  8208 ;; Return value:  Size  Location     Type
  8209 ;;                  3    0[COMMON] float 
  8210 ;; Registers used:
  8211 ;;		wreg, status,2, status,0
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8217 ;;      Params:         5       0       0       0       0
  8218 ;;      Locals:         0       0       0       0       0
  8219 ;;      Temps:          3       0       0       0       0
  8220 ;;      Totals:         8       0       0       0       0
  8221 ;;Total ram usage:        8 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; This function calls:
  8224 ;;		Nothing
  8225 ;; This function is called by:
  8226 ;;		___ftadd
  8227 ;;		___ftdiv
  8228 ;;		___ftmul
  8229 ;;		___lltoft
  8230 ;;		___lwtoft
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           
  8235                           ;psect for function ___ftpack
  8236  13A0                     ___ftpack:	
  8237                           
  8238                           ;incstack = 0
  8239                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8240  13A0  0873               	movf	___ftpack@exp,w
  8241  13A1  1903               	btfsc	3,2
  8242  13A2  2BA8               	goto	l2858
  8243  13A3  0872               	movf	___ftpack@arg+2,w
  8244  13A4  0471               	iorwf	___ftpack@arg+1,w
  8245  13A5  0470               	iorwf	___ftpack@arg,w
  8246  13A6  1D03               	skipz
  8247  13A7  2BBB               	goto	l2864
  8248  13A8                     l2858:	
  8249  13A8  3000               	movlw	0
  8250  13A9  00F0               	movwf	?___ftpack
  8251  13AA  3000               	movlw	0
  8252  13AB  00F1               	movwf	?___ftpack+1
  8253  13AC  3000               	movlw	0
  8254  13AD  00F2               	movwf	?___ftpack+2
  8255  13AE  0008               	return
  8256  13AF                     l2862:	
  8257  13AF  3001               	movlw	1
  8258  13B0  00F5               	movwf	??___ftpack
  8259  13B1  0875               	movf	??___ftpack,w
  8260  13B2  07F3               	addwf	___ftpack@exp,f
  8261  13B3  3001               	movlw	1
  8262  13B4                     u4315:	
  8263  13B4  1003               	clrc
  8264  13B5  0CF2               	rrf	___ftpack@arg+2,f
  8265  13B6  0CF1               	rrf	___ftpack@arg+1,f
  8266  13B7  0CF0               	rrf	___ftpack@arg,f
  8267  13B8  3EFF               	addlw	-1
  8268  13B9  1D03               	skipz
  8269  13BA  2BB4               	goto	u4315
  8270  13BB                     l2864:	
  8271  13BB  30FE               	movlw	254
  8272  13BC  0572               	andwf	___ftpack@arg+2,w
  8273  13BD  1903               	btfsc	3,2
  8274  13BE  2BD6               	goto	l495
  8275  13BF  2BAF               	goto	l2862
  8276  13C0                     l2866:	
  8277  13C0  3001               	movlw	1
  8278  13C1  00F5               	movwf	??___ftpack
  8279  13C2  0875               	movf	??___ftpack,w
  8280  13C3  07F3               	addwf	___ftpack@exp,f
  8281  13C4  3001               	movlw	1
  8282  13C5  07F0               	addwf	___ftpack@arg,f
  8283  13C6  3000               	movlw	0
  8284  13C7  1803               	skipnc
  8285  13C8  3001               	movlw	1
  8286  13C9  07F1               	addwf	___ftpack@arg+1,f
  8287  13CA  3000               	movlw	0
  8288  13CB  1803               	skipnc
  8289  13CC  3001               	movlw	1
  8290  13CD  07F2               	addwf	___ftpack@arg+2,f
  8291  13CE  3001               	movlw	1
  8292  13CF                     u4335:	
  8293  13CF  1003               	clrc
  8294  13D0  0CF2               	rrf	___ftpack@arg+2,f
  8295  13D1  0CF1               	rrf	___ftpack@arg+1,f
  8296  13D2  0CF0               	rrf	___ftpack@arg,f
  8297  13D3  3EFF               	addlw	-1
  8298  13D4  1D03               	skipz
  8299  13D5  2BCF               	goto	u4335
  8300  13D6                     l495:	
  8301  13D6  30FF               	movlw	255
  8302  13D7  0572               	andwf	___ftpack@arg+2,w
  8303  13D8  1903               	btfsc	3,2
  8304  13D9  2BE5               	goto	l2874
  8305  13DA  2BC0               	goto	l2866
  8306  13DB                     l2872:	
  8307  13DB  3001               	movlw	1
  8308  13DC  02F3               	subwf	___ftpack@exp,f
  8309  13DD  3001               	movlw	1
  8310  13DE                     u4355:	
  8311  13DE  1003               	clrc
  8312  13DF  0DF0               	rlf	___ftpack@arg,f
  8313  13E0  0DF1               	rlf	___ftpack@arg+1,f
  8314  13E1  0DF2               	rlf	___ftpack@arg+2,f
  8315  13E2  3EFF               	addlw	-1
  8316  13E3  1D03               	skipz
  8317  13E4  2BDE               	goto	u4355
  8318  13E5                     l2874:	
  8319  13E5  1BF1               	btfsc	___ftpack@arg+1,7
  8320  13E6  2BEB               	goto	l502
  8321  13E7  3002               	movlw	2
  8322  13E8  0273               	subwf	___ftpack@exp,w
  8323  13E9  1803               	skipnc
  8324  13EA  2BDB               	goto	l2872
  8325  13EB                     l502:	
  8326  13EB  1873               	btfsc	___ftpack@exp,0
  8327  13EC  2BF3               	goto	l503
  8328  13ED  30FF               	movlw	255
  8329  13EE  05F0               	andwf	___ftpack@arg,f
  8330  13EF  307F               	movlw	127
  8331  13F0  05F1               	andwf	___ftpack@arg+1,f
  8332  13F1  30FF               	movlw	255
  8333  13F2  05F2               	andwf	___ftpack@arg+2,f
  8334  13F3                     l503:	
  8335  13F3  1003               	clrc
  8336  13F4  0CF3               	rrf	___ftpack@exp,f
  8337  13F5  0873               	movf	___ftpack@exp,w
  8338  13F6  00F5               	movwf	??___ftpack
  8339  13F7  01F6               	clrf	??___ftpack+1
  8340  13F8  01F7               	clrf	??___ftpack+2
  8341  13F9  3010               	movlw	16
  8342  13FA                     u4395:	
  8343  13FA  1003               	clrc
  8344  13FB  0DF5               	rlf	??___ftpack,f
  8345  13FC  0DF6               	rlf	??___ftpack+1,f
  8346  13FD  0DF7               	rlf	??___ftpack+2,f
  8347  13FE  3EFF               	addlw	-1
  8348  13FF  1D03               	skipz
  8349  1400  2BFA               	goto	u4395
  8350  1401  0875               	movf	??___ftpack,w
  8351  1402  04F0               	iorwf	___ftpack@arg,f
  8352  1403  0876               	movf	??___ftpack+1,w
  8353  1404  04F1               	iorwf	___ftpack@arg+1,f
  8354  1405  0877               	movf	??___ftpack+2,w
  8355  1406  04F2               	iorwf	___ftpack@arg+2,f
  8356  1407  0874               	movf	___ftpack@sign,w
  8357  1408  1903               	btfsc	3,2
  8358  1409  0008               	return
  8359  140A  17F2               	bsf	___ftpack@arg+2,7
  8360  140B  0008               	return
  8361  140C                     __end_of___ftpack:	
  8362                           
  8363                           	psect	text32
  8364  121C                     __ptext32:	
  8365 ;; *************** function _ADC_Read *****************
  8366 ;; Defined at:
  8367 ;;		line 43 in file "ADClib.c"
  8368 ;; Parameters:    Size  Location     Type
  8369 ;;  channel         1    wreg     unsigned char 
  8370 ;; Auto vars:     Size  Location     Type
  8371 ;;  channel         1    4[COMMON] unsigned char 
  8372 ;; Return value:  Size  Location     Type
  8373 ;;                  2    0[COMMON] unsigned int 
  8374 ;; Registers used:
  8375 ;;		wreg, status,2, status,0
  8376 ;; Tracked objects:
  8377 ;;		On entry : 0/0
  8378 ;;		On exit  : 0/0
  8379 ;;		Unchanged: 0/0
  8380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8381 ;;      Params:         2       0       0       0       0
  8382 ;;      Locals:         1       0       0       0       0
  8383 ;;      Temps:          2       0       0       0       0
  8384 ;;      Totals:         5       0       0       0       0
  8385 ;;Total ram usage:        5 bytes
  8386 ;; Hardware stack levels used:    1
  8387 ;; This function calls:
  8388 ;;		Nothing
  8389 ;; This function is called by:
  8390 ;;		_main
  8391 ;;		_Get_Voltage
  8392 ;; This function uses a non-reentrant model
  8393 ;;
  8394                           
  8395                           
  8396                           ;psect for function _ADC_Read
  8397  121C                     _ADC_Read:	
  8398                           
  8399                           ;incstack = 0
  8400                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  8401                           ;ADC_Read@channel stored from wreg
  8402  121C  00F4               	movwf	ADC_Read@channel
  8403                           
  8404                           ;ADClib.c: 45: if(channel > 7)
  8405  121D  3008               	movlw	8
  8406  121E  0274               	subwf	ADC_Read@channel,w
  8407  121F  1C03               	skipc
  8408  1220  2A24               	goto	l3132
  8409                           
  8410                           ;ADClib.c: 46: return 0;
  8411  1221  01F0               	clrf	?_ADC_Read
  8412  1222  01F1               	clrf	?_ADC_Read+1
  8413  1223  0008               	return
  8414  1224                     l3132:	
  8415                           
  8416                           ;ADClib.c: 49: ADCON0 &= 0xC5;
  8417  1224  30C5               	movlw	197
  8418  1225  00F2               	movwf	??_ADC_Read
  8419  1226  0872               	movf	??_ADC_Read,w
  8420  1227  1283               	bcf	3,5	;RP0=0, select bank0
  8421  1228  1303               	bcf	3,6	;RP1=0, select bank0
  8422  1229  059F               	andwf	31,f	;volatile
  8423                           
  8424                           ;ADClib.c: 50: ADCON0 |= channel<<3;
  8425  122A  0874               	movf	ADC_Read@channel,w
  8426  122B  00F2               	movwf	??_ADC_Read
  8427  122C  3002               	movlw	2
  8428  122D                     u5025:	
  8429  122D  1003               	clrc
  8430  122E  0DF2               	rlf	??_ADC_Read,f
  8431  122F  3EFF               	addlw	-1
  8432  1230  1D03               	skipz
  8433  1231  2A2D               	goto	u5025
  8434  1232  1003               	clrc
  8435  1233  0D72               	rlf	??_ADC_Read,w
  8436  1234  00F3               	movwf	??_ADC_Read+1
  8437  1235  0873               	movf	??_ADC_Read+1,w
  8438  1236  049F               	iorwf	31,f	;volatile
  8439                           
  8440                           ;ADClib.c: 51: _delay((unsigned long)((2)*(8000000/4000.0)));
  8441  1237  3006               	movlw	6
  8442  1238  00F3               	movwf	??_ADC_Read+1
  8443  1239  3030               	movlw	48
  8444  123A  00F2               	movwf	??_ADC_Read
  8445  123B                     u6467:	
  8446  123B  0BF2               	decfsz	??_ADC_Read,f
  8447  123C  2A3B               	goto	u6467
  8448  123D  0BF3               	decfsz	??_ADC_Read+1,f
  8449  123E  2A3B               	goto	u6467
  8450  123F  0000               	nop
  8451                           
  8452                           ;ADClib.c: 52: GO_nDONE = 1;
  8453  1240  1283               	bcf	3,5	;RP0=0, select bank0
  8454  1241  1303               	bcf	3,6	;RP1=0, select bank0
  8455  1242  151F               	bsf	31,2	;volatile
  8456  1243                     l126:	
  8457                           ;ADClib.c: 53: while(GO_nDONE);
  8458                           
  8459  1243  191F               	btfsc	31,2	;volatile
  8460  1244  2A43               	goto	l126
  8461                           
  8462                           ;ADClib.c: 54: return ((ADRESH<<8)+ADRESL);
  8463  1245  081E               	movf	30,w	;volatile
  8464  1246  00F1               	movwf	?_ADC_Read+1
  8465  1247  1683               	bsf	3,5	;RP0=1, select bank1
  8466  1248  1303               	bcf	3,6	;RP1=0, select bank1
  8467  1249  081E               	movf	30,w	;volatile
  8468  124A  00F0               	movwf	?_ADC_Read
  8469  124B  0008               	return
  8470  124C                     __end_of_ADC_Read:	
  8471                           
  8472                           	psect	text33
  8473  10F5                     __ptext33:	
  8474 ;; *************** function _ADC_Init *****************
  8475 ;; Defined at:
  8476 ;;		line 9 in file "ADClib.c"
  8477 ;; Parameters:    Size  Location     Type
  8478 ;;  Uref            3    0[COMMON] float 
  8479 ;; Auto vars:     Size  Location     Type
  8480 ;;		None
  8481 ;; Return value:  Size  Location     Type
  8482 ;;                  1    wreg      void 
  8483 ;; Registers used:
  8484 ;;		wreg
  8485 ;; Tracked objects:
  8486 ;;		On entry : 0/0
  8487 ;;		On exit  : 0/0
  8488 ;;		Unchanged: 0/0
  8489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8490 ;;      Params:         3       0       0       0       0
  8491 ;;      Locals:         0       0       0       0       0
  8492 ;;      Temps:          0       0       0       0       0
  8493 ;;      Totals:         3       0       0       0       0
  8494 ;;Total ram usage:        3 bytes
  8495 ;; Hardware stack levels used:    1
  8496 ;; This function calls:
  8497 ;;		Nothing
  8498 ;; This function is called by:
  8499 ;;		_main
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           
  8504                           ;psect for function _ADC_Init
  8505  10F5                     _ADC_Init:	
  8506                           
  8507                           ;ADClib.c: 12: ADCS0=1;
  8508                           
  8509                           ;incstack = 0
  8510                           ; Regs used in _ADC_Init: [wreg]
  8511  10F5  1283               	bcf	3,5	;RP0=0, select bank0
  8512  10F6  1303               	bcf	3,6	;RP1=0, select bank0
  8513  10F7  171F               	bsf	31,6	;volatile
  8514                           
  8515                           ;ADClib.c: 13: ADCS1=0;
  8516  10F8  139F               	bcf	31,7	;volatile
  8517                           
  8518                           ;ADClib.c: 18: ADON=1;
  8519  10F9  141F               	bsf	31,0	;volatile
  8520                           
  8521                           ;ADClib.c: 21: PCFG0=0;
  8522  10FA  1683               	bsf	3,5	;RP0=1, select bank1
  8523  10FB  1303               	bcf	3,6	;RP1=0, select bank1
  8524  10FC  101F               	bcf	31,0	;volatile
  8525                           
  8526                           ;ADClib.c: 22: PCFG1=0;
  8527  10FD  109F               	bcf	31,1	;volatile
  8528                           
  8529                           ;ADClib.c: 23: PCFG2=0;
  8530  10FE  111F               	bcf	31,2	;volatile
  8531                           
  8532                           ;ADClib.c: 24: PCFG3=0;
  8533  10FF  119F               	bcf	31,3	;volatile
  8534                           
  8535                           ;ADClib.c: 28: ADFM=1;
  8536  1100  179F               	bsf	31,7	;volatile
  8537                           
  8538                           ;ADClib.c: 32: Vref=Uref;
  8539  1101  0870               	movf	ADC_Init@Uref,w
  8540  1102  00BB               	movwf	_Vref^(0+128)
  8541  1103  0871               	movf	ADC_Init@Uref+1,w
  8542  1104  00BC               	movwf	(_Vref+1)^(0+128)
  8543  1105  0872               	movf	ADC_Init@Uref+2,w
  8544  1106  00BD               	movwf	(_Vref+2)^(0+128)
  8545  1107  0008               	return
  8546  1108                     __end_of_ADC_Init:	
  8547  007E                     btemp	set	126	;btemp
  8548  007E                     wtemp0	set	126


Data Sizes:
    Strings     41
    Constant    118
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      78
    BANK1            80     27      30
    BANK3            96     86      86
    BANK2            96     20      20

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_3(CODE[14]), STR_2(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 80
		 -> main@bufferVoltage(BANK3[80]), main@buffer(BANK2[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_printStringXY@str	PTR unsigned char  size(2) Largest target is 80
		 -> main@bufferVoltage(BANK3[80]), main@buffer(BANK2[20]), STR_1(CODE[12]), 

    lcd_printString@str	PTR unsigned char  size(2) Largest target is 80
		 -> main@bufferVoltage(BANK3[80]), main@buffer(BANK2[20]), STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    _main->___awmod
    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->__div_to_l_
    _scale->___awmod
    _fround->___awmod
    ___bmul->___awmod
    ___awmod->___awdiv
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___lltoft
    _lcd_printStringXY->_lcd_gotoxy
    _lcd_printString->_lcd_char_out
    _lcd_char_out->_lcd_out
    _lcd_gotoxy->_lcd_com
    _lcd_init->_lcd_com
    _lcd_clear->_lcd_com
    _lcd_com->_lcd_out
    ___lwtoft->___ftpack
    ___ftmul->___awmod

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___bmul->___awmod
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Get_Voltage->___ftdiv
    ___ftmul->___bmul
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               116   116      0   62053
                                             72 BANK0      6     6      0
                                             23 BANK1      4     4      0
                                              0 BANK3     86    86      0
                                              0 BANK2     20    20      0
                           _ADC_Init
                           _ADC_Read
                        _Get_Voltage
                            ___awdiv
                            ___awmod
                          _lcd_clear
                           _lcd_init
                  _lcd_printStringXY
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             45    36      9   45464
                                             57 BANK0     15     6      9
                                              0 BANK1     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     6      3   10089
                                             22 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              16    13      3    9810
                                             22 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     766
                                              2 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1993
                                              9 COMMON     5     1      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    2135
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     584
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     803
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1476
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2295
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     752
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     631
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     566
                                             31 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3839
                                             51 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3613
                                             38 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     130
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     718
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (1) _lcd_printStringXY                                    5     1      4    1771
                                              8 COMMON     5     1      4
                         _lcd_gotoxy
                    _lcd_printString
 ---------------------------------------------------------------------------------
 (2) _lcd_printString                                      2     0      2     316
                                              4 COMMON     2     0      2
                       _lcd_char_out
 ---------------------------------------------------------------------------------
 (3) _lcd_char_out                                         3     3      0     186
                                              1 COMMON     3     3      0
                            _lcd_out
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           4     3      1     777
                                              4 COMMON     4     3      1
                            _lcd_com
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0     229
                                              4 COMMON     3     3      0
                            _lcd_com
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            0     0      0     155
                            _lcd_com
 ---------------------------------------------------------------------------------
 (3) _lcd_com                                              3     3      0     155
                                              1 COMMON     3     3      0
                            _lcd_out
 ---------------------------------------------------------------------------------
 (4) _lcd_out                                              1     1      0     124
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Get_Voltage                                          8     4      4    9595
                                             38 BANK0      8     4      4
                           _ADC_Read
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2224
                                              8 COMMON     4     1      3
                           _ADC_Read (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    4566
                                              6 BANK0     16    10      6
                           _ADC_Read (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2678
                                             22 BANK0     16    10      6
                           _ADC_Read (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2128
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) _ADC_Read                                             5     3      2      62
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             3     0      3      96
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _Get_Voltage
     _ADC_Read
     ___ftdiv
       _ADC_Read (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
     ___ftmul
       _ADC_Read (ARG)
       ___awdiv (ARG)
       ___awmod (ARG)
         ___awdiv (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
     ___lwtoft
       _ADC_Read (ARG)
       ___ftpack (ARG)
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   _lcd_clear
     _lcd_com
       _lcd_out
   _lcd_init
     _lcd_com
       _lcd_out
   _lcd_printStringXY
     _lcd_gotoxy
       _lcd_com
         _lcd_out
     _lcd_printString
       _lcd_char_out
         _lcd_out
   _sprintf
     ___awdiv
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
         ___bmul
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
     ___ftge
     ___ftmul
       _ADC_Read (ARG)
       ___awdiv (ARG)
       ___awmod (ARG)
         ___awdiv (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
           ___awmod
             ___awdiv (ARG)
           ___bmul
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
           ___ftmul
             _ADC_Read (ARG)
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
               ___awmod (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
       _scale (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
         ___bmul
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       ___bmul
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
       ___ftmul
         _ADC_Read (ARG)
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
     _isdigit
     _scale
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       ___bmul
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
       ___ftmul
         _ADC_Read (ARG)
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      E4       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4E       5       97.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     1B      1E       7       37.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60     56      56       9       89.6%
BITBANK2            60      0       0      10        0.0%
BANK2               60     14      14      11       20.8%
DATA                 0      0      E4      12        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Feb 24 21:35:02 2018

                         pc 0002              ___bmul@product 0024                 __CFG_CP$OFF 0000  
                        l40 1156                          l41 115A                          l42 115B  
                        l43 115F                          l37 114E                          l38 1151  
                        l39 1155                          l72 141D                          l79 1494  
              ___awdiv@sign 0076                          fsr 0004         ___wmul@multiplicand 0072  
              ___ftadd@exp1 0052                ___ftadd@exp2 0051                ___ftadd@sign 0050  
                       l205 0418                         l126 1243                         l226 0765  
                       l317 118C                         l502 13EB                         l503 13F3  
                       l177 00EC                         l603 1509                         l526 090F  
                       l552 169C                         l562 1721                         l483 0BBF  
                       l475 0B76                         l495 13D6                __CFG_CPD$OFF 0000  
                       fsr0 0004                 lcd_init@lcd 0076                         indf 0000  
              ___awmod@sign 0021                __CFG_FOSC$XT 0000                 _sprintf$662 00A0  
            ??_lcd_char_out 0071                 lcd_gotoxy@x 0076                 lcd_gotoxy@y 0074  
              __CFG_LVP$OFF 0000                ___ftdiv@cntr 0040                ___ftdiv@sign 0045  
                      l3002 1294                        l3100 179A                        l3012 0890  
                      l3022 08A6                        l3112 17C2                        l3104 17AA  
                      l3040 08D5                        l3016 0897                        l3042 08E1  
                      l3034 08C0                        l3210 0D33                        l3202 0CA9  
                      l3132 1224                        l3116 17D2                        l3052 08FF  
                      l3044 08E6                        l3062 0933                        l3054 090B  
                      l3046 08EA                        l3072 0956                        l3312 1716  
                      l3304 16F9                        l3232 0E97                        l3410 1625  
                      l3082 1745                        l3170 143B                        l3058 0921  
                      l3330 0AD9                        l3314 1724                        l3306 1709  
                      l3250 0FE1                        l3226 0E29                        l3164 1422  
                      l3156 1415                        l3148 11A3                        l3500 151A  
                      l3340 0B20                        l3324 0ABA                        l3244 0F73  
                      l3236 0EB6                        l3182 146D                        l3190 1486  
                      l3430 136A                        l3510 0819                        l3262 10E1  
                      l3088 175B                        l3176 1454                        l3520 0851  
                      l3512 0829                        l3272 1684                        l3418 1644  
                      l3434 1391                        l3524 085E                        l3540 003B  
                      l3372 1184                        l3364 0BB4                        l3356 0B97  
                      l3390 15CA                        l3534 000D                        l3366 0BC2  
                      l3358 0BA7                        l3294 16DD                        l3286 16BD  
                      l3630 00E6                        l3614 0088                        l3536 001D  
                      l3544 0048                        l3552 11F5                        l2912 110C  
                      l3800 06CD                        l3712 03A1                        l3570 152F  
                      l3458 116A                        l3554 1207                        l3810 0743  
                      l3396 15E0                        l3564 1529                        l3468 14AF  
                      l2932 12F4                        l2916 1112                        l3724 03F7  
                      l3708 0332                        l3644 0122                        l3636 00EE  
                      l3628 00A3                        l2862 13AF                        l3566 152B  
                      l3574 1534                        l3494 14FE                        l3486 14E1  
                      l2950 1315                        l3806 071D                        l3742 04BE  
                      l3718 03A7                        l3670 01CB                        l3654 0161  
                      l3638 010A                        l2872 13DB                        l2864 13BB  
                      l3568 152D                        l3576 1542                        l3496 150C  
                      l3488 14F1                        l2960 1336                        l3824 0788  
                      l3736 04A5                        l2874 13E5                        l2866 13C0  
                      l2858 13A8                        l2938 12FF                        l3770 0665  
                      l3682 0255                        l3826 005C                        l3842 099F  
                      l2964 133E                        l2956 132B                        l2948 1307  
                      l2980 125F                        l3756 050B                        l3748 04D8  
                      l3828 07F2                        l2990 1273                        l3694 02D9  
                      l3686 029B                        l3678 0238                        l2976 1258  
                      l3776 067E                        l2994 1281                        l3794 06C7  
                      l3698 02F0                        l3778 0683                        l2988 1265  
                      l3788 06B7                        l2998 128C                        _ADFM 04FF  
                      _ADON 00F8                        STR_1 10A3                        STR_2 1086  
                      STR_3 1095                 lcd_out@data 0070                        u5025 122D  
                      u5105 1475                        u4315 13B4                        u6005 0260  
                      u4335 13CF                        u4415 11CD                        u6015 02A6  
                      u5225 16BF                        u4505 1322                        u4355 13DE  
                      u5075 142A                        u5315 1718                        u5235 16D0  
                      u4515 132C                        u6115 0427                        u5085 1443  
                      u5405 0B98                        u5245 16DE                        u4605 1282  
                      u6045 02D7                        u5095 145C                        u6135 04C7  
                      u5601 1384                        u6305 07A6                        u6145 04D4  
                      u5602 1385                        u4395 13FA                        u5515 15F2  
                      u5603 138A                        u5435 0BB6                        u5355 0B22  
                      u4475 130A                        u6075 03AC                        u5604 138B  
                      u5525 1604                        u4725 08C1                        u5365 0B51  
                      u5285 16FA                        u6245 06D2                        u6165 057F  
                      u6085 03E9                        u5535 1626                        u6407 1546  
                      u4815 0900                        u4495 1316                        u4575 1268  
                      u6255 070F                        u6175 0611                        u5545 1637  
                      u4905 1779                        u6417 1553                        u5465 118D  
                      u5555 1645                        u6427 155E                        u4755 08D6  
                      u5715 1500                        u5475 1194                        u4595 1279  
                      u6275 0736                        u6437 1569                        u5581 135D  
                      u6285 075C                        u5582 135E                        u4935 17AB  
                      u6447 1574                        u5583 1363                        u5655 14B6  
                      u5584 1364                        u4945 17B3                        u6457 1141  
                      u4785 08EB                        u5825 0011                        u6377 0994  
                      u6467 123B                        u5755 081D                        u6387 0A92  
                      u6397 11EB                        u5685 14E2                        u5845 002B  
                      u4895 1767                        u5775 082B                        u5855 003C  
                      u4985 17D3                        u5785 0840                        u4995 17DB  
                      u5795 0852                        u5875 11FA                        u5965 017B  
              __CFG_WRT$OFF 0000                        _Vref 00BB                        _main 0970  
              ___ftpack@arg 0070         __end_of_Get_Voltage 12EA                ___ftpack@exp 0073  
                      btemp 007E            __end_of_ADC_Init 1108            __end_of_ADC_Read 124C  
                      start 0000           ___bmul@multiplier 0025                ___ftmul@cntr 0034  
              ___ftmul@sign 0035                ___fttol@exp1 004C                ___fttol@lval 0048  
                     _ADCS0 00FE                       _ADCS1 00FF                       ?_main 0070  
           __end_of___awdiv 1343             __end_of___ftadd 0970               __CFG_WDTE$OFF 0000  
           __end_of___awmod 1299             __end_of___ftdiv 166A             __end_of___ftneg 0809  
           __end_of___lldiv 0867             __end_of___ftmul 1800             ___awdiv@divisor 0070  
           __end_of___llmod 0051             __end_of___ftsub 1182             __end_of___fttol 1523  
                     _PCFG0 04F8                       _PCFG1 04F9                       _PCFG2 04FA  
                     _PCFG3 04FB             ___awdiv@counter 0075                       _TRISB 0086  
                     _TRISC 0087                ___lltoft@exp 007D             __end_of_lcd_com 1147  
           __end_of_lcd_out 1161             __end_of_dpowers 1038                       _scale 0D65  
           __end_of_isdigit 10E3               ___ftpack@sign 0074              __CFG_BOREN$OFF 0000  
                     pclath 000A                       status 0003                       wtemp0 007E  
           __end_of_sprintf 07F7            ?_lcd_printString 0074             __initialization 07F7  
              __end_of_main 0A99                      ??_main 0068               ___fttol@sign1 0047  
      __size_of__tdiv_to_l_ 00C3        lcd_printStringXY@str 0078                 _Get_Voltage 1299  
                    _ADCON0 001F            ___llmod@dividend 0024                      ?_scale 0036  
                    _ADRESH 001E                      _ADRESL 009E            ___awdiv@dividend 0072  
          __end_of___ftpack 140C            __end_of___lltoft 121C            __end_of___lwtoft 112F  
            __CFG_PWRTE$OFF 0000            __end_of__powers_ 105F            __end_of_lcd_init 15B2  
                    ___bmul 1108                      ___ftge 1343        __end_of_lcd_char_out 11F1  
                    ___wmul 1182                   ??___awdiv 0074                   ??___ftadd 004C  
                 ??___awmod 007D                   ??___ftdiv 003C                   ??___ftneg 0073  
                 ??___lldiv 0078                   ??___ftmul 002C                   ??___llmod 0028  
                 ??___ftsub 007E                   ??___fttol 0043             ADC_Read@channel 0074  
                    _fround 0BCB            ___awdiv@quotient 0077             ___awmod@divisor 0079  
           ___awmod@counter 0020                   ??_lcd_com 0071                   ??_lcd_out 0070  
     ___ftmul@f3_as_product 0031                   ??_isdigit 0070                   ?_ADC_Init 0070  
                 ?_ADC_Read 0070                   ??_sprintf 0062     __end_of__initialization 07FC  
                ___ftadd@f1 0046                  ___ftadd@f2 0049                  ___ftge@ff1 0070  
                ___ftge@ff2 0073                  ___ftdiv@f1 0039                  ___ftdiv@f2 0036  
                ___ftdiv@f3 0041                  ___ftneg@f1 0070         ___bmul@multiplicand 0022  
                ___ftmul@f1 0026                  ___ftmul@f2 0029                  ___ftsub@f1 0056  
                ___ftsub@f2 0053                  ___fttol@f1 003F              __pcstackCOMMON 0070  
                ___lltoft@c 0078            lcd_char_out@data 0073               __end_of_scale 1000  
                ___lwtoft@c 0078              lcd_gotoxy@temp 0077                  __div_to_l_ 0A99  
                ??_ADC_Init 0073                  ??_ADC_Read 0072          __size_of_lcd_clear 000B  
           __div_to_l_@exp1 0025             __div_to_l_@cntr 0024                     ??_scale 0039  
           __div_to_l_@quot 0020                  __pbssBANK1 00BB               __div_to_l_@f1 0070  
             __div_to_l_@f2 0073                  __pmaintext 0970                     ?___bmul 0022  
                   ?___ftge 0070                     ?___wmul 0070                     ?_fround 0036  
                 ?___ftpack 0070                   ?___lltoft 0078                   ?___lwtoft 0078  
                _lcd_gotoxy 140C                   ?_lcd_init 0070                  __stringtab 1000  
     __size_of_lcd_char_out 002B           __end_of__npowers_ 1086                ADC_Init@Uref 0070  
         __end_of_lcd_clear 10D5             __size_of___bmul 0013             __size_of___ftge 005D  
                   ___awdiv 12EA                     ___ftadd 0867                     ___awmod 124C  
                   ___ftdiv 15B2                     ___ftneg 0801                     ___lldiv 0809  
           __size_of___wmul 0021                     ___ftmul 172D                     ___llmod 0003  
                   ___ftsub 1161                     ___fttol 1495                  _fround$660 003F  
                _fround$659 0042                  ??___ftpack 0075             __size_of_fround 019A  
                ??___lltoft 007C                     __ptext1 0051                     __ptext2 0D65  
                   __ptext3 10D5                     __ptext4 0BCB                     __ptext5 1108  
                   __ptext6 124C                     __ptext7 12EA                     __ptext8 166A  
                   __ptext9 0A99                     _lcd_com 112F                  ??___lwtoft 007B  
                   _lcd_out 1147                 ?__div_to_l_ 0070                     _dpowers 1010  
                   _isdigit 10D5            ___awmod@dividend 007B                ?_Get_Voltage 0046  
                   _sprintf 0051                  ??_lcd_init 0074                _lcd_char_out 11C6  
      end_of_initialization 07FC             ___lldiv@divisor 0070             ___lldiv@counter 007D  
  __size_of_lcd_printString 0023           _lcd_printStringXY 10E3              __tdiv_to_l_@f1 0070  
            __tdiv_to_l_@f2 0073               ??__tdiv_to_l_ 0076          ?_lcd_printStringXY 0078  
                 _PORTBbits 0006                   _PORTCbits 0007         ??_lcd_printStringXY 007C  
        Get_Voltage@channel 004D                 ?_lcd_gotoxy 0074                  lcd_com@com 0073  
         __size_of_ADC_Init 0013           __size_of_ADC_Read 0030                 ___ftdiv@exp 0044  
                main@buffer 0110          Get_Voltage@voltage 004A         __size_of__div_to_l_ 0132  
 __end_of_lcd_printStringXY 10F5                 ___ftmul@exp 0030          lcd_printStringXY@x 007A  
        lcd_printStringXY@y 007B          lcd_printString@str 0074              __end_of___bmul 111B  
            __end_of___ftge 13A0              __end_of___wmul 11A3              __end_of_fround 0D65  
       start_initialization 07F7         __end_of__tdiv_to_l_ 172D             ___llmod@divisor 0020  
           ___llmod@counter 0029                    ??___bmul 0023                    ??___ftge 0076  
       __size_of_lcd_gotoxy 0089                    ??___wmul 0074                    ??_fround 0039  
             sprintf@tmpval 00A8                  fround@prec 0045           ??_lcd_printString 0076  
         __size_of___ftpack 006C           __size_of___lltoft 002B                   ___latbits 0002  
         __size_of___lwtoft 0014               __pcstackBANK0 0020               __pcstackBANK1 00A0  
             __pcstackBANK2 0110               __pcstackBANK3 0190        __size_of_Get_Voltage 0051  
         __size_of_lcd_init 008F                 sprintf@flag 00A4                 sprintf@fval 00B3  
               sprintf@prec 00B1           main@bufferVoltage 0190  __size_of_lcd_printStringXY 0012  
                  ?___awdiv 0070                    ?___ftadd 0046                    ?___awmod 0079  
                  ?___ftdiv 0036                    ?___ftneg 0070                    ?___lldiv 0070  
                  ?___ftmul 0026                    ?___llmod 0020                    ?___ftsub 0053  
                 __npowers_ 105F                    ?___fttol 003F                   _lcd_clear 10CA  
                 __pstrings 1000                 __tdiv_to_l_ 166A                    ?_lcd_com 0070  
                  ?_lcd_out 0070                ??__div_to_l_ 0076                    ?_isdigit 0070  
                  _ADC_Init 10F5                    _ADC_Read 121C                   _scale$661 003B  
                  ?_sprintf 0059              __size_of_scale 029B              ___wmul@product 0074  
        __end_of__div_to_l_ 0BCB                    _GO_nDONE 00FA                  ?_lcd_clear 0070  
               __stringbase 100F           ___wmul@multiplier 0070                ??_lcd_gotoxy 0075  
        __end_of_lcd_gotoxy 1495            __size_of___awdiv 0059            __size_of___ftadd 0109  
          __size_of___awmod 004D            __size_of___ftdiv 00B8            __size_of___ftneg 0008  
          __size_of___lldiv 005E            __size_of___ftmul 00D3            __size_of___llmod 004E  
          __size_of___ftsub 0021            __size_of___fttol 008E                    ___ftpack 13A0  
        __end_of__stringtab 1010                    ___lltoft 11F1                 _isdigit$438 0070  
                  ___lwtoft 111B            __size_of_lcd_com 0018            __size_of_lcd_out 001A  
                sprintf@exp 00A6                  sprintf@val 00AC            __size_of_isdigit 000E  
                  _main$655 00B7                    _main$656 00B9                    _main$657 01E0  
                  _main$658 01E2                    __ptext10 1182                    __ptext11 11F1  
                  __ptext20 11A3                    __ptext12 0003                    __ptext21 11C6  
                  __ptext13 0809                    __ptext30 15B2                    __ptext22 140C  
                  __ptext14 1495                    __ptext31 13A0                    __ptext23 1523  
                  __ptext15 1161                    __ptext32 121C                    __ptext24 10CA  
                  __ptext16 0867                    __ptext33 10F5                    __ptext25 112F  
                  __ptext17 0801                    __ptext26 1147                    __ptext18 1343  
                  __ptext27 1299                    __ptext19 10E3                    __ptext28 111B  
                  __ptext29 172D                    __powers_ 1038                    _lcd_init 1523  
          __size_of_sprintf 07A6               __size_of_main 0129             _lcd_printString 11A3  
                  main@data 01E4                 ??_lcd_clear 0074                    main@volt 006B  
                  isdigit@c 0071                    scale@scl 003E                   sprintf@ap 00A3  
          __tdiv_to_l_@exp1 0025            __tdiv_to_l_@cntr 0024                   sprintf@sp 00B0  
          __tdiv_to_l_@quot 0020            ___lldiv@dividend 0074                   stringcode 100A  
              ?__tdiv_to_l_ 0070                    sprintf@c 00B6                    sprintf@f 0059  
          ___lldiv@quotient 0079                    stringdir 100A                    stringtab 1000  
             ??_Get_Voltage 007E               ?_lcd_char_out 0070     __end_of_lcd_printString 11C6  
